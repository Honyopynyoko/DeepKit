import { ClassType } from '@deepkit/core';
import { ServiceContainer } from './service-container';
import { ProviderWithScope } from '@deepkit/injector';
import { AppModule, ModuleConfigOfOptions, ModuleOptions } from './module';
export declare class CommandApplication<T extends ModuleOptions, C extends ServiceContainer<T> = ServiceContainer<T>> {
    appModule: AppModule<T, any>;
    readonly serviceContainer: ServiceContainer<T>;
    constructor(appModule: AppModule<T, any>, providers?: ProviderWithScope<any>[], imports?: AppModule<any, any>[], serviceContainer?: ServiceContainer<T>);
    setup(...args: Parameters<this['appModule']['setup']>): this;
    configure(config: ModuleConfigOfOptions<T>): this;
    /**
     * Loads a .env file and sets its configuration value.
     *
     * `path` is either an absolute or relative path. For relative paths the first
     * folder with a package.json starting from process.cwd() upwards is picked.
     *
     * So if you use 'local.env' make sure a 'local.env' file is localed beside your 'package.json'.
     *
     * `path` can be an array of paths. First existing path is picked.
     */
    loadConfigFromEnvFile(path: string | string[]): this;
    /**
     * Load all environment variables that start with given prefix and try to
     * find matching configuration options and set its value.
     *
     * Example:
     *
     * APP_databaseUrl="mongodb://localhost/mydb"
     *
     * Application.run().loadConfigFromEnvVariables('APP_').run();
     */
    loadConfigFromEnvVariables(prefix?: string): this;
    /**
     * Loads a JSON encoded environment variable and applies its content to the configuration.
     *
     * Example:
     *
     * APP_CONFIG={"databaseUrl": "mongodb://localhost/mydb", "moduleA": {"foo": "bar"}}
     *
     * Application.run().loadConfigFromEnvVariable('APP_CONFIG').run();
     */
    loadConfigFromEnvVariable(variableName?: string): this;
    run(argv?: any[]): Promise<void>;
    get<T, R = T extends ClassType<infer R> ? R : T>(token: T): R;
    execute(argv: string[]): Promise<number>;
}
