import { ClassType } from '@deepkit/core';
import { ClassDecoratorResult, FreeFluidDecorator, PropertyApiTypeInterface, PropertySchema } from '@deepkit/type';
import { Command as OclifCommand } from '@oclif/config';
import { InjectorContext } from '@deepkit/injector';
declare class ArgDefinitions {
    name: string;
    description: string;
    args: ArgDefinition[];
    getArg(name: string): ArgDefinition;
}
declare class CommandDecorator {
    t: ArgDefinitions;
    controller(name: string, options?: {
        description?: string;
    }): void;
    addArg(arg: ArgDefinition): void;
}
export declare const cli: ClassDecoratorResult<typeof CommandDecorator>;
declare class ArgDefinition {
    name: string;
    isFlag: boolean;
    propertySchema: PropertySchema;
    multiple: boolean;
    hidden: boolean;
    char: string;
    optional: boolean;
    description: string;
    default: any;
}
export declare class ArgDecorator implements PropertyApiTypeInterface<ArgDefinition> {
    t: ArgDefinition;
    onDecorator(classType: ClassType, property: string | undefined, parameterIndex?: number): void;
    description(description: string): void;
    get optional(): void;
    default(value: any): void;
    get multiple(): void;
    get hidden(): void;
    char(char: string): void;
}
export declare class ArgFlagDecorator extends ArgDecorator {
    onDecorator(classType: ClassType, property: string | undefined, parameterIndex?: number): void;
}
export declare const arg: import("@deepkit/type").PropertyDecoratorResult<typeof ArgDecorator>;
export declare const flag: import("@deepkit/type").PropertyDecoratorResult<typeof ArgFlagDecorator>;
export declare type CommandArgs = {
    [name: string]: FreeFluidDecorator<ArgDecorator>;
};
export interface Command {
    execute(...args: any[]): Promise<any>;
}
export declare function isCommand(classType: ClassType<Command>): boolean;
export declare function buildOclifCommand(classType: ClassType<Command>, rootScopedContext: InjectorContext): OclifCommand.Plugin;
export {};
