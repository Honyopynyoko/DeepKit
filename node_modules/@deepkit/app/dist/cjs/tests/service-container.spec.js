"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const injector_1 = require("@deepkit/injector");
const module_1 = require("../src/module");
const service_container_1 = require("../src/service-container");
globals_1.test('simple setup with import and overwrite', () => {
    class Connection {
    }
    let HiddenDatabaseService = class HiddenDatabaseService {
        constructor(connection) {
            this.connection = connection;
        }
    };
    HiddenDatabaseService = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Connection])
    ], HiddenDatabaseService);
    const databaseModule = new module_1.AppModule({
        providers: [Connection, HiddenDatabaseService],
        exports: [Connection]
    });
    class MyService {
    }
    const myModule = new module_1.AppModule({
        providers: [MyService],
        imports: [databaseModule]
    });
    {
        const serviceContainer = new service_container_1.ServiceContainer(myModule);
        const injector = serviceContainer.getRootInjectorContext().getInjector(0);
        globals_1.expect(injector.get(Connection)).toBeInstanceOf(Connection);
        globals_1.expect(injector.get(MyService)).toBeInstanceOf(MyService);
        globals_1.expect(() => injector.get(HiddenDatabaseService)).toThrow('Could not resolve injector token HiddenDatabaseService');
        globals_1.expect(injector.get(MyService)).toBeInstanceOf(MyService);
        const databaseModuleInjector = serviceContainer.getInjectorFor(databaseModule);
        globals_1.expect(databaseModuleInjector.get(HiddenDatabaseService)).toBeInstanceOf(HiddenDatabaseService);
        globals_1.expect(databaseModuleInjector.get(Connection)).toBe(injector.get(Connection));
        const hiddenService = databaseModuleInjector.get(HiddenDatabaseService);
        globals_1.expect(hiddenService.connection).toBe(injector.get(Connection));
        globals_1.expect(hiddenService.connection).toBe(databaseModuleInjector.get(Connection));
    }
    {
        class OverwrittenConnection {
        }
        const myModuleOverwritten = new module_1.AppModule({
            providers: [MyService, { provide: Connection, useClass: OverwrittenConnection }],
            imports: [databaseModule]
        });
        const serviceContainer = new service_container_1.ServiceContainer(myModuleOverwritten);
        globals_1.expect(serviceContainer.getRootInjectorContext().get(Connection)).toBeInstanceOf(OverwrittenConnection);
        const databaseModuleInjector = serviceContainer.getInjectorFor(databaseModule);
        const hiddenService = databaseModuleInjector.get(HiddenDatabaseService);
        globals_1.expect(hiddenService.connection).toBeInstanceOf(OverwrittenConnection);
        globals_1.expect(databaseModuleInjector.get(Connection)).toBeInstanceOf(OverwrittenConnection);
    }
});
globals_1.test('deep', () => {
    class DeepService {
    }
    const deepModule = new module_1.AppModule({
        providers: [DeepService]
    });
    class Connection {
    }
    class HiddenDatabaseService {
    }
    const databaseModule = new module_1.AppModule({
        providers: [Connection, HiddenDatabaseService],
        exports: [Connection],
        imports: [deepModule]
    });
    class MyService {
    }
    const myModule = new module_1.AppModule({
        providers: [MyService],
        imports: [databaseModule]
    });
    const serviceContainer = new service_container_1.ServiceContainer(myModule);
    const injector = serviceContainer.getRootInjectorContext();
    globals_1.expect(injector.get(Connection)).toBeInstanceOf(Connection);
    globals_1.expect(injector.get(MyService)).toBeInstanceOf(MyService);
    globals_1.expect(() => injector.get(HiddenDatabaseService)).toThrow('Could not resolve injector token HiddenDatabaseService');
    globals_1.expect(() => injector.get(DeepService)).toThrow('Could not resolve injector token DeepService');
    globals_1.expect(injector.get(MyService)).toBeInstanceOf(MyService);
});
globals_1.test('scopes', () => {
    class MyService {
    }
    class SessionHandler {
    }
    const myModule = new module_1.AppModule({
        providers: [MyService, { provide: SessionHandler, scope: 'rpc' }],
    });
    const serviceContainer = new service_container_1.ServiceContainer(myModule);
    const sessionInjector = serviceContainer.getRootInjectorContext().createChildScope('rpc');
    globals_1.expect(() => serviceContainer.getRootInjectorContext().get(SessionHandler)).toThrow('Could not resolve');
    globals_1.expect(sessionInjector.get(SessionHandler)).toBeInstanceOf(SessionHandler);
    globals_1.expect(serviceContainer.getRootInjectorContext().get(MyService)).toBeInstanceOf(MyService);
    globals_1.expect(sessionInjector.get(MyService)).toBeInstanceOf(MyService);
    globals_1.expect(serviceContainer.getRootInjectorContext().get(MyService)).toBe(sessionInjector.get(MyService));
});
globals_1.test('for root with exported module', () => {
    class SharedService {
    }
    const SharedModule = new module_1.AppModule({
        providers: [SharedService],
        exports: [SharedService]
    });
    let BaseHandler = class BaseHandler {
        constructor(sharedService) {
            this.sharedService = sharedService;
            globals_1.expect(sharedService).toBeInstanceOf(SharedService);
        }
    };
    BaseHandler = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [SharedService])
    ], BaseHandler);
    const myBaseModule = new module_1.AppModule({
        providers: [
            BaseHandler
        ],
        imports: [SharedModule],
    });
    const myModule = new module_1.AppModule({
        imports: [
            myBaseModule.forRoot()
        ]
    });
    const serviceContainer = new service_container_1.ServiceContainer(myModule);
    const injector = serviceContainer.getRootInjectorContext();
    globals_1.expect(injector.get(BaseHandler)).toBeInstanceOf(BaseHandler);
    globals_1.expect(injector.get(SharedService)).toBeInstanceOf(SharedService);
});
globals_1.test('module with config object', () => {
    class ExchangeConfig {
        constructor() {
            this.startOnBootstrap = true;
        }
    }
    let bootstrapMainCalledConfig;
    let ExchangeModuleBootstrap = class ExchangeModuleBootstrap {
        constructor(config) {
            this.config = config;
            bootstrapMainCalledConfig = this.config;
            globals_1.expect(this.config).toBeInstanceOf(ExchangeConfig);
        }
    };
    ExchangeModuleBootstrap = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [ExchangeConfig])
    ], ExchangeModuleBootstrap);
    const exchangeModule = new module_1.AppModule({
        bootstrap: ExchangeModuleBootstrap,
        providers: [
            ExchangeConfig,
        ],
        exports: [
            ExchangeConfig,
        ]
    });
    const myBaseModule = new module_1.AppModule({
        imports: [exchangeModule]
    });
    {
        bootstrapMainCalledConfig = undefined;
        const MyModule = new module_1.AppModule({
            imports: [myBaseModule.forRoot()]
        });
        const serviceContainer = new service_container_1.ServiceContainer(MyModule);
        globals_1.expect(serviceContainer.getRootInjectorContext().get(ExchangeConfig)).toBeInstanceOf(ExchangeConfig);
        globals_1.expect(bootstrapMainCalledConfig).toBeInstanceOf(ExchangeConfig);
    }
    {
        bootstrapMainCalledConfig = undefined;
        const MyModule = new module_1.AppModule({});
        const serviceContainer = new service_container_1.ServiceContainer(MyModule, [], [myBaseModule.forRoot()]);
        globals_1.expect(serviceContainer.getRootInjectorContext().get(ExchangeConfig)).toBeInstanceOf(ExchangeConfig);
        globals_1.expect(bootstrapMainCalledConfig).toBeInstanceOf(ExchangeConfig);
    }
    {
        bootstrapMainCalledConfig = undefined;
        const MyModule = new module_1.AppModule({
            imports: [exchangeModule]
        });
        const serviceContainer = new service_container_1.ServiceContainer(MyModule);
        globals_1.expect(serviceContainer.getRootInjectorContext().get(ExchangeConfig)).toBeInstanceOf(ExchangeConfig);
        globals_1.expect(bootstrapMainCalledConfig).toBeInstanceOf(ExchangeConfig);
    }
    {
        bootstrapMainCalledConfig = undefined;
        const changedConfig = new ExchangeConfig();
        changedConfig.startOnBootstrap = false;
        const MyModule = new module_1.AppModule({
            providers: [
                { provide: ExchangeConfig, useValue: changedConfig }
            ],
            imports: [exchangeModule]
        });
        const serviceContainer = new service_container_1.ServiceContainer(MyModule);
        globals_1.expect(serviceContainer.getRootInjectorContext().get(ExchangeConfig)).toBeInstanceOf(ExchangeConfig);
        globals_1.expect(bootstrapMainCalledConfig).toBeInstanceOf(ExchangeConfig);
        globals_1.expect(bootstrapMainCalledConfig).toBe(changedConfig);
    }
});
globals_1.test('exported module', () => {
    class DatabaseConnection {
    }
    const databaseModule = new module_1.AppModule({
        providers: [DatabaseConnection],
        exports: [
            DatabaseConnection
        ]
    }, 'database');
    class FSService {
    }
    const FSModule = new module_1.AppModule({
        providers: [FSService],
        imports: [databaseModule],
        exports: [
            databaseModule
        ]
    }, 'fs');
    {
        const myModule = new module_1.AppModule({
            imports: [FSModule]
        }, 'myModule');
        const copy = myModule.clone();
        globals_1.expect(copy.id).toBe(myModule.id);
        globals_1.expect(copy.getImports()[0].id).toBe(FSModule.id);
        const serviceContainer = new service_container_1.ServiceContainer(myModule);
        const rootInjector = serviceContainer.getRootInjectorContext().getInjector(0);
        globals_1.expect(rootInjector.get(DatabaseConnection)).toBeInstanceOf(DatabaseConnection);
        const databaseModuleInjector = serviceContainer.getInjectorFor(databaseModule);
        globals_1.expect(databaseModuleInjector.get(DatabaseConnection)).toBeInstanceOf(DatabaseConnection);
        globals_1.expect(databaseModuleInjector.get(DatabaseConnection)).toBe(rootInjector.get(DatabaseConnection));
    }
});
//# sourceMappingURL=service-container.spec.js.map