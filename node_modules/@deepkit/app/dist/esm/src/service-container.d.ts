import { ClassType } from '@deepkit/core';
import { EventDispatcher } from '@deepkit/event';
import { AppModule, ModuleOptions } from './module';
import { Context, ContextRegistry, Injector, InjectorContext, ProviderWithScope } from '@deepkit/injector';
import { WorkflowDefinition } from '@deepkit/workflow';
export interface OnInit {
    onInit: () => Promise<void>;
}
export interface onDestroy {
    onDestroy: () => Promise<void>;
}
export declare class CliControllers {
    readonly controllers: Map<string, ClassType<any>>;
}
export declare class WorkflowRegistry {
    readonly workflows: WorkflowDefinition<any>[];
    constructor(workflows: WorkflowDefinition<any>[]);
    get(name: string): WorkflowDefinition<any>;
    add(workflow: WorkflowDefinition<any>): void;
}
export declare function isProvided(providers: ProviderWithScope[], token: any): boolean;
export declare class ServiceContainer<C extends ModuleOptions = ModuleOptions> {
    appModule: AppModule<any, any>;
    protected providers: ProviderWithScope[];
    protected imports: AppModule<any, any>[];
    readonly cliControllers: CliControllers;
    readonly workflowRegistry: WorkflowRegistry;
    protected currentIndexId: number;
    protected contextManager: ContextRegistry;
    protected rootInjectorContext: InjectorContext;
    protected eventListenerContainer: EventDispatcher;
    protected rootContext?: Context;
    protected moduleContexts: Map<AppModule<ModuleOptions, "">, Context[]>;
    protected moduleIdContexts: Map<number, Context[]>;
    constructor(appModule: AppModule<any, any>, providers?: ProviderWithScope[], imports?: AppModule<any, any>[]);
    process(): void;
    getRootInjectorContext(): InjectorContext;
    private setupHook;
    bootstrapModules(): void;
    getContextFor(module: AppModule<any, any>): Context;
    getInjectorFor(module: AppModule<any, any>): Injector;
    getRootInjector(): Injector;
    protected getContext(id: number): Context;
    protected getNewContext(module: AppModule<any, any>, parent?: Context): Context;
    protected processModule(module: AppModule<ModuleOptions>, parentContext?: Context, additionalProviders?: ProviderWithScope[], additionalImports?: AppModule<any, any>[]): Context;
    protected setupController(providers: ProviderWithScope[], controller: ClassType, context: Context): void;
}
