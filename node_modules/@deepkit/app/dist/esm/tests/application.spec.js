var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { t } from '@deepkit/type';
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { CommandApplication } from '../src/application';
import { inject } from '@deepkit/injector';
import { AppModule, AppModuleConfig } from '../src/module';
const baseConfig = new AppModuleConfig({
    db: t.string.default('notSet'),
});
let BaseService = class BaseService {
    constructor(db) {
        this.db = db;
    }
};
BaseService = __decorate([
    __param(0, inject(baseConfig.token('db'))),
    __metadata("design:paramtypes", [String])
], BaseService);
const baseModule = new AppModule({ config: baseConfig, providers: [BaseService] }, 'base').forRoot();
const config = new AppModuleConfig({
    token: t.string.default('notSet'),
});
let Service = class Service {
    constructor(token) {
        this.token = token;
    }
};
Service = __decorate([
    __param(0, inject(config.token('token'))),
    __metadata("design:paramtypes", [String])
], Service);
test('loadConfigFromEnvVariables', async () => {
    process.env.APP_token = 'changed1';
    process.env.APP_base_db = 'changed2';
    const app = new CommandApplication(new AppModule({ config, providers: [Service], imports: [baseModule] }, 'app'));
    app.loadConfigFromEnvVariables('APP_');
    const service = app.get(Service);
    expect(service.token).toBe('changed1');
    const baseService = app.get(BaseService);
    expect(baseService.db).toBe('changed2');
});
test('loadConfigFromEnvVariable', async () => {
    process.env.APP_CONFIG = JSON.stringify({
        token: 'changed3',
        base: {
            db: 'changed4'
        }
    });
    const app = new CommandApplication(new AppModule({ config, providers: [Service], imports: [baseModule] }, 'app'));
    app.loadConfigFromEnvVariable('APP_CONFIG');
    const service = app.get(Service);
    expect(service.token).toBe('changed3');
    const baseService = app.get(BaseService);
    expect(baseService.db).toBe('changed4');
});
test('loadConfigFromEnvFile', async () => {
    const app = new CommandApplication(new AppModule({ config, providers: [Service], imports: [baseModule] }, 'app'));
    app.loadConfigFromEnvFile(__dirname + '/test.env');
    const service = app.get(Service);
    expect(service.token).toBe('changed5');
    const baseService = app.get(BaseService);
    expect(baseService.db).toBe('changed6');
});
test('loadConfigFromEnvVariables non-root import', async () => {
    const baseConfig = new AppModuleConfig({
        db: t.string.default('notSet'),
    });
    let BaseService = class BaseService {
        constructor(db) {
            this.db = db;
        }
    };
    BaseService = __decorate([
        __param(0, inject(baseConfig.token('db'))),
        __metadata("design:paramtypes", [String])
    ], BaseService);
    const baseModule = new AppModule({ config: baseConfig, providers: [BaseService] }, 'base');
    const app = new CommandApplication(new AppModule({ imports: [baseModule] }));
    process.env.APP_base_db = 'changed2';
    app.loadConfigFromEnvVariables('APP_');
    const baseService = app.serviceContainer.getInjectorFor(baseModule).get(BaseService);
    expect(baseService.db).toBe('changed2');
});
//# sourceMappingURL=application.spec.js.map