var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { CommandApplication } from '../src/application';
import { arg, cli } from '../src/command';
import { AppModule } from '../src/module';
import { ServiceContainer } from '../src/service-container';
let MyCli = class MyCli {
    async execute(host) {
        return 'bar' === host ? 0 : 1;
    }
};
__decorate([
    __param(0, arg),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MyCli.prototype, "execute", null);
MyCli = __decorate([
    cli.controller('my')
], MyCli);
test('command simple', () => {
    const cliConfig = cli._fetch(MyCli);
    if (!cliConfig)
        throw new Error('cliConfig expected');
    expect(cliConfig.name).toBe('my');
    expect(cliConfig.getArg('host').name).toBe('host');
    expect(cliConfig.getArg('host').optional).toBe(false);
    expect(cliConfig.getArg('host').propertySchema.type).toBe('string');
});
test('command execute', async () => {
    const myModule = new AppModule({
        controllers: [MyCli]
    });
    const app = new CommandApplication(myModule);
    const serviceContainer = app.get(ServiceContainer);
    expect(serviceContainer.cliControllers.controllers.get('my')).toBe(MyCli);
    expect(await app.execute(['my', 'bar'])).toBe(0);
});
//# sourceMappingURL=command.spec.js.map