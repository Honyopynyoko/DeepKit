import { ProcessLock, ProcessLocker } from '@deepkit/core';
import { RpcKernelBaseConnection, RpcConnectionWriter, RpcMessage, RpcMessageBuilder, RpcKernelConnections, RpcKernel } from '@deepkit/rpc';
export declare class BrokerConnection extends RpcKernelBaseConnection {
    protected connections: RpcKernelConnections;
    protected state: BrokerState;
    protected subscribedChannels: string[];
    protected locks: Map<number, ProcessLock>;
    protected replies: Map<number, (message: RpcMessage) => void>;
    constructor(transportWriter: RpcConnectionWriter, connections: RpcKernelConnections, state: BrokerState);
    close(): void;
    protected sendEntityFields(name: string): Promise<void>;
    onMessage(message: RpcMessage, response: RpcMessageBuilder): Promise<void>;
}
export declare class BrokerState {
    setStore: Map<string, Uint8Array>;
    subscriptions: Map<string, BrokerConnection[]>;
    entityFields: Map<string, Map<string, number>>;
    locker: ProcessLocker;
    getEntityFields(name: string): string[];
    publishEntityFields(name: string, fields: string[]): boolean;
    unsubscribeEntityFields(name: string, fields: string[]): boolean | undefined;
    lock(id: string, ttl: number, timeout?: number): Promise<ProcessLock>;
    tryLock(id: string, ttl?: number): Promise<ProcessLock | undefined>;
    isLocked(id: string): boolean;
    unsubscribe(channel: string, connection: BrokerConnection): void;
    subscribe(channel: string, connection: BrokerConnection): void;
    publish(channel: string, v: Uint8Array): void;
    set(id: string, data: Uint8Array): void;
    increment(id: string, v?: number): number;
    get(id: string): Uint8Array | undefined;
    delete(id: string): void;
}
export declare class BrokerKernel extends RpcKernel {
    protected state: BrokerState;
    protected connections: RpcKernelConnections;
    createConnection(writer: RpcConnectionWriter): BrokerConnection;
}
