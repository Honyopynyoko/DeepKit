"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.brokerEntityFields = exports.brokerResponseIsLock = exports.brokerLock = exports.brokerLockId = exports.brokerResponseSubscribeMessage = exports.brokerSubscribe = exports.brokerPublish = exports.brokerGet = exports.brokerResponseGet = exports.brokerSet = exports.brokerResponseIncrement = exports.brokerIncrement = exports.brokerDelete = exports.BrokerType = void 0;
const type_1 = require("@deepkit/type");
var BrokerType;
(function (BrokerType) {
    //the first 100 are reserved
    BrokerType[BrokerType["Ack"] = 0] = "Ack";
    BrokerType[BrokerType["Error"] = 1] = "Error";
    BrokerType[BrokerType["Chunk"] = 2] = "Chunk";
    BrokerType[BrokerType["Publish"] = 100] = "Publish";
    BrokerType[BrokerType["Subscribe"] = 101] = "Subscribe";
    BrokerType[BrokerType["Unsubscribe"] = 102] = "Unsubscribe";
    BrokerType[BrokerType["ResponseSubscribeMessage"] = 103] = "ResponseSubscribeMessage";
    BrokerType[BrokerType["Set"] = 104] = "Set";
    BrokerType[BrokerType["Get"] = 105] = "Get";
    BrokerType[BrokerType["Increment"] = 106] = "Increment";
    BrokerType[BrokerType["ResponseIncrement"] = 107] = "ResponseIncrement";
    BrokerType[BrokerType["Delete"] = 108] = "Delete";
    BrokerType[BrokerType["ResponseGet"] = 109] = "ResponseGet";
    BrokerType[BrokerType["Lock"] = 110] = "Lock";
    BrokerType[BrokerType["Unlock"] = 111] = "Unlock";
    BrokerType[BrokerType["IsLocked"] = 112] = "IsLocked";
    BrokerType[BrokerType["TryLock"] = 113] = "TryLock";
    BrokerType[BrokerType["ResponseLock"] = 114] = "ResponseLock";
    BrokerType[BrokerType["ResponseLockFailed"] = 115] = "ResponseLockFailed";
    BrokerType[BrokerType["ResponseIsLock"] = 116] = "ResponseIsLock";
    BrokerType[BrokerType["PublishEntityFields"] = 117] = "PublishEntityFields";
    BrokerType[BrokerType["UnsubscribeEntityFields"] = 118] = "UnsubscribeEntityFields";
    BrokerType[BrokerType["AllEntityFields"] = 119] = "AllEntityFields";
    BrokerType[BrokerType["EntityFields"] = 120] = "EntityFields";
})(BrokerType = exports.BrokerType || (exports.BrokerType = {}));
exports.brokerDelete = type_1.t.schema({
    n: type_1.t.string,
});
exports.brokerIncrement = type_1.t.schema({
    n: type_1.t.string,
    v: type_1.t.number.optional
});
exports.brokerResponseIncrement = type_1.t.schema({
    v: type_1.t.number
});
exports.brokerSet = type_1.t.schema({
    n: type_1.t.string,
    v: type_1.t.type(Uint8Array),
});
exports.brokerResponseGet = type_1.t.schema({
    v: type_1.t.type(Uint8Array).optional,
});
exports.brokerGet = type_1.t.schema({
    n: type_1.t.string,
});
exports.brokerPublish = type_1.t.schema({
    c: type_1.t.string,
    v: type_1.t.type(Uint8Array),
});
exports.brokerSubscribe = type_1.t.schema({
    c: type_1.t.string,
});
exports.brokerResponseSubscribeMessage = type_1.t.schema({
    c: type_1.t.string,
    v: type_1.t.type(Uint8Array),
});
exports.brokerLockId = type_1.t.schema({
    id: type_1.t.string,
});
exports.brokerLock = type_1.t.schema({
    id: type_1.t.string,
    ttl: type_1.t.number,
    timeout: type_1.t.number.optional,
});
exports.brokerResponseIsLock = type_1.t.schema({
    v: type_1.t.boolean
});
exports.brokerEntityFields = type_1.t.schema({
    name: type_1.t.string,
    fields: type_1.t.array(type_1.t.string),
});
//# sourceMappingURL=model.js.map