"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@deepkit/core");
const core_rxjs_1 = require("@deepkit/core-rxjs");
const type_1 = require("@deepkit/type");
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const rxjs_1 = require("rxjs");
const client_1 = require("../src/client");
const kernel_1 = require("../src/kernel");
Error.stackTraceLimit = 1000;
globals_1.test('basics', async () => {
    const kernel = new kernel_1.BrokerKernel();
    const client = new client_1.BrokerDirectClient(kernel);
    const schema = type_1.t.schema({ v: type_1.t.number });
    const keyId = client.key('id', schema);
    await keyId.set({ v: 123 });
    {
        const v = await keyId.get();
        globals_1.expect(v).toEqual({ v: 123 });
    }
    {
        const v = await keyId.getOrUndefined();
        globals_1.expect(v).toEqual({ v: 123 });
    }
    {
        const v = await client.key('id-unknown', schema).getOrUndefined();
        globals_1.expect(v).toBe(undefined);
    }
    {
        let n = await client.increment('inc', 5);
        globals_1.expect(n).toBe(5);
        globals_1.expect(await client.getIncrement('inc')).toBe(5);
        n = await client.increment('inc', 5);
        globals_1.expect(n).toBe(10);
        n = await client.increment('inc', 5);
        globals_1.expect(n).toBe(15);
        globals_1.expect(await client.getIncrement('inc')).toBe(15);
    }
    {
        await client.delete('inc');
        globals_1.expect(await client.key('inc', schema).getOrUndefined()).toBe(undefined);
    }
});
globals_1.test('pub-sub', async () => {
    const kernel = new kernel_1.BrokerKernel();
    const client = new client_1.BrokerDirectClient(kernel);
    {
        const schema = type_1.t.schema({ value: type_1.t.number });
        const subject = new rxjs_1.BehaviorSubject(undefined);
        const channel1 = client.channel('channel1', schema);
        await channel1.subscribe(v => subject.next(v));
        await channel1.publish({ value: 1345 });
        await core_1.sleep(0);
        globals_1.expect(subject.value).toEqual({ value: 1345 });
        await channel1.publish({ value: 555 });
        await core_1.sleep(0);
        globals_1.expect(subject.value).toEqual({ value: 555 });
    }
    {
        const subject = new rxjs_1.BehaviorSubject(undefined);
        const channel2 = client.channel('channel2', type_1.t.string);
        await channel2.subscribe(v => subject.next(v));
        await channel2.publish('myValue');
        await core_1.sleep(0);
        globals_1.expect(subject.value).toEqual('myValue');
    }
    {
        const subject = new rxjs_1.BehaviorSubject(undefined);
        const channel3 = client.channel('channel3', type_1.t.number);
        await channel3.subscribe(v => subject.next(v));
        await channel3.publish(123132);
        await core_1.sleep(0);
        globals_1.expect(subject.value).toEqual(123132);
    }
    {
        const ClassA = type_1.t.schema({
            type: type_1.t.literal('a').discriminant,
            name: type_1.t.string,
        });
        const ClassB = type_1.t.schema({
            type: type_1.t.literal('b').discriminant,
            id: type_1.t.number,
        });
        const subject = new rxjs_1.BehaviorSubject(undefined);
        const channel4 = client.channel('channel4', type_1.t.union(ClassA, ClassB));
        await channel4.subscribe(v => subject.next(v));
        await channel4.publish({ type: 'a', name: 'bar' });
        await core_1.sleep(0);
        globals_1.expect(subject.value).toEqual({ type: 'a', name: 'bar' });
        globals_1.expect(subject.value).toBeInstanceOf(ClassA.classType);
        await channel4.publish({ type: 'b', id: 555 });
        await core_1.sleep(0);
        globals_1.expect(subject.value).toEqual({ type: 'b', id: 555 });
        globals_1.expect(subject.value).toBeInstanceOf(ClassB.classType);
    }
});
globals_1.test('lock', async () => {
    const kernel = new kernel_1.BrokerKernel();
    const client = new client_1.BrokerDirectClient(kernel);
    {
        const lock1 = await client.lock('lock1');
        globals_1.expect(await client.isLocked('lock1')).toBe(true);
        globals_1.expect(await client.tryLock('lock1')).toBe(undefined);
        await lock1.unsubscribe();
        globals_1.expect(await client.isLocked('lock1')).toBe(false);
    }
    {
        const lock1 = await client.lock('lock1');
        const lock2 = await client.tryLock('lock2');
        globals_1.expect(lock2).toBeInstanceOf(core_rxjs_1.AsyncSubscription);
        await lock2.unsubscribe();
        const lock1_2 = await client.tryLock('lock1');
        globals_1.expect(lock1_2).toBe(undefined);
        await lock1.unsubscribe();
        const lock1_3 = await client.tryLock('lock1');
        globals_1.expect(lock1_3).toBeInstanceOf(core_rxjs_1.AsyncSubscription);
        await lock1_3.unsubscribe();
    }
});
globals_1.test('entity-fields', async () => {
    const kernel = new kernel_1.BrokerKernel();
    const client1 = new client_1.BrokerDirectClient(kernel);
    const client2 = new client_1.BrokerDirectClient(kernel);
    {
        globals_1.expect(await client1.getEntityFields('model')).toEqual([]);
        const sub = await client1.publishEntityFields('model', ['foo', 'bar']);
        globals_1.expect(await client1.getEntityFields('model')).toEqual(['foo', 'bar']);
        await sub.unsubscribe();
        globals_1.expect(await client1.getEntityFields('model')).toEqual([]);
    }
    {
        const sub = await client1.publishEntityFields('model', ['foo', 'bar']);
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar']);
        await sub.unsubscribe();
        globals_1.expect(await client2.getEntityFields('model')).toEqual([]);
    }
    {
        const sub1 = await client1.publishEntityFields('model', ['foo', 'bar']);
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar']);
        const sub2 = await client1.publishEntityFields('model', ['foo', 'bar', 'another']);
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar', 'another']);
        await sub2.unsubscribe();
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar']);
        await sub1.unsubscribe();
        globals_1.expect(await client2.getEntityFields('model')).toEqual([]);
    }
    {
        const sub1 = await client1.publishEntityFields('model', ['foo', 'bar']);
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar']);
        const sub2 = await client1.publishEntityFields('model', ['foo', 'bar', 'field3']);
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar', 'field3']);
        await sub2.unsubscribe();
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['foo', 'bar']);
        const sub3 = await client1.publishEntityFields('model', ['field4']);
        await sub1.unsubscribe();
        globals_1.expect(await client2.getEntityFields('model')).toEqual(['field4']);
        await sub3.unsubscribe();
        globals_1.expect(await client2.getEntityFields('model')).toEqual([]);
    }
});
//# sourceMappingURL=kernel.spec.js.map