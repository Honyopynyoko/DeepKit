/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { t } from "@deepkit/type";
export var BrokerType;
(function (BrokerType) {
    //the first 100 are reserved
    BrokerType[BrokerType["Ack"] = 0] = "Ack";
    BrokerType[BrokerType["Error"] = 1] = "Error";
    BrokerType[BrokerType["Chunk"] = 2] = "Chunk";
    BrokerType[BrokerType["Publish"] = 100] = "Publish";
    BrokerType[BrokerType["Subscribe"] = 101] = "Subscribe";
    BrokerType[BrokerType["Unsubscribe"] = 102] = "Unsubscribe";
    BrokerType[BrokerType["ResponseSubscribeMessage"] = 103] = "ResponseSubscribeMessage";
    BrokerType[BrokerType["Set"] = 104] = "Set";
    BrokerType[BrokerType["Get"] = 105] = "Get";
    BrokerType[BrokerType["Increment"] = 106] = "Increment";
    BrokerType[BrokerType["ResponseIncrement"] = 107] = "ResponseIncrement";
    BrokerType[BrokerType["Delete"] = 108] = "Delete";
    BrokerType[BrokerType["ResponseGet"] = 109] = "ResponseGet";
    BrokerType[BrokerType["Lock"] = 110] = "Lock";
    BrokerType[BrokerType["Unlock"] = 111] = "Unlock";
    BrokerType[BrokerType["IsLocked"] = 112] = "IsLocked";
    BrokerType[BrokerType["TryLock"] = 113] = "TryLock";
    BrokerType[BrokerType["ResponseLock"] = 114] = "ResponseLock";
    BrokerType[BrokerType["ResponseLockFailed"] = 115] = "ResponseLockFailed";
    BrokerType[BrokerType["ResponseIsLock"] = 116] = "ResponseIsLock";
    BrokerType[BrokerType["PublishEntityFields"] = 117] = "PublishEntityFields";
    BrokerType[BrokerType["UnsubscribeEntityFields"] = 118] = "UnsubscribeEntityFields";
    BrokerType[BrokerType["AllEntityFields"] = 119] = "AllEntityFields";
    BrokerType[BrokerType["EntityFields"] = 120] = "EntityFields";
})(BrokerType || (BrokerType = {}));
export const brokerDelete = t.schema({
    n: t.string,
});
export const brokerIncrement = t.schema({
    n: t.string,
    v: t.number.optional
});
export const brokerResponseIncrement = t.schema({
    v: t.number
});
export const brokerSet = t.schema({
    n: t.string,
    v: t.type(Uint8Array),
});
export const brokerResponseGet = t.schema({
    v: t.type(Uint8Array).optional,
});
export const brokerGet = t.schema({
    n: t.string,
});
export const brokerPublish = t.schema({
    c: t.string,
    v: t.type(Uint8Array),
});
export const brokerSubscribe = t.schema({
    c: t.string,
});
export const brokerResponseSubscribeMessage = t.schema({
    c: t.string,
    v: t.type(Uint8Array),
});
export const brokerLockId = t.schema({
    id: t.string,
});
export const brokerLock = t.schema({
    id: t.string,
    ttl: t.number,
    timeout: t.number.optional,
});
export const brokerResponseIsLock = t.schema({
    v: t.boolean
});
export const brokerEntityFields = t.schema({
    name: t.string,
    fields: t.array(t.string),
});
//# sourceMappingURL=model.js.map