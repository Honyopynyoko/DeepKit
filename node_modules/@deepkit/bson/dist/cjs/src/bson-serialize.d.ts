import { ClassType } from '@deepkit/core';
import { ClassSchema, JitStack } from '@deepkit/type';
import { ObjectId, UUID } from './model';
export declare function createBuffer(size: number): Uint8Array;
export declare const JS_INT_MAX = 9007199254740992;
export declare const JS_INT_MIN = -9007199254740992;
export declare function hexToByte(hex: string, index?: number, offset?: number): number;
export declare function uuidStringToByte(hex: string, index?: number): number;
export declare function stringByteLength(str: string): number;
export declare function getValueSize(value: any): number;
/**
 * Creates a JIT compiled function that allows to get the BSON buffer size of a certain object.
 */
export declare function createBSONSizer(schema: ClassSchema, jitStack?: JitStack): (data: object) => number;
export declare class Writer {
    buffer: Uint8Array;
    offset: number;
    dataView: DataView;
    constructor(buffer: Uint8Array, offset?: number);
    writeUint32(v: number): void;
    writeInt32(v: number): void;
    writeDouble(v: number): void;
    writeDelayedSize(v: number, position: number): void;
    writeByte(v: number): void;
    writeBuffer(buffer: Uint8Array, offset?: number): void;
    writeNull(): void;
    writeAsciiString(str: string): void;
    writeString(str: string): void;
    writeBigInt(value: bigint): void;
    writeUUID(value: string | UUID): void;
    writeObjectId(value: string | ObjectId): void;
    write(value: any, nameWriter?: () => void): void;
}
export declare function serialize(data: any): Uint8Array;
export declare type BSONSerializer = (data: any, writer?: Writer) => Uint8Array;
export declare type BSONSizer = (data: any) => number;
/**
 * Serializes an schema instance to BSON.
 *
 * Note: The instances needs to be in the mongo format already since it does not resolve decorated properties.
 *       So call it with the result of classToMongo(Schema, item).
 */
export declare function getBSONSerializer(schema: ClassSchema | ClassType): BSONSerializer;
export declare function getBSONSizer(schema: ClassSchema | ClassType): BSONSizer;
