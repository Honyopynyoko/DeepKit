var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { t } from '@deepkit/type';
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { getBSONDecoder } from '../../src/bson-jit-parser';
import { getBSONSerializer } from '../../src/bson-serialize';
test('partial', () => {
    class User {
        constructor() {
            this.id = 0;
            this.name = '';
        }
    }
    __decorate([
        t,
        __metadata("design:type", Number)
    ], User.prototype, "id", void 0);
    __decorate([
        t,
        __metadata("design:type", String)
    ], User.prototype, "name", void 0);
    class Model {
        constructor() {
            this.id = 0;
            this.defaultValue = 5;
        }
    }
    __decorate([
        t,
        __metadata("design:type", Number)
    ], Model.prototype, "id", void 0);
    __decorate([
        t,
        __metadata("design:type", Number)
    ], Model.prototype, "defaultValue", void 0);
    __decorate([
        t,
        __metadata("design:type", User)
    ], Model.prototype, "manager", void 0);
    {
        const s = t.schema({
            v: t.type(Model),
        });
        const bson = getBSONSerializer(s)({ v: { id: 4 } });
        const value = getBSONDecoder(s)(bson);
        expect(value.v).toBeInstanceOf(Model);
        expect(value).toEqual({ v: { id: 4, defaultValue: 5 } });
    }
    {
        const s = t.schema({
            v: t.partial(Model),
        });
        {
            const bson = getBSONSerializer(s)({ v: { id: 4 } });
            const value = getBSONDecoder(s)(bson);
            expect(value.v).not.toBeInstanceOf(Model);
            expect(value).toEqual({ v: { id: 4 } });
        }
        {
            const bson = getBSONSerializer(s)({ v: { id: 4, manager: { id: 23, name: 'peter' } } });
            const value = getBSONDecoder(s)(bson);
            expect(value.v).not.toBeInstanceOf(Model);
            expect(value.v.manager).toBeInstanceOf(User); //in partials we have full instances
            expect(value).toEqual({ v: { id: 4, manager: { id: 23, name: 'peter' } } });
        }
    }
    {
        const s = t.schema({
            v: t.array(t.partial(Model)),
        });
        {
            const bson = getBSONSerializer(s)({ v: [{ id: 4 }, { id: 5 }] });
            const value = getBSONDecoder(s)(bson);
            expect(value.v).not.toBeInstanceOf(Model);
            expect(value).toEqual({ v: [{ id: 4 }, { id: 5 }] });
        }
    }
});
//# sourceMappingURL=partial-value.spec.js.map