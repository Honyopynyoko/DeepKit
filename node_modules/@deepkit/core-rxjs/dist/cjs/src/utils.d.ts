import { BehaviorSubject, Observable, Subject, Subscription, TeardownLogic } from 'rxjs';
export declare class AsyncSubscription {
    private cb;
    protected unsubscribed: boolean;
    constructor(cb: () => Promise<void>);
    unsubscribe(): Promise<void>;
}
export declare function isSubject(v: any): v is Subject<any>;
export declare function isBehaviorSubject(v: any): v is BehaviorSubject<any>;
/**
 * RXJS subscription collection, to easily collect multiple subscriptions and unsubscribe all at once.
 * Added subscriptions are automatically removed when they get unsubscribed.
 *
 * @example
 * ```typescript
 * const subs = new Subscriptions();
 *
 * subs.add = new Subscription(() => {});
 * subs.add = observeable.subscribe((next) => {});
 *
 * subs.unsubscribe();
 * ```
 */
export declare class Subscriptions {
    protected teardown?: (() => void | Promise<void>) | undefined;
    readonly list: Subscription[];
    constructor(teardown?: (() => void | Promise<void>) | undefined);
    set add(v: Subscription);
    unsubscribe(): void;
}
export declare function subscriptionToPromise<T>(subscription: Subscription): Promise<void>;
export declare function nextValue<T>(o: Observable<T>): Promise<T>;
export declare function observableToPromise<T>(o: Observable<T>, next?: (data: T) => void): Promise<T>;
export declare function promiseToObservable<T>(o: () => Promise<T>): Observable<T>;
export declare function tearDown(teardown: TeardownLogic): Promise<void>;
