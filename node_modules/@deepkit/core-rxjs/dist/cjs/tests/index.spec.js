"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const rxjs_1 = require("rxjs");
const utils_1 = require("../src/utils");
globals_1.test('nextValue subject', async () => {
    const subject = new rxjs_1.Subject();
    setTimeout(() => {
        subject.next(5);
    }, 10);
    const next = await utils_1.nextValue(subject);
    globals_1.expect(next).toBe(5);
});
globals_1.test('nextValue behaviorsubject', async () => {
    const subject = new rxjs_1.BehaviorSubject(0);
    setTimeout(() => {
        subject.next(5);
    }, 10);
    const next = await utils_1.nextValue(subject);
    globals_1.expect(next).toBe(5);
});
globals_1.test('is functions', async () => {
    globals_1.expect(utils_1.isSubject(new rxjs_1.Observable)).toBe(false);
    globals_1.expect(utils_1.isSubject(new rxjs_1.Subject)).toBe(true);
    globals_1.expect(utils_1.isSubject(new rxjs_1.BehaviorSubject(undefined))).toBe(true);
    globals_1.expect(utils_1.isBehaviorSubject(new rxjs_1.Observable)).toBe(false);
    globals_1.expect(utils_1.isBehaviorSubject(new rxjs_1.Subject)).toBe(false);
    globals_1.expect(utils_1.isBehaviorSubject(new rxjs_1.BehaviorSubject(undefined))).toBe(true);
});
globals_1.test('Subscriptions unsubscribe', async () => {
    const subscriptions = new utils_1.Subscriptions();
    const sub1 = subscriptions.add = new rxjs_1.Subscription(() => { });
    const sub2 = subscriptions.add = new rxjs_1.Subscription(() => { });
    globals_1.expect(subscriptions.list.length).toBe(2);
    globals_1.expect(sub1.closed).toBe(false);
    globals_1.expect(sub2.closed).toBe(false);
    subscriptions.unsubscribe();
    globals_1.expect(subscriptions.list.length).toBe(0);
    globals_1.expect(sub1.closed).toBe(true);
    globals_1.expect(sub2.closed).toBe(true);
});
globals_1.test('Subscriptions auto remove', async () => {
    const subscriptions = new utils_1.Subscriptions();
    const sub1 = subscriptions.add = new rxjs_1.Subscription(() => { });
    const sub2 = subscriptions.add = new rxjs_1.Subscription(() => { });
    globals_1.expect(subscriptions.list.length).toBe(2);
    globals_1.expect(sub1.closed).toBe(false);
    globals_1.expect(sub2.closed).toBe(false);
    sub1.unsubscribe();
    globals_1.expect(subscriptions.list.length).toBe(1);
    globals_1.expect(sub1.closed).toBe(true);
    globals_1.expect(sub2.closed).toBe(false);
    sub2.unsubscribe();
    globals_1.expect(subscriptions.list.length).toBe(0);
    globals_1.expect(sub1.closed).toBe(true);
    globals_1.expect(sub2.closed).toBe(true);
});
//# sourceMappingURL=index.spec.js.map