/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { isObservable, Observable } from 'rxjs';
import { arrayRemoveItem, createStack, isFunction, mergePromiseStack, mergeStack } from '@deepkit/core';
import { first, skip } from 'rxjs/operators';
export class AsyncSubscription {
    constructor(cb) {
        this.cb = cb;
        this.unsubscribed = false;
    }
    async unsubscribe() {
        if (this.unsubscribed)
            return;
        this.unsubscribed = true;
        await this.cb();
    }
}
export function isSubject(v) {
    return v && isFunction(v.unsubscribe) && isObservable(v);
}
export function isBehaviorSubject(v) {
    return v && isFunction(v.getValue) && isSubject(v);
}
/**
 * RXJS subscription collection, to easily collect multiple subscriptions and unsubscribe all at once.
 * Added subscriptions are automatically removed when they get unsubscribed.
 *
 * @example
 * ```typescript
 * const subs = new Subscriptions();
 *
 * subs.add = new Subscription(() => {});
 * subs.add = observeable.subscribe((next) => {});
 *
 * subs.unsubscribe();
 * ```
 */
export class Subscriptions {
    constructor(teardown) {
        this.teardown = teardown;
        this.list = [];
    }
    set add(v) {
        this.list.push(v);
        v.add(() => {
            arrayRemoveItem(this.list, v);
        });
    }
    unsubscribe() {
        //it's important to work on a array copy, since unsubscribe() modifies directly this.list
        for (const sub of this.list.slice(0)) {
            sub.unsubscribe();
        }
        if (this.teardown) {
            this.teardown();
        }
        this.list.splice(0, this.list.length);
    }
}
export function subscriptionToPromise(subscription) {
    return new Promise((resolve) => {
        const sub = subscription.add(() => {
            resolve();
            sub.unsubscribe();
        });
    });
}
export function nextValue(o) {
    if (isFunction(o.getValue)) { //BehaviorSubject
        return o.pipe(skip(1)).pipe(first()).toPromise();
    }
    return o.pipe(first()).toPromise();
}
export function observableToPromise(o, next) {
    const stack = createStack();
    return new Promise((resolve, reject) => {
        let last;
        o.subscribe((data) => {
            if (next) {
                next(data);
            }
            last = data;
        }, (error) => {
            mergeStack(error, stack);
            reject(error);
        }, () => {
            resolve(last);
        });
    });
}
export function promiseToObservable(o) {
    const stack = createStack();
    return new Observable((observer) => {
        try {
            mergePromiseStack(o(), stack).then((data) => {
                observer.next(data);
                observer.complete();
            }, (error) => {
                observer.error(error);
            });
        }
        catch (error) {
            observer.error(error);
        }
    });
}
export async function tearDown(teardown) {
    if ('function' === typeof teardown) {
        await teardown();
    }
    else if ('object' === typeof teardown && teardown.unsubscribe) {
        await teardown.unsubscribe();
    }
}
//# sourceMappingURL=utils.js.map