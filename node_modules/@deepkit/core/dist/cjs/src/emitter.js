"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncEventEmitter = exports.AsyncEmitterEvent = void 0;
const core_1 = require("./core");
let asyncId = 0;
class AsyncEmitterEvent {
    constructor() {
        this.id = asyncId++;
        this.stopped = false;
        this.propagationStopped = false;
    }
    /**
     * Stop propagating the event to subsequent event listeners.
     */
    stopPropagation() {
        this.propagationStopped = true;
    }
    /**
     * Signal the emitter that you want to abort.
     * Subsequent event listeners will still be called.
     */
    stop() {
        this.stopped = true;
    }
}
exports.AsyncEmitterEvent = AsyncEmitterEvent;
class AsyncEventEmitter {
    constructor(parent) {
        this.parent = parent;
        this.subscribers = [];
    }
    subscribe(callback) {
        this.subscribers.push(callback);
        return {
            unsubscribe: () => {
                core_1.arrayRemoveItem(this.subscribers, callback);
            }
        };
    }
    async emit(event) {
        if (this.parent)
            await this.parent.emit(event);
        if (event.propagationStopped)
            return;
        for (const subscriber of this.subscribers) {
            await subscriber(event);
            if (event.propagationStopped)
                return;
        }
    }
    hasSubscriptions() {
        return this.subscribers.length > 0;
    }
}
exports.AsyncEventEmitter = AsyncEventEmitter;
//# sourceMappingURL=emitter.js.map