"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidEnumValue = exports.isValidEnumValue = exports.getEnumKeyLabelMap = exports.getEnumValues = exports.getEnumLabels = exports.getEnumLabel = void 0;
const iterators_1 = require("./iterators");
const cacheEnumLabels = new Map();
/**
 * Returns the enum label for a given enum value.
 *
 * @public
 */
function getEnumLabel(enumType, id) {
    for (const i of iterators_1.eachKey(enumType)) {
        if (id === enumType[i]) {
            return i;
        }
    }
}
exports.getEnumLabel = getEnumLabel;
/**
 * Returns all possible enum labels.
 *
 * @public
 */
function getEnumLabels(enumDefinition) {
    let value = cacheEnumLabels.get(enumDefinition);
    if (!value) {
        value = Object.keys(enumDefinition).filter(v => !Number.isFinite(parseInt(v, 10)));
        cacheEnumLabels.set(enumDefinition, value);
    }
    return value;
}
exports.getEnumLabels = getEnumLabels;
const cacheEnumKeys = new Map();
/**
 * Returns all possible enum keys.
 *
 * @public
 */
function getEnumValues(enumDefinition) {
    let value = cacheEnumKeys.get(enumDefinition);
    if (!value) {
        value = Object.values(enumDefinition)
            .filter((v) => {
            return 'number' !== typeof enumDefinition[v];
        });
        cacheEnumKeys.set(enumDefinition, value);
    }
    return value;
}
exports.getEnumValues = getEnumValues;
function getEnumKeyLabelMap(enumDefinition) {
    const map = new Map();
    const keys = getEnumValues(enumDefinition);
    const labels = getEnumLabels(enumDefinition);
    for (let i = 0; i < keys.length; i++) {
        map.set(keys[i], labels[i]);
    }
    return map;
}
exports.getEnumKeyLabelMap = getEnumKeyLabelMap;
/**
 * Checks whether given enum value is valid.
 *
 * @public
 */
function isValidEnumValue(enumDefinition, value, allowLabelsAsValue = false) {
    if (allowLabelsAsValue) {
        const labels = getEnumLabels(enumDefinition);
        if (-1 !== labels.indexOf(String(value))) {
            return true;
        }
    }
    const values = getEnumValues(enumDefinition);
    return -1 !== values.indexOf(+value) || -1 !== values.indexOf(value) || -1 !== values.indexOf(String(value));
}
exports.isValidEnumValue = isValidEnumValue;
/**
 * @public
 */
function getValidEnumValue(enumDefinition, value, allowLabelsAsValue = false) {
    if (allowLabelsAsValue) {
        const labels = getEnumLabels(enumDefinition);
        if (-1 !== labels.indexOf(String(value))) {
            return enumDefinition[String(value)];
        }
    }
    const values = getEnumValues(enumDefinition);
    if (-1 !== values.indexOf(value)) {
        return value;
    }
    if (-1 !== values.indexOf(+value)) {
        return +value;
    }
    if (-1 !== values.indexOf(String(value))) {
        return String(value);
    }
}
exports.getValidEnumValue = getValidEnumValue;
//# sourceMappingURL=enum.js.map