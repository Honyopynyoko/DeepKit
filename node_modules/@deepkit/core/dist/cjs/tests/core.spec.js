"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const core_1 = require("../src/core");
class SimpleClass {
    constructor(name) {
        this.name = name;
    }
}
globals_1.test('helper getClassName', () => {
    class User {
        constructor(name) {
            this.name = name;
        }
    }
    class MyError extends Error {
    }
    globals_1.expect(core_1.getClassName(new User('peter'))).toBe('User');
    globals_1.expect(core_1.getClassName(User)).toBe('User');
    globals_1.expect(core_1.getClassName(MyError)).toBe('MyError');
    globals_1.expect(core_1.getClassName(new MyError)).toBe('MyError');
});
globals_1.test('helper isObject', () => {
    globals_1.expect(core_1.isObject([])).toBe(false);
    globals_1.expect(core_1.isObject(false)).toBe(false);
    globals_1.expect(core_1.isObject(true)).toBe(false);
    globals_1.expect(core_1.isObject(null)).toBe(false);
    globals_1.expect(core_1.isObject(undefined)).toBe(false);
    globals_1.expect(core_1.isObject(() => { })).toBe(false);
    globals_1.expect(core_1.isObject(function () { })).toBe(false);
    globals_1.expect(core_1.isObject(1)).toBe(false);
    globals_1.expect(core_1.isObject('1')).toBe(false);
    globals_1.expect(core_1.isObject({})).toBe(true);
    globals_1.expect(core_1.isObject(new Date())).toBe(true);
    globals_1.expect(core_1.isObject(new SimpleClass('asd'))).toBe(true);
});
globals_1.test('helper isPromise', async () => {
    globals_1.expect(core_1.isPromise([])).toBe(false);
    globals_1.expect(core_1.isPromise(false)).toBe(false);
    globals_1.expect(core_1.isPromise(true)).toBe(false);
    globals_1.expect(core_1.isPromise(null)).toBe(false);
    globals_1.expect(core_1.isPromise(undefined)).toBe(false);
    globals_1.expect(core_1.isPromise(() => { })).toBe(false);
    globals_1.expect(core_1.isPromise(function () { })).toBe(false);
    globals_1.expect(core_1.isPromise(1)).toBe(false);
    globals_1.expect(core_1.isPromise('1')).toBe(false);
    function foo1() {
    }
    const foo2 = () => { };
    globals_1.expect(core_1.isPromise(foo1())).toBe(false);
    globals_1.expect(core_1.isPromise(foo2())).toBe(false);
    async function foo3() {
    }
    function foo4() {
        return new Promise((resolve) => {
            resolve(1);
        });
    }
    globals_1.expect(core_1.isObject(foo3())).toBe(true);
    globals_1.expect(core_1.isObject(foo4())).toBe(true);
    globals_1.expect(core_1.isObject(await foo4())).toBe(false);
    globals_1.expect(core_1.isObject((async () => { })())).toBe(true);
});
globals_1.test('helper isFunction', () => {
    globals_1.expect(core_1.isFunction([])).toBe(false);
    globals_1.expect(core_1.isFunction(false)).toBe(false);
    globals_1.expect(core_1.isFunction(true)).toBe(false);
    globals_1.expect(core_1.isFunction(null)).toBe(false);
    globals_1.expect(core_1.isFunction(undefined)).toBe(false);
    globals_1.expect(core_1.isFunction(1)).toBe(false);
    globals_1.expect(core_1.isFunction('1')).toBe(false);
    globals_1.expect(core_1.isFunction({})).toBe(false);
    globals_1.expect(core_1.isFunction(new Date())).toBe(false);
    globals_1.expect(core_1.isFunction(new SimpleClass('asd'))).toBe(false);
    globals_1.expect(core_1.isFunction(core_1.isFunction)).toBe(true);
    globals_1.expect(core_1.isFunction(() => { })).toBe(true);
    globals_1.expect(core_1.isFunction(async () => { })).toBe(true);
    globals_1.expect(core_1.isFunction(function () { })).toBe(true);
    globals_1.expect(core_1.isFunction(async function () { })).toBe(true);
});
globals_1.test('helper isClass', () => {
    globals_1.expect(core_1.isClass([])).toBe(false);
    globals_1.expect(core_1.isClass(false)).toBe(false);
    globals_1.expect(core_1.isClass(true)).toBe(false);
    globals_1.expect(core_1.isClass(null)).toBe(false);
    globals_1.expect(core_1.isClass(undefined)).toBe(false);
    globals_1.expect(core_1.isClass(1)).toBe(false);
    globals_1.expect(core_1.isClass('1')).toBe(false);
    globals_1.expect(core_1.isClass({})).toBe(false);
    globals_1.expect(core_1.isClass(new Date())).toBe(false);
    globals_1.expect(core_1.isClass(new SimpleClass('asd'))).toBe(false);
    globals_1.expect(core_1.isClass(core_1.isFunction)).toBe(false);
    globals_1.expect(core_1.isClass(() => { })).toBe(false);
    globals_1.expect(core_1.isClass(async () => { })).toBe(false);
    globals_1.expect(core_1.isClass(function () { })).toBe(false);
    globals_1.expect(core_1.isClass(async function () { })).toBe(false);
    globals_1.expect(core_1.isClass(SimpleClass)).toBe(true);
});
globals_1.test('helper isPlainObject', () => {
    globals_1.expect(core_1.isPlainObject([])).toBe(false);
    globals_1.expect(core_1.isPlainObject(false)).toBe(false);
    globals_1.expect(core_1.isPlainObject(true)).toBe(false);
    globals_1.expect(core_1.isPlainObject(null)).toBe(false);
    globals_1.expect(core_1.isPlainObject(undefined)).toBe(false);
    globals_1.expect(core_1.isPlainObject(1)).toBe(false);
    globals_1.expect(core_1.isPlainObject('1')).toBe(false);
    globals_1.expect(core_1.isPlainObject(() => { })).toBe(false);
    globals_1.expect(core_1.isPlainObject(function () { })).toBe(false);
    globals_1.expect(core_1.isPlainObject(new Date())).toBe(false);
    globals_1.expect(core_1.isPlainObject(new SimpleClass('asd'))).toBe(false);
    class O extends Object {
    }
    globals_1.expect(core_1.isPlainObject(new O)).toBe(false);
    globals_1.expect(core_1.isPlainObject({})).toBe(true);
    globals_1.expect(core_1.isPlainObject(new Object)).toBe(true);
});
globals_1.test('helper is array', () => {
    globals_1.expect(core_1.isArray({})).toBe(false);
    globals_1.expect(core_1.isArray(new Date())).toBe(false);
    globals_1.expect(core_1.isArray(new SimpleClass('asd'))).toBe(false);
    globals_1.expect(core_1.isArray(false)).toBe(false);
    globals_1.expect(core_1.isArray(true)).toBe(false);
    globals_1.expect(core_1.isArray(null)).toBe(false);
    globals_1.expect(core_1.isArray(undefined)).toBe(false);
    globals_1.expect(core_1.isArray(1)).toBe(false);
    globals_1.expect(core_1.isArray('1')).toBe(false);
    globals_1.expect(core_1.isArray([])).toBe(true);
});
globals_1.test('helper is isUndefined', () => {
    globals_1.expect(core_1.isUndefined({})).toBe(false);
    globals_1.expect(core_1.isUndefined(new Date())).toBe(false);
    globals_1.expect(core_1.isUndefined(new SimpleClass('asd'))).toBe(false);
    globals_1.expect(core_1.isUndefined(false)).toBe(false);
    globals_1.expect(core_1.isUndefined(true)).toBe(false);
    globals_1.expect(core_1.isUndefined(null)).toBe(false);
    globals_1.expect(core_1.isUndefined(1)).toBe(false);
    globals_1.expect(core_1.isUndefined('1')).toBe(false);
    globals_1.expect(core_1.isUndefined([])).toBe(false);
    globals_1.expect(core_1.isUndefined(undefined)).toBe(true);
});
globals_1.test('test getPathValue', () => {
    globals_1.expect(core_1.getPathValue({
        bla: 3
    }, 'bla')).toBe(3);
    globals_1.expect(core_1.getPathValue({
        bla: 3
    }, 'bla2', null)).toBe(null);
    globals_1.expect(core_1.getPathValue({}, 'bla', 'another')).toBe('another');
});
globals_1.test('test getPathValue deep', () => {
    globals_1.expect(core_1.getPathValue({
        bla: {
            mowla: 5
        }
    }, 'bla.mowla')).toBe(5);
    globals_1.expect(core_1.getPathValue({
        'bla.mowla': 5
    }, 'bla.mowla')).toBe(5);
    globals_1.expect(core_1.getPathValue({
        bla: {
            mowla: {
                evenDeeper: true
            }
        }
    }, 'bla.mowla.evenDeeper')).toBe(true);
    globals_1.expect(core_1.getPathValue({
        bla: {
            mowla: {
                evenDeeper: true
            }
        }
    }, 'bla.mowla')['evenDeeper']).toBe(true);
});
globals_1.test('test setPathValue ', () => {
    {
        const obj = {};
        core_1.setPathValue(obj, 'bla2', 5);
        globals_1.expect(obj['bla2']).toBe(5);
    }
    {
        const obj = {};
        core_1.setPathValue(obj, 'bla.mowla', 6);
        globals_1.expect(obj['bla']['mowla']).toBe(6);
    }
});
globals_1.test('asyncOperation', async () => {
    class MyError extends Error {
    }
    let fetched = false;
    try {
        async function doIt() {
            await core_1.asyncOperation(async (resolve) => {
                await core_1.sleep(0.2);
                throw new MyError('MyError1');
            });
        }
        await doIt();
    }
    catch (error) {
        fetched = true;
        globals_1.expect(error).toBeInstanceOf(MyError);
        globals_1.expect(error.stack).toContain('MyError1');
        globals_1.expect(error.stack).toContain('doIt');
    }
    globals_1.expect(fetched).toBe(true);
});
globals_1.test('asyncOperation deep', async () => {
    let fetched = false;
    try {
        async function doIt1() {
            await core_1.asyncOperation(async (resolve) => {
                await core_1.sleep(0.2);
                async function doIt2() {
                    await core_1.asyncOperation(async (resolve) => {
                        await core_1.sleep(0.2);
                        throw new Error('MyError2');
                    });
                }
                ;
                await doIt2();
            });
        }
        await doIt1();
    }
    catch (error) {
        fetched = true;
        globals_1.expect(error.stack).toContain('MyError2');
        globals_1.expect(error.stack).toContain('doIt1');
        globals_1.expect(error.stack).toContain('doIt2');
    }
    globals_1.expect(fetched).toBe(true);
});
globals_1.test('getObjectKeysSize', async () => {
    globals_1.expect(core_1.getObjectKeysSize({})).toBe(0);
    globals_1.expect(core_1.getObjectKeysSize({ a: true })).toBe(1);
    globals_1.expect(core_1.getObjectKeysSize({ a: 1, b: 1, c: 3, d: 4, e: {} })).toBe(5);
});
globals_1.test('isPrototypeOfBase', () => {
    class Base {
    }
    class Child1 extends Base {
    }
    class Child2 extends Base {
    }
    class Child1_1 extends Child1 {
    }
    class Child1_1_1 extends Child1_1 {
    }
    globals_1.expect(core_1.isPrototypeOfBase(Base, Base)).toBe(true);
    globals_1.expect(core_1.isPrototypeOfBase(Child1, Base)).toBe(true);
    globals_1.expect(core_1.isPrototypeOfBase(Child2, Base)).toBe(true);
    globals_1.expect(core_1.isPrototypeOfBase(Child1_1, Base)).toBe(true);
    globals_1.expect(core_1.isPrototypeOfBase(Child1_1, Child1)).toBe(true);
    globals_1.expect(core_1.isPrototypeOfBase(Child1_1_1, Base)).toBe(true);
    globals_1.expect(core_1.isPrototypeOfBase(Child1_1_1, Child1_1)).toBe(true);
});
globals_1.test('isConstructable', () => {
    globals_1.expect(core_1.isConstructable(class {
    })).toBe(true);
    globals_1.expect(core_1.isConstructable(class {
    }.bind(undefined))).toBe(true);
    globals_1.expect(core_1.isConstructable(function () { })).toBe(true);
    globals_1.expect(core_1.isConstructable(function () { }.bind(undefined))).toBe(true);
    globals_1.expect(core_1.isConstructable(() => { })).toBe(false);
    globals_1.expect(core_1.isConstructable((() => { }).bind(undefined))).toBe(false);
    globals_1.expect(core_1.isConstructable(async () => { })).toBe(false);
    globals_1.expect(core_1.isConstructable(async function () { })).toBe(false);
    globals_1.expect(core_1.isConstructable(function* () { })).toBe(false);
    globals_1.expect(core_1.isConstructable({ foo() { } }.foo)).toBe(false);
    globals_1.expect(core_1.isConstructable(URL)).toBe(true);
});
globals_1.test('collectForMicrotask', async () => {
    let got = [];
    const collected = (strings) => {
        got.length = 0;
        got.push(...strings);
    };
    const fn = core_1.collectForMicrotask(collected);
    fn('a');
    fn('b');
    fn('c');
    await core_1.sleep(0.1);
    globals_1.expect(got).toEqual(['a', 'b', 'c']);
    fn('d');
    await core_1.sleep(0.1);
    globals_1.expect(got).toEqual(['d']);
});
globals_1.test('stringifyValueWithType', async () => {
    class Peter {
        constructor() {
            this.id = 1;
        }
    }
    globals_1.expect(core_1.stringifyValueWithType(new Peter)).toBe(`Peter {id: Number(1)}`);
    globals_1.expect(core_1.stringifyValueWithType({ id: 1 })).toBe(`Object {id: Number(1)}`);
    globals_1.expect(core_1.stringifyValueWithType('foo')).toBe(`String(foo)`);
    globals_1.expect(core_1.stringifyValueWithType(2)).toBe(`Number(2)`);
    globals_1.expect(core_1.stringifyValueWithType(true)).toBe(`Boolean(true)`);
    globals_1.expect(core_1.stringifyValueWithType(function Peter() { })).toBe(`Function Peter`);
});
globals_1.test('getClassTypeFromInstance', async () => {
    class Peter {
    }
    globals_1.expect(core_1.getClassTypeFromInstance(new Peter)).toBe(Peter);
    globals_1.expect(() => core_1.getClassTypeFromInstance({})).toThrow('Value is not a class instance');
    globals_1.expect(() => core_1.getClassTypeFromInstance('asd')).toThrow('Value is not a class instance');
    globals_1.expect(() => core_1.getClassTypeFromInstance(23)).toThrow('Value is not a class instance');
    globals_1.expect(() => core_1.getClassTypeFromInstance(undefined)).toThrow('Value is not a class instance');
});
globals_1.test('isClassInstance', async () => {
    class Peter {
    }
    globals_1.expect(core_1.isClassInstance(new Peter)).toBe(true);
    globals_1.expect(core_1.isClassInstance({})).toBe(false);
    globals_1.expect(core_1.isClassInstance('asd')).toBe(false);
    globals_1.expect(core_1.isClassInstance(undefined)).toBe(false);
    globals_1.expect(core_1.isClassInstance(null)).toBe(false);
    globals_1.expect(core_1.isClassInstance(3223)).toBe(false);
});
globals_1.test('isClassInstance', async () => {
    class Model1 {
        constructor() {
            this.id = 0;
        }
    }
    class Base {
    }
    class Model2 extends Base {
        constructor() {
            super(...arguments);
            this.id = 0;
        }
        model2() {
            return true;
        }
    }
    const model1 = new Model1;
    model1.id = 22;
    core_1.changeClass(model1, Model2);
    globals_1.expect(model1 instanceof Model1).toBe(true);
    globals_1.expect(core_1.changeClass(model1, Model2) instanceof Model2).toBe(true);
    globals_1.expect(core_1.changeClass(model1, Model2) instanceof Base).toBe(true);
    globals_1.expect(core_1.changeClass(model1, Model2) instanceof Model1).toBe(false);
    globals_1.expect(core_1.changeClass(model1, Model2).model2()).toBe(true);
});
//# sourceMappingURL=core.spec.js.map