"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const iterators_1 = require("../src/iterators");
globals_1.test('test array', () => {
    const array = ['a', 'b', 'c'];
    for (const v of iterators_1.each(array)) {
        globals_1.expect(typeof v).toBe('string');
    }
    for (let i in array) {
        globals_1.expect(typeof i).toBe('string');
    }
    for (const i of iterators_1.eachKey(array)) {
        globals_1.expect(typeof i).toBe('number');
    }
    for (const [k, v] of iterators_1.eachPair(array)) {
        globals_1.expect(typeof k).toBe('number');
        globals_1.expect(typeof v).toBe('string');
    }
    for (const [k, v] of iterators_1.eachPair(['y'])) {
        globals_1.expect(k).toBe(0);
        globals_1.expect(v).toBe('y');
    }
});
globals_1.test('test object1', () => {
    const object = { 'a': 1, 'b': 2, 'c': 3 };
    for (const v of iterators_1.each(object)) {
        globals_1.expect(typeof v).toBe('number');
    }
    for (const i of iterators_1.eachKey(object)) {
        globals_1.expect(typeof i).toBe('string');
    }
});
globals_1.test('test object2', () => {
    class Mowla {
        constructor(z) {
            this.z = z;
        }
    }
    const object2 = { 'a': new Mowla('hallo'), 'b': new Mowla('hallo'), 'c': new Mowla('hallo') };
    for (const v of iterators_1.eachKey(object2)) {
        globals_1.expect(typeof v).toBe('string');
    }
    for (const v of iterators_1.each(object2)) {
        globals_1.expect(v).toBeInstanceOf(Mowla);
    }
    for (const [i, v] of iterators_1.eachPair(object2)) {
        globals_1.expect(typeof i).toBe('string');
        globals_1.expect(v).toBeInstanceOf(Mowla);
    }
});
globals_1.test('test object3', () => {
    const object3 = {
        'asd': true,
        'bla': false
    };
    for (const v of iterators_1.eachKey(object3)) {
        globals_1.expect(typeof v).toBe('string');
    }
    for (const v of iterators_1.each(object3)) {
        globals_1.expect(typeof v).toBe('boolean');
    }
    for (const [k, v] of iterators_1.eachPair(object3)) {
        globals_1.expect(typeof k).toBe('string');
        globals_1.expect(typeof v).toBe('boolean');
    }
});
//# sourceMappingURL=iterator.spec.js.map