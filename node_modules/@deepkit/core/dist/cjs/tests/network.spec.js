"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const network_1 = require("../src/network");
globals_1.test('parseHost', () => {
    {
        const parsed = network_1.parseHost('aosdad');
        globals_1.expect(parsed.isUnixSocket).toBe(false);
        globals_1.expect(parsed.isHostname).toBe(true);
        globals_1.expect(parsed.host).toBe('aosdad');
        globals_1.expect(parsed.hostWithIp).toBe('aosdad');
    }
    {
        const parsed = network_1.parseHost('aosdad:80');
        globals_1.expect(parsed.isUnixSocket).toBe(false);
        globals_1.expect(parsed.isHostname).toBe(true);
        globals_1.expect(parsed.host).toBe('aosdad');
        globals_1.expect(parsed.port).toBe(80);
        globals_1.expect(parsed.hostWithIp).toBe('aosdad:80');
        globals_1.expect(parsed.getWebSocketUrl(false)).toBe('ws://aosdad:80');
        globals_1.expect(parsed.getWebSocketUrl(true)).toBe('wss://aosdad:80');
        globals_1.expect(parsed.getHttpUrl(false)).toBe('http://aosdad:80');
        globals_1.expect(parsed.getHttpUrl(true)).toBe('https://aosdad:80');
    }
    {
        const parsed = network_1.parseHost(':80');
        globals_1.expect(parsed.isUnixSocket).toBe(false);
        globals_1.expect(parsed.isHostname).toBe(true);
        globals_1.expect(parsed.host).toBe('127.0.0.1');
        globals_1.expect(parsed.port).toBe(80);
        globals_1.expect(parsed.hostWithIp).toBe('127.0.0.1:80');
    }
    {
        const parsed = network_1.parseHost(':');
        globals_1.expect(parsed.isUnixSocket).toBe(false);
        globals_1.expect(parsed.isHostname).toBe(true);
        globals_1.expect(parsed.host).toBe('127.0.0.1');
        globals_1.expect(parsed.port).toBe(0);
        globals_1.expect(parsed.hostWithIp).toBe('127.0.0.1');
    }
    {
        const parsed = network_1.parseHost('');
        globals_1.expect(parsed.isUnixSocket).toBe(false);
        globals_1.expect(parsed.isHostname).toBe(true);
        globals_1.expect(parsed.host).toBe('127.0.0.1');
        globals_1.expect(parsed.port).toBe(0);
        globals_1.expect(parsed.hostWithIp).toBe('127.0.0.1');
    }
    {
        const parsed = network_1.parseHost('localhost:');
        globals_1.expect(parsed.isUnixSocket).toBe(false);
        globals_1.expect(parsed.isHostname).toBe(true);
        globals_1.expect(parsed.host).toBe('localhost');
        globals_1.expect(parsed.port).toBe(0);
        globals_1.expect(parsed.hostWithIp).toBe('localhost');
    }
    {
        const parsed = network_1.parseHost('./unix-path');
        globals_1.expect(parsed.isUnixSocket).toBe(true);
        globals_1.expect(parsed.isHostname).toBe(false);
        globals_1.expect(parsed.unixSocket).toBe('./unix-path');
    }
    {
        const parsed = network_1.parseHost('unix-path.sock');
        globals_1.expect(parsed.isUnixSocket).toBe(true);
        globals_1.expect(parsed.isHostname).toBe(false);
        globals_1.expect(parsed.unixSocket).toBe('unix-path.sock');
        globals_1.expect(parsed.getWebSocketUrl(false)).toBe('ws+unix://unix-path.sock');
        globals_1.expect(parsed.getWebSocketUrl(true)).toBe('wss+unix://unix-path.sock');
        globals_1.expect(parsed.getHttpUrl(false)).toBe('file://unix-path.sock');
        globals_1.expect(parsed.getHttpUrl(true)).toBe('file://unix-path.sock');
    }
    {
        const parsed = network_1.parseHost('\\windoze\\unix-path.sock');
        globals_1.expect(parsed.isUnixSocket).toBe(true);
        globals_1.expect(parsed.isHostname).toBe(false);
        globals_1.expect(parsed.unixSocket).toBe('\\windoze\\unix-path.sock');
    }
});
//# sourceMappingURL=network.spec.js.map