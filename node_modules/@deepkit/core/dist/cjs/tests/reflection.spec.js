"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const reflection_1 = require("../src/reflection");
globals_1.test('removeStrings', () => {
    globals_1.expect(reflection_1.removeStrings(`'test'`)).toBe(``);
    globals_1.expect(reflection_1.removeStrings(`'te\\'st'`)).toBe(``);
    globals_1.expect(reflection_1.removeStrings(`"te\\'st"`)).toBe(``);
    globals_1.expect(reflection_1.removeStrings(`"te\\"st"`)).toBe(``);
    globals_1.expect(reflection_1.removeStrings(`function(peter = 'asd') {}`)).toBe(`function(peter = ) {}`);
    globals_1.expect(reflection_1.removeStrings(`function(peter = '') {}`)).toBe(`function(peter = ) {}`);
    globals_1.expect(reflection_1.removeStrings(`function(peter = '') {}`)).toBe(`function(peter = ) {}`);
    globals_1.expect(reflection_1.removeStrings(`function(peter = '"') {}`)).toBe(`function(peter = ) {}`);
    globals_1.expect(reflection_1.removeStrings(`function(peter = '\\"') {}`)).toBe(`function(peter = ) {}`);
    globals_1.expect(reflection_1.removeStrings(`function(peter = 'Ca\\'nt do that') {}`)).toBe(`function(peter = ) {}`);
});
globals_1.test('simple', () => {
    function uuid() {
        return 'asd';
    }
    class User {
        constructor(nothing = '{') {
            this.id = uuid();
            this.bla = 'constructor()';
        }
        doSomething() {
            this.username = 'asd';
        }
    }
    User.test = uuid();
    const code = reflection_1.extractMethodBody(User.toString(), 'constructor');
    globals_1.expect(code.trim()).toBe('this.id=uuid();this.bla=;');
});
globals_1.test('class signature', function () {
    class Clazz {
        constructor(foo, bar) {
            this.foo = foo;
            this.bar = bar;
        }
    }
    globals_1.expect(reflection_1.extractParameters(Clazz)).toEqual(['foo', 'bar']);
});
globals_1.test('class es5', function () {
    var Clazz = /** @class */ (function () {
        function Clazz(foo, bar) {
            this.foo = foo;
            this.bar = bar;
        }
        return Clazz;
    }());
    globals_1.expect(reflection_1.extractParameters(Clazz)).toEqual(['foo', 'bar']);
});
globals_1.test('function signature', function () {
    function myFunc(foo, bar) { }
    globals_1.expect(reflection_1.extractParameters(myFunc)).toEqual(['foo', 'bar']);
});
globals_1.test('class mixing', function () {
    function mixin(...a) {
        return class {
        };
    }
    class Clazz2 {
    }
    class Clazz extends mixin(Clazz2) {
        constructor(foo, bar) {
            super();
            this.foo = foo;
            this.bar = bar;
        }
    }
    globals_1.expect(reflection_1.extractParameters(Clazz)).toEqual(['foo', 'bar']);
});
globals_1.test('test1', function () {
    function test1(a, b, c) {
        return true;
    }
    globals_1.expect(reflection_1.extractParameters(test1)).toEqual(['a', 'b', 'c']);
});
globals_1.test('test2', function () {
    function test2(a, b, c) {
        return true;
    }
    globals_1.expect(reflection_1.extractParameters(test2)).toEqual(['a', 'b', 'c']);
});
globals_1.test('test3', function () {
    function test3(a, /* (jewiofewjf,wo, ewoi, werp)*/ b, c) {
        return true;
    }
    globals_1.expect(reflection_1.extractParameters(test3)).toEqual(['a', 'b', 'c']);
});
globals_1.test('test4', function () {
    function test4(a /* a*/, /* b */ b, /*c*/ c, d /*d*/) {
        return function (one, two, three) {
        };
    }
    globals_1.expect(reflection_1.extractParameters(test4)).toEqual(['a', 'b', 'c', 'd']);
});
globals_1.test('test5', function () {
    function test5(a, b, c) {
        return false;
    }
    globals_1.expect(reflection_1.extractParameters(test5)).toEqual(['a', 'b', 'c']);
});
globals_1.test('test6', function () {
    function test6(a) { return function f6(a, b) { }; }
    globals_1.expect(reflection_1.extractParameters(test6)).toEqual(['a']);
});
globals_1.test('test7', function () {
    function test7(
    /*
     function test5(
       a,
       b,
       c
     ) {
       return false;
     }
     function test5(
       a,
       b,
       c
     ) {
       return false;
     }
     function test5(
       a,
       b,
       c
     ) {
       return false;
     }
     */
    a, b, c) { return true; }
    globals_1.expect(reflection_1.extractParameters(test7)).toEqual(['a', 'b', 'c']);
});
globals_1.test('test8', function () {
    function test8(a, b, c) { }
    globals_1.expect(reflection_1.extractParameters(test8)).toEqual(['a', 'b', 'c']);
});
globals_1.test('test9', function () {
    var a, b, c;
    function π9(ƒ, µ) { (a + 2 + b + 2 + c); }
    globals_1.expect(reflection_1.extractParameters(π9)).toEqual(['ƒ', 'µ']);
});
globals_1.test('supports ES2015 fat arrow functions with parens', function () {
    var f = '(a,b) => a + b';
    globals_1.expect(reflection_1.extractParameters(f)).toEqual(['a', 'b']);
});
globals_1.test('supports ES2015 fat arrow functions without parens', function () {
    var f = 'a => a + 2';
    globals_1.expect(reflection_1.extractParameters(f)).toEqual(['a']);
});
globals_1.test('ignores ES2015 default params', function () {
    // default params supported in node.js ES6
    var f11 = '(a, b = 20) => a + b';
    globals_1.expect(reflection_1.extractParameters(f11)).toEqual(['a', 'b']);
});
globals_1.test('supports function created using the Function constructor', function () {
    var f = new Function('a', 'b', 'return a + b');
    globals_1.expect(reflection_1.extractParameters(f)).toEqual(['a', 'b']);
});
//# sourceMappingURL=reflection.spec.js.map