"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugControllerInterface = exports.Event = exports.RpcAction = exports.RpcActionParameter = exports.Route = exports.RouteParameter = exports.Config = exports.Database = exports.DatabaseEntity = exports.Workflow = exports.ConfigOption = void 0;
const type_1 = require("@deepkit/type");
const rpc_1 = require("@deepkit/rpc");
const model_1 = require("./model");
class ConfigOption {
}
__decorate([
    type_1.t,
    __metadata("design:type", String)
], ConfigOption.prototype, "name", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], ConfigOption.prototype, "type", void 0);
__decorate([
    type_1.t.any,
    __metadata("design:type", Object)
], ConfigOption.prototype, "defaultValue", void 0);
__decorate([
    type_1.t.any,
    __metadata("design:type", Object)
], ConfigOption.prototype, "value", void 0);
__decorate([
    type_1.t.optional,
    __metadata("design:type", String)
], ConfigOption.prototype, "description", void 0);
exports.ConfigOption = ConfigOption;
let Workflow = class Workflow {
};
__decorate([
    type_1.t.array(type_1.t.string),
    __metadata("design:type", Array)
], Workflow.prototype, "places", void 0);
__decorate([
    type_1.t.array(type_1.t.schema({ from: type_1.t.string, to: type_1.t.string, label: type_1.t.string.optional })),
    __metadata("design:type", Array)
], Workflow.prototype, "transitions", void 0);
Workflow = __decorate([
    type_1.entity.name('debug/workflow')
], Workflow);
exports.Workflow = Workflow;
let DatabaseEntity = class DatabaseEntity {
};
__decorate([
    type_1.t.optional,
    __metadata("design:type", String)
], DatabaseEntity.prototype, "name", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], DatabaseEntity.prototype, "className", void 0);
DatabaseEntity = __decorate([
    type_1.entity.name('debug/database/entity')
], DatabaseEntity);
exports.DatabaseEntity = DatabaseEntity;
let Database = class Database {
    constructor() {
        this.entities = [];
    }
};
__decorate([
    type_1.t,
    __metadata("design:type", String)
], Database.prototype, "name", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], Database.prototype, "adapter", void 0);
__decorate([
    type_1.t.array(DatabaseEntity),
    __metadata("design:type", Array)
], Database.prototype, "entities", void 0);
Database = __decorate([
    type_1.entity.name('debug/database')
], Database);
exports.Database = Database;
let Config = class Config {
};
__decorate([
    type_1.t.array(ConfigOption),
    __metadata("design:type", Array)
], Config.prototype, "appConfig", void 0);
__decorate([
    type_1.t.array(ConfigOption),
    __metadata("design:type", Array)
], Config.prototype, "modulesConfig", void 0);
Config = __decorate([
    type_1.entity.name('debug/config')
], Config);
exports.Config = Config;
class RouteParameter {
}
__decorate([
    type_1.t,
    __metadata("design:type", String)
], RouteParameter.prototype, "name", void 0);
__decorate([
    type_1.t.string,
    __metadata("design:type", String)
], RouteParameter.prototype, "type", void 0);
__decorate([
    type_1.t.any,
    __metadata("design:type", Object)
], RouteParameter.prototype, "schema", void 0);
exports.RouteParameter = RouteParameter;
let Route = class Route {
    constructor(path, httpMethod, controller, description, parameters, groups, category, bodySchema) {
        this.path = path;
        this.httpMethod = httpMethod;
        this.controller = controller;
        this.description = description;
        this.parameters = parameters;
        this.groups = groups;
        this.category = category;
        this.bodySchema = bodySchema;
        if (bodySchema) {
            if (bodySchema.classType) {
                //we don't and can't instantiate the full PropertySchema, since the
                //type is not available at runtime.
                bodySchema.classTypeName = bodySchema.classType;
                bodySchema.classType = undefined;
            }
            this.bodyPropertySchema = type_1.PropertySchema.fromJSON(bodySchema);
        }
    }
};
Route = __decorate([
    type_1.entity.name('debug/route'),
    __param(0, type_1.t.name('path')),
    __param(1, type_1.t.name('httpMethod')),
    __param(2, type_1.t.name('controller')),
    __param(3, type_1.t.name('description')),
    __param(4, type_1.t.array(RouteParameter).name('parameters')),
    __param(5, type_1.t.array(type_1.t.string).name('groups')),
    __param(6, type_1.t.string.name('category')),
    __param(7, type_1.t.any.name('bodySchema')),
    __metadata("design:paramtypes", [String, String, String, String, Array, Array, String, Object])
], Route);
exports.Route = Route;
let RpcActionParameter = class RpcActionParameter {
    constructor(name, schema) {
        this.name = name;
        this.schema = schema;
        this.propertySchema = type_1.PropertySchema.fromJSON(schema);
    }
};
RpcActionParameter = __decorate([
    type_1.entity.name('rpc/action/parameter'),
    __param(0, type_1.t.name('name')),
    __param(1, type_1.t.any.name('schema')),
    __metadata("design:paramtypes", [String, Object])
], RpcActionParameter);
exports.RpcActionParameter = RpcActionParameter;
let RpcAction = class RpcAction {
};
__decorate([
    type_1.t,
    __metadata("design:type", String)
], RpcAction.prototype, "path", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], RpcAction.prototype, "controller", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], RpcAction.prototype, "methodName", void 0);
__decorate([
    type_1.t.array(RpcActionParameter),
    __metadata("design:type", Array)
], RpcAction.prototype, "parameters", void 0);
RpcAction = __decorate([
    type_1.entity.name('rpc/action')
], RpcAction);
exports.RpcAction = RpcAction;
let Event = class Event {
};
__decorate([
    type_1.t,
    __metadata("design:type", String)
], Event.prototype, "event", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], Event.prototype, "controller", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", String)
], Event.prototype, "methodName", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], Event.prototype, "priority", void 0);
Event = __decorate([
    type_1.entity.name('rpc/event')
], Event);
exports.Event = Event;
exports.DebugControllerInterface = rpc_1.ControllerSymbol('deepkit/debug/controller', [Config, Database, Route, RpcAction, Workflow, Event, model_1.DebugRequest]);
//# sourceMappingURL=api.js.map