"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugRequest = void 0;
const type_1 = require("@deepkit/type");
let DebugRequest = class DebugRequest {
    constructor(method, url, clientIp) {
        this.method = method;
        this.url = url;
        this.clientIp = clientIp;
        this.id = 0;
        this.version = 0;
        this.created = new Date;
        this.logs = 0;
        /*
            db time:
                - total
                - query time
            message bus:
                - total time
                - total bytes
                - total latencies
                - messages
                    - time
                    - bytes
                    - latency
            response/request:
                - header
                - body
            events:
                - name
                - time
            template:
                - name
                - time
            logs:
         */
        this.times = {};
    }
};
__decorate([
    type_1.t.primary.autoIncrement,
    __metadata("design:type", Number)
], DebugRequest.prototype, "id", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], DebugRequest.prototype, "version", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Date)
], DebugRequest.prototype, "created", void 0);
__decorate([
    type_1.t.optional,
    __metadata("design:type", Number)
], DebugRequest.prototype, "statusCode", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], DebugRequest.prototype, "logs", void 0);
__decorate([
    type_1.t.map(type_1.t.number),
    __metadata("design:type", Object)
], DebugRequest.prototype, "times", void 0);
DebugRequest = __decorate([
    type_1.entity.name('deepkit/debugger/request'),
    __param(0, type_1.t.name('method')),
    __param(1, type_1.t.name('url')),
    __param(2, type_1.t.name('clientIp')),
    __metadata("design:paramtypes", [String, String, String])
], DebugRequest);
exports.DebugRequest = DebugRequest;
//# sourceMappingURL=model.js.map