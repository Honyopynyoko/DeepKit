import { PropertySchema, PropertySchemaSerialized } from '@deepkit/type';
export declare class ConfigOption {
    name: string;
    type: string;
    defaultValue: any;
    value: any;
    description?: string;
}
export declare class Workflow {
    places: string[];
    transitions: {
        from: string;
        to: string;
        label?: string;
    }[];
}
export declare class DatabaseEntity {
    name?: string;
    className: string;
}
export declare class Database {
    name: string;
    adapter: string;
    entities: DatabaseEntity[];
}
export declare class Config {
    appConfig: ConfigOption[];
    modulesConfig: ConfigOption[];
}
export declare class RouteParameter {
    name: string;
    type: 'body' | 'query' | 'url';
    schema: any;
}
export declare class Route {
    path: string;
    httpMethod: string;
    controller: string;
    description: string;
    parameters: RouteParameter[];
    groups: string[];
    category: string;
    bodySchema?: PropertySchemaSerialized | undefined;
    bodyPropertySchema?: PropertySchema;
    constructor(path: string, httpMethod: string, controller: string, description: string, parameters: RouteParameter[], groups: string[], category: string, bodySchema?: PropertySchemaSerialized | undefined);
}
export declare class RpcActionParameter {
    name: string;
    schema: any;
    propertySchema: PropertySchema;
    constructor(name: string, schema: any);
}
export declare class RpcAction {
    path: string;
    controller: string;
    methodName: string;
    parameters: RpcActionParameter[];
}
export declare class Event {
    event: string;
    controller: string;
    methodName: string;
    priority: number;
}
export declare const DebugControllerInterface: import("@deepkit/rpc").ControllerDefinition<DebugControllerInterface>;
export interface DebugControllerInterface {
    configuration(): Config;
    databases(): Database[];
    routes(): Route[];
    actions(): RpcAction[];
    getWorkflow(name: string): Workflow;
    getProfilerFrames(): Uint8Array;
    events(): Event[];
}
