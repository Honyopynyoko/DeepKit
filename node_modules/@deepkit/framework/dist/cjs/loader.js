"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformSource = exports.getFormat = exports.resolve = void 0;
// @ts-ignore
const tsNode = __importStar(require("ts-node/esm"));
const template_1 = require("@deepkit/template");
const core_1 = require("@deepkit/core");
const watch_1 = require("./src/watch");
async function resolve(specifier, context, defaultResolve) {
    const res = await tsNode.resolve(specifier, context, defaultResolve);
    if (res.url) {
        watch_1.importedFiles.add(res.url.replace('file://', ''));
    }
    return res;
}
exports.resolve = resolve;
function getFormat(url, context, defaultGetFormat) {
    return tsNode.getFormat(url, context, defaultGetFormat);
}
exports.getFormat = getFormat;
async function transformSource(source, context, defaultTransformSource) {
    const code = await tsNode.transformSource(source, context, defaultTransformSource);
    if (core_1.inDebugMode())
        return code; //we don't optimize code in debug-mode, since we break sourcemaps with it.
    if (context.url.endsWith('.tsx')) {
        if (code.source.indexOf('@deepkit/framework/jsx-runtime') === -1)
            return code;
        if (code.source.startsWith('#!')) {
            //allow shebang
            code.source = code.source.substr(code.source.indexOf('\n'));
        }
        const optimized = template_1.optimizeJSX(code.source);
        code.source = optimized;
    }
    return code;
}
exports.transformSource = transformSource;
//# sourceMappingURL=loader.js.map