import { RpcClient } from '@deepkit/rpc';
import { HttpControllers } from '@deepkit/http';
import { BaseEvent, EventDispatcher, EventToken } from '@deepkit/event';
import { InjectorContext } from '@deepkit/injector';
import { Logger } from '@deepkit/logger';
import { RpcControllers } from './application-service-container';
import { WebWorker, WebWorkerFactory } from './worker';
export declare class ServerBootstrapEvent extends BaseEvent {
}
/**
 * Called only once for application server bootstrap (in the cluster main process)
 * as soon as the application server starts.
 */
export declare const onServerMainBootstrap: EventToken<ServerBootstrapEvent>;
/**
 * Called only once for application server bootstrap (in the cluster main process)
 * as soon as the application server has started.
 */
export declare const onServerMainBootstrapDone: EventToken<ServerBootstrapEvent>;
/**
 * Called for each worker as soon as the worker bootstraps.
 */
export declare const onServerWorkerBootstrap: EventToken<ServerBootstrapEvent>;
export declare class ServerShutdownEvent extends BaseEvent {
}
/**
 * Called when application server shuts down in the main process.
 */
export declare const onServerMainShutdown: EventToken<ServerBootstrapEvent>;
declare const ApplicationServerConfig_base: import("@deepkit/core").ClassType<Pick<import("@deepkit/type").ExtractClassDefinition<{
    host: import("@deepkit/type").FieldDecoratorResult<string>;
    port: import("@deepkit/type").FieldDecoratorResult<number>;
    httpsPort: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    selfSigned: import("@deepkit/type").FieldDecoratorResult<boolean | undefined>;
    keepAliveTimeout: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    path: import("@deepkit/type").FieldDecoratorResult<string>;
    workers: import("@deepkit/type").FieldDecoratorResult<number>;
    ssl: import("@deepkit/type").FieldDecoratorResult<boolean>;
    sslOptions: import("@deepkit/type").FieldDecoratorResult<any>;
    sslKey: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCertificate: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCa: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCrl: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    server: import("@deepkit/type").FieldDecoratorResult<any>;
    maxPayload: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    publicDir: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    debug: import("@deepkit/type").FieldDecoratorResult<boolean>;
    debugUrl: import("@deepkit/type").FieldDecoratorResult<string>;
    varPath: import("@deepkit/type").FieldDecoratorResult<string>;
    debugStorePath: import("@deepkit/type").FieldDecoratorResult<string>;
    httpLog: import("@deepkit/type").FieldDecoratorResult<boolean>;
    session: import("@deepkit/type").FieldDecoratorResult<any>;
    databases: import("@deepkit/type").FieldDecoratorResult<any[] | undefined>;
    migrateOnStartup: import("@deepkit/type").FieldDecoratorResult<boolean>;
    migrationDir: import("@deepkit/type").FieldDecoratorResult<string>;
}>, "server" | "port" | "host" | "httpsPort" | "ssl" | "sslKey" | "sslCertificate" | "sslCa" | "sslCrl" | "varPath" | "selfSigned" | "keepAliveTimeout" | "workers">>;
declare class ApplicationServerConfig extends ApplicationServerConfig_base {
}
export declare class ApplicationServerListener {
    protected logger: Logger;
    protected rpcControllers: RpcControllers;
    protected httpControllers: HttpControllers;
    protected config: ApplicationServerConfig;
    constructor(logger: Logger, rpcControllers: RpcControllers, httpControllers: HttpControllers, config: ApplicationServerConfig);
    onBootstrapDone(): void;
}
export declare class ApplicationServer {
    protected logger: Logger;
    protected webWorkerFactory: WebWorkerFactory;
    protected eventDispatcher: EventDispatcher;
    protected rootScopedContext: InjectorContext;
    config: ApplicationServerConfig;
    protected worker?: WebWorker;
    protected started: boolean;
    constructor(logger: Logger, webWorkerFactory: WebWorkerFactory, eventDispatcher: EventDispatcher, rootScopedContext: InjectorContext, config: ApplicationServerConfig);
    close(): Promise<void>;
    shutdown(): Promise<void>;
    protected bootstrap(): Promise<void>;
    protected bootstrapDone(): Promise<void>;
    start(): Promise<void>;
    getWorker(): WebWorker;
    createClient(): RpcClient;
}
export declare class InMemoryApplicationServer extends ApplicationServer {
}
export {};
