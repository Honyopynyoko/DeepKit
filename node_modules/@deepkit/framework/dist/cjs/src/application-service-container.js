"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationServiceContainer = exports.RpcControllers = void 0;
const app_1 = require("@deepkit/app");
const injector_1 = require("@deepkit/injector");
const rpc_1 = require("@deepkit/rpc");
const http_1 = require("@deepkit/http");
class RpcControllers {
    constructor() {
        this.controllers = new Map();
    }
    resolveController(name) {
        const classType = this.controllers.get(name);
        if (!classType)
            throw new Error(`Controller not found for ${name}`);
        return classType;
    }
}
exports.RpcControllers = RpcControllers;
class ApplicationServiceContainer extends app_1.ServiceContainer {
    constructor() {
        super(...arguments);
        this.rpcControllers = new RpcControllers;
        this.httpControllers = new http_1.HttpControllers([]);
    }
    process() {
        if (this.rootContext)
            return;
        this.providers.push({ provide: http_1.HttpControllers, useValue: this.httpControllers });
        this.providers.push({ provide: RpcControllers, useValue: this.rpcControllers });
        this.providers.push({ provide: ApplicationServiceContainer, useValue: this });
        return super.process();
    }
    setupController(providers, controller, context) {
        const rpcConfig = rpc_1.rpcClass._fetch(controller);
        if (rpcConfig) {
            if (!app_1.isProvided(providers, controller))
                providers.unshift({ provide: controller, scope: 'rpc' });
            controller[injector_1.InjectorContext.contextSymbol] = context;
            this.rpcControllers.controllers.set(rpcConfig.getPath(), controller);
        }
        const httpConfig = http_1.httpClass._fetch(controller);
        if (httpConfig) {
            if (!app_1.isProvided(providers, controller))
                providers.unshift({ provide: controller, scope: 'http' });
            controller[injector_1.InjectorContext.contextSymbol] = context;
            this.httpControllers.add(controller);
        }
        super.setupController(providers, controller, context);
    }
}
exports.ApplicationServiceContainer = ApplicationServiceContainer;
//# sourceMappingURL=application-service-container.js.map