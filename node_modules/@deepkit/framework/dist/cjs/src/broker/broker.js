"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetBrokerServer = exports.BrokerServer = exports.DirectBroker = exports.NetBroker = exports.Broker = exports.BaseBroker = exports.EntityBrokerChannel = exports.EntityChannelMessageType = void 0;
const broker_1 = require("@deepkit/broker");
const rpc_1 = require("@deepkit/rpc");
const type_1 = require("@deepkit/type");
const injector_1 = require("@deepkit/injector");
const broker_config_1 = require("./broker.config");
const rpc_tcp_1 = require("@deepkit/rpc-tcp");
var EntityChannelMessageType;
(function (EntityChannelMessageType) {
    EntityChannelMessageType[EntityChannelMessageType["remove"] = 0] = "remove";
    EntityChannelMessageType[EntityChannelMessageType["patch"] = 1] = "patch";
    EntityChannelMessageType[EntityChannelMessageType["add"] = 2] = "add";
})(EntityChannelMessageType = exports.EntityChannelMessageType || (exports.EntityChannelMessageType = {}));
const entityChannelMessageAdd = type_1.t.schema({
    type: type_1.t.literal(EntityChannelMessageType.add).discriminant,
    id: type_1.t.union(type_1.t.string, type_1.t.number),
}, { name: 'EntityChannelMessageAdd' });
const entityChannelMessageRemove = type_1.t.schema({
    type: type_1.t.literal(EntityChannelMessageType.remove).discriminant,
    ids: type_1.t.array(type_1.t.union(type_1.t.string, type_1.t.number, type_1.t.uuid, type_1.t.mongoId)),
}, { name: 'EntityChannelMessageRemove' });
const entityPatch = type_1.t.schema({
    $set: type_1.t.map(type_1.t.any).optional,
    $unset: type_1.t.map(type_1.t.number).optional,
    $inc: type_1.t.map(type_1.t.number).optional,
});
const entityChannelMessagePatch = type_1.t.schema({
    type: type_1.t.literal(EntityChannelMessageType.patch).discriminant,
    id: type_1.t.union(type_1.t.string, type_1.t.number),
    version: type_1.t.number,
    patch: type_1.t.type(entityPatch)
}, { name: 'EntityChannelMessagePatch' });
class EntityBrokerChannel extends broker_1.BrokerChannel {
    publishAdd(item) {
        return this.publish({ type: EntityChannelMessageType.add, id: item.id, item });
    }
    publishRemove(ids) {
        return this.publish({ type: EntityChannelMessageType.remove, ids });
    }
    publishPatch(id, version, patch, item) {
        return this.publish({ type: EntityChannelMessageType.patch, id, version, patch, item });
    }
}
exports.EntityBrokerChannel = EntityBrokerChannel;
class BaseBroker extends broker_1.BrokerClient {
    getEntityChannelMessageSchema(schema) {
        const jit = schema.jit;
        if (!jit.entityChannelMessage) {
            jit.entityChannelMessage = type_1.t.union(entityChannelMessageRemove, entityChannelMessagePatch.extend({ item: type_1.t.partial(schema) }), entityChannelMessageAdd.extend({ item: schema }));
        }
        return jit.entityChannelMessage;
    }
    entityChannel(schemaOrType) {
        const schema = type_1.getClassSchema(schemaOrType);
        const channelName = 'dk/e/' + schema.getName();
        let channel = this.activeChannels.get(channelName);
        if (channel)
            return channel;
        const decorator = this.getEntityChannelMessageSchema(schema);
        channel = new EntityBrokerChannel(channelName, decorator, this);
        this.activeChannels.set(channel.channel, channel);
        return channel;
    }
}
exports.BaseBroker = BaseBroker;
let Broker = class Broker extends BaseBroker {
    constructor(url) {
        super(new rpc_tcp_1.TcpRpcClientAdapter(url));
        this.url = url;
    }
};
Broker = __decorate([
    __param(0, injector_1.inject(broker_config_1.brokerConfig.token('host'))),
    __metadata("design:paramtypes", [String])
], Broker);
exports.Broker = Broker;
let NetBroker = class NetBroker extends BaseBroker {
    constructor(url) {
        super(new rpc_tcp_1.NetTcpRpcClientAdapter(url));
        this.url = url;
    }
};
NetBroker = __decorate([
    __param(0, injector_1.inject(broker_config_1.brokerConfig.token('host'))),
    __metadata("design:paramtypes", [String])
], NetBroker);
exports.NetBroker = NetBroker;
class DirectBroker extends BaseBroker {
    constructor(rpcKernel) {
        super(new rpc_1.RpcDirectClientAdapter(rpcKernel));
    }
}
exports.DirectBroker = DirectBroker;
let BrokerServer = class BrokerServer extends rpc_tcp_1.TcpRpcServer {
    constructor(listen) {
        super(new broker_1.BrokerKernel, listen);
        this.kernel = new broker_1.BrokerKernel;
    }
};
BrokerServer = __decorate([
    injector_1.injectable(),
    __param(0, injector_1.inject(broker_config_1.brokerConfig.token('listen'))),
    __metadata("design:paramtypes", [String])
], BrokerServer);
exports.BrokerServer = BrokerServer;
let NetBrokerServer = class NetBrokerServer extends rpc_tcp_1.NetTcpRpcServer {
    constructor(listen) {
        super(new broker_1.BrokerKernel, listen);
        this.kernel = new broker_1.BrokerKernel;
    }
};
NetBrokerServer = __decorate([
    injector_1.injectable(),
    __param(0, injector_1.inject(broker_config_1.brokerConfig.token('listen'))),
    __metadata("design:paramtypes", [String])
], NetBrokerServer);
exports.NetBrokerServer = NetBrokerServer;
//# sourceMappingURL=broker.js.map