"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrokerModule = exports.BrokerListener = void 0;
const app_locker_1 = require("./app-locker");
const app_1 = require("@deepkit/app");
const injector_1 = require("@deepkit/injector");
const event_1 = require("@deepkit/event");
const application_server_1 = require("../application-server");
const broker_config_1 = require("./broker.config");
const broker_1 = require("./broker");
let BrokerListener = class BrokerListener {
    constructor(broker, brokerServer, startOnBootstrap) {
        this.broker = broker;
        this.brokerServer = brokerServer;
        this.startOnBootstrap = startOnBootstrap;
    }
    async onMainBootstrap() {
        if (this.startOnBootstrap) {
            await this.brokerServer.start();
        }
    }
    async onMainShutdown() {
        if (this.startOnBootstrap) {
            this.brokerServer.close();
        }
        await this.broker.disconnect();
    }
};
__decorate([
    event_1.eventDispatcher.listen(application_server_1.onServerMainBootstrap),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BrokerListener.prototype, "onMainBootstrap", null);
__decorate([
    event_1.eventDispatcher.listen(application_server_1.onServerMainShutdown),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BrokerListener.prototype, "onMainShutdown", null);
BrokerListener = __decorate([
    injector_1.injectable(),
    __param(2, injector_1.inject(broker_config_1.brokerConfig.token('startOnBootstrap'))),
    __metadata("design:paramtypes", [broker_1.Broker,
        broker_1.BrokerServer, Boolean])
], BrokerListener);
exports.BrokerListener = BrokerListener;
exports.BrokerModule = new app_1.AppModule({
    listeners: [
        BrokerListener
    ],
    config: broker_config_1.brokerConfig,
    providers: [
        broker_1.Broker,
        app_locker_1.AppLocker,
        broker_1.BrokerServer,
    ],
    exports: [
        broker_1.Broker,
        app_locker_1.AppLocker,
        broker_1.BrokerServer,
    ]
}, 'broker').forRoot();
//# sourceMappingURL=broker.module.js.map