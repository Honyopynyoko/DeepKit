"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugDebugFramesCommand = void 0;
const app_1 = require("@deepkit/app");
const path_1 = require("path");
const fs_1 = require("fs");
const framework_debug_api_1 = require("@deepkit/framework-debug-api");
const bson_1 = require("@deepkit/bson");
const kernel_config_1 = require("../kernel.config");
const logger_1 = require("@deepkit/logger");
class Config extends kernel_config_1.kernelConfig.slice(['varPath', 'debugStorePath']) {
}
let DebugDebugFramesCommand = class DebugDebugFramesCommand {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
    }
    async execute(reset = false) {
        const path = path_1.join(this.config.varPath, this.config.debugStorePath);
        if (reset) {
            fs_1.unlinkSync(path_1.join(path, 'frames.bin'));
            fs_1.unlinkSync(path_1.join(path, 'frames-data.bin'));
            this.logger.log('Files removed.');
            return;
        }
        console.log('frames', framework_debug_api_1.decodeFrames(fs_1.readFileSync(path_1.join(path, 'frames.bin'))));
        console.log('data', framework_debug_api_1.decodeFrameData(fs_1.readFileSync(path_1.join(path, 'frames-data.bin'))).map(v => {
            v.bson = bson_1.deserialize(v.bson);
            return v;
        }));
    }
};
__decorate([
    __param(0, app_1.flag.optional),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Promise)
], DebugDebugFramesCommand.prototype, "execute", null);
DebugDebugFramesCommand = __decorate([
    app_1.cli.controller('debug:debug:frames', {}),
    __metadata("design:paramtypes", [Config,
        logger_1.Logger])
], DebugDebugFramesCommand);
exports.DebugDebugFramesCommand = DebugDebugFramesCommand;
//# sourceMappingURL=debug-debug-frames.js.map