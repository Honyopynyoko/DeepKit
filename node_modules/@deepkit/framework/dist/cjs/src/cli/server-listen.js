"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerListenController = void 0;
const application_server_1 = require("../application-server");
const app_1 = require("@deepkit/app");
const injector_1 = require("@deepkit/injector");
const logger_1 = require("@deepkit/logger");
let ServerListenController = class ServerListenController {
    constructor(logger, injectorContext) {
        this.logger = logger;
        this.injectorContext = injectorContext;
    }
    async execute(host, port, workers, ssl, selfSigned, watch) {
        if (!this.logger.hasFormatter(logger_1.TimestampFormatter))
            this.logger.addFormatter(new logger_1.TimestampFormatter);
        const overwrite = {};
        if (host)
            overwrite.host = host;
        if (port)
            overwrite.port = port;
        if (workers)
            overwrite.workers = workers;
        if (ssl)
            overwrite.ssl = {};
        if (selfSigned)
            overwrite.selfSigned = selfSigned;
        const kernel = this.injectorContext.getModule('kernel');
        kernel.setConfig(overwrite);
        const server = this.injectorContext.get(application_server_1.ApplicationServer);
        await server.start();
    }
};
__decorate([
    __param(0, app_1.flag.optional),
    __param(1, app_1.flag.optional),
    __param(2, app_1.flag.optional),
    __param(3, app_1.flag.optional),
    __param(4, app_1.flag.optional),
    __param(5, app_1.flag.default(false)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number, Number, Boolean, Boolean, Boolean]),
    __metadata("design:returntype", Promise)
], ServerListenController.prototype, "execute", null);
ServerListenController = __decorate([
    app_1.cli.controller('server:listen', {
        description: 'Starts the HTTP server'
    }),
    __metadata("design:paramtypes", [logger_1.Logger,
        injector_1.InjectorContext])
], ServerListenController);
exports.ServerListenController = ServerListenController;
//# sourceMappingURL=server-listen.js.map