"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseListener = void 0;
const application_server_1 = require("../application-server");
const event_1 = require("@deepkit/event");
const injector_1 = require("@deepkit/injector");
const logger_1 = require("@deepkit/logger");
const orm_1 = require("@deepkit/orm");
let DatabaseListener = class DatabaseListener {
    constructor(databases, logger) {
        this.databases = databases;
        this.logger = logger;
    }
    async onMainBootstrap() {
        for (const databaseType of this.databases.getDatabaseTypes()) {
            if (this.databases.isMigrateOnStartup(databaseType)) {
                const database = this.databases.getDatabase(databaseType);
                if (!database)
                    throw new Error('Database not created');
                this.logger.log(`Migrate database <yellow>${database.name}</yellow>`);
                await database.migrate();
            }
        }
    }
    onShutdown() {
        this.databases.onShutDown();
    }
};
__decorate([
    event_1.eventDispatcher.listen(application_server_1.onServerMainBootstrap),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DatabaseListener.prototype, "onMainBootstrap", null);
__decorate([
    event_1.eventDispatcher.listen(application_server_1.onServerMainShutdown),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DatabaseListener.prototype, "onShutdown", null);
DatabaseListener = __decorate([
    injector_1.injectable(),
    __metadata("design:paramtypes", [orm_1.DatabaseRegistry,
        logger_1.Logger])
], DatabaseListener);
exports.DatabaseListener = DatabaseListener;
//# sourceMappingURL=database-listener.js.map