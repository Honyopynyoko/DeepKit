import { Config, Database, DebugControllerInterface, Event, Route, RpcAction, Workflow } from '@deepkit/framework-debug-api';
import { ApplicationServiceContainer } from '../application-service-container';
import { Router } from '@deepkit/http';
import { EventDispatcher } from '@deepkit/event';
import { DatabaseRegistry } from '@deepkit/orm';
declare const DebugConfig_base: import("@deepkit/core").ClassType<Pick<import("@deepkit/type").ExtractClassDefinition<{
    host: import("@deepkit/type").FieldDecoratorResult<string>;
    port: import("@deepkit/type").FieldDecoratorResult<number>;
    httpsPort: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    selfSigned: import("@deepkit/type").FieldDecoratorResult<boolean | undefined>;
    keepAliveTimeout: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    path: import("@deepkit/type").FieldDecoratorResult<string>;
    workers: import("@deepkit/type").FieldDecoratorResult<number>;
    ssl: import("@deepkit/type").FieldDecoratorResult<boolean>;
    sslOptions: import("@deepkit/type").FieldDecoratorResult<any>;
    sslKey: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCertificate: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCa: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCrl: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    server: import("@deepkit/type").FieldDecoratorResult<any>;
    maxPayload: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    publicDir: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    debug: import("@deepkit/type").FieldDecoratorResult<boolean>;
    debugUrl: import("@deepkit/type").FieldDecoratorResult<string>;
    varPath: import("@deepkit/type").FieldDecoratorResult<string>;
    debugStorePath: import("@deepkit/type").FieldDecoratorResult<string>;
    httpLog: import("@deepkit/type").FieldDecoratorResult<boolean>;
    session: import("@deepkit/type").FieldDecoratorResult<any>;
    databases: import("@deepkit/type").FieldDecoratorResult<any[] | undefined>;
    migrateOnStartup: import("@deepkit/type").FieldDecoratorResult<boolean>;
    migrationDir: import("@deepkit/type").FieldDecoratorResult<string>;
}>, "varPath" | "debugStorePath">>;
declare class DebugConfig extends DebugConfig_base {
}
export declare class DebugController implements DebugControllerInterface {
    protected serviceContainer: ApplicationServiceContainer;
    protected eventDispatcher: EventDispatcher;
    protected router: Router;
    protected config: DebugConfig;
    protected databaseRegistry: DatabaseRegistry;
    constructor(serviceContainer: ApplicationServiceContainer, eventDispatcher: EventDispatcher, router: Router, config: DebugConfig, databaseRegistry: DatabaseRegistry);
    getProfilerFrames(): Uint8Array;
    databases(): Database[];
    events(): Event[];
    routes(): Route[];
    configuration(): Config;
    actions(peter?: string): RpcAction[];
    getWorkflow(name: string): Workflow;
}
export {};
