"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugController = void 0;
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
const framework_debug_api_1 = require("@deepkit/framework-debug-api");
const rpc_1 = require("@deepkit/rpc");
const type_1 = require("@deepkit/type");
const application_service_container_1 = require("../application-service-container");
const http_1 = require("@deepkit/http");
const core_1 = require("@deepkit/core");
const event_1 = require("@deepkit/event");
const orm_1 = require("@deepkit/orm");
const fs_1 = require("fs");
const path_1 = require("path");
const kernel_config_1 = require("../kernel.config");
class DebugConfig extends kernel_config_1.kernelConfig.slice(['varPath', 'debugStorePath']) {
}
let DebugController = class DebugController {
    constructor(serviceContainer, eventDispatcher, router, config, databaseRegistry) {
        this.serviceContainer = serviceContainer;
        this.eventDispatcher = eventDispatcher;
        this.router = router;
        this.config = config;
        this.databaseRegistry = databaseRegistry;
    }
    getProfilerFrames() {
        const path = path_1.join(this.config.varPath, this.config.debugStorePath);
        return fs_1.readFileSync(path_1.join(path, 'frames.bin'));
    }
    databases() {
        if (!this.databaseRegistry)
            return [];
        const databases = [];
        for (const db of this.databaseRegistry.getDatabases()) {
            const entities = [];
            for (const classSchema of db.entities) {
                entities.push({ name: classSchema.name, className: classSchema.getClassName() });
            }
            databases.push({ name: db.name, entities, adapter: db.adapter.getName() });
        }
        return databases;
    }
    events() {
        const events = [];
        for (const token of this.eventDispatcher.getTokens()) {
            const listeners = this.eventDispatcher.getListeners(token);
            for (const listener of listeners) {
                if (event_1.isEventListenerContainerEntryService(listener)) {
                    events.push({
                        event: token.id,
                        controller: core_1.getClassName(listener.classType),
                        methodName: listener.methodName,
                        priority: listener.order,
                    });
                }
            }
        }
        return events;
    }
    routes() {
        const routes = [];
        for (const route of this.router.getRoutes()) {
            const routeD = {
                path: route.getFullPath(),
                httpMethod: route.httpMethod,
                parameters: [],
                groups: route.groups,
                category: route.category,
                controller: core_1.getClassName(route.action.controller) + '.' + route.action.methodName,
                description: route.description,
            };
            const parsedRoute = http_1.parseRouteControllerAction(route);
            const queryParameters = [];
            for (const parameter of parsedRoute.getParameters()) {
                if (parameter === parsedRoute.customValidationErrorHandling)
                    continue;
                if (parameter.body) {
                    routeD.bodySchema = parameter.property.toJSON();
                }
                else if (parameter.query) {
                    routeD.parameters.push({
                        name: parameter.getName(),
                        type: 'query',
                        schema: parameter.property.toJSON(),
                    });
                    queryParameters.push(`${parameter.getName()}=${parameter.property.toString()}`);
                }
                else if (parameter.isPartOfPath()) {
                    routeD.parameters.push({
                        name: parameter.getName(),
                        type: 'url',
                        schema: parameter.property.toJSON(),
                    });
                }
                else {
                    //its a dependency injection token
                }
            }
            if (queryParameters.length) {
                routeD.path += '?' + queryParameters.join('&');
            }
            routes.push(routeD);
        }
        return routes;
    }
    configuration() {
        const appConfig = [];
        if (this.serviceContainer.appModule.options.config) {
            const schema = this.serviceContainer.appModule.options.config.schema;
            for (const [name, value] of Object.entries(this.serviceContainer.appModule.getConfig())) {
                appConfig.push({
                    name: name,
                    value: value,
                    defaultValue: schema.getProperty(name).getDefaultValue(),
                    description: schema.getProperty(name).description,
                    type: schema.getProperty(name).toString(),
                });
            }
        }
        const modulesConfig = [];
        for (const module of this.serviceContainer.appModule.getImports()) {
            if (!module.options.config)
                continue;
            const schema = module.options.config.schema;
            for (const [name, value] of Object.entries(module.getConfig())) {
                modulesConfig.push({
                    name: module.getName() + '.' + name,
                    value: value,
                    defaultValue: schema.getProperty(name).getDefaultValue(),
                    description: schema.getProperty(name).description,
                    type: schema.getProperty(name).toString(),
                });
            }
        }
        return core_1.changeClass({
            appConfig, modulesConfig,
        }, framework_debug_api_1.Config);
    }
    actions(peter) {
        const result = [];
        for (const controller of this.serviceContainer.rpcControllers.controllers.values()) {
            const rpcConfig = rpc_1.rpcClass._fetch(controller);
            if (!rpcConfig)
                continue;
            for (const action of rpcConfig.actions.values()) {
                const parameters = [];
                const properties = type_1.getClassSchema(controller).getMethodProperties(action.name || '');
                for (const property of properties) {
                    parameters.push(new framework_debug_api_1.RpcActionParameter(property.name, property.toJSON()));
                }
                result.push({
                    path: rpcConfig.getPath(),
                    controller: core_1.getClassName(controller),
                    methodName: action.name || '',
                    parameters: parameters,
                });
            }
        }
        return result;
    }
    getWorkflow(name) {
        const w = this.serviceContainer.workflowRegistry.get(name);
        return core_1.changeClass({
            places: Object.keys(w.places),
            transitions: w.transitions,
        }, framework_debug_api_1.Workflow);
    }
};
__decorate([
    rpc_1.rpc.action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Uint8Array)
], DebugController.prototype, "getProfilerFrames", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.array(framework_debug_api_1.Database),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], DebugController.prototype, "databases", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.array(framework_debug_api_1.Event),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], DebugController.prototype, "events", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.array(framework_debug_api_1.Route),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], DebugController.prototype, "routes", null);
__decorate([
    rpc_1.rpc.action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", framework_debug_api_1.Config)
], DebugController.prototype, "configuration", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.array(framework_debug_api_1.RpcAction),
    __param(0, type_1.t.optional),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Array)
], DebugController.prototype, "actions", null);
__decorate([
    rpc_1.rpc.action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", framework_debug_api_1.Workflow)
], DebugController.prototype, "getWorkflow", null);
DebugController = __decorate([
    rpc_1.rpc.controller(framework_debug_api_1.DebugControllerInterface),
    __metadata("design:paramtypes", [application_service_container_1.ApplicationServiceContainer,
        event_1.EventDispatcher,
        http_1.Router,
        DebugConfig,
        orm_1.DatabaseRegistry])
], DebugController);
exports.DebugController = DebugController;
//# sourceMappingURL=debug.controller.js.map