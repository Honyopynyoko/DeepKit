import { FrameEnd, FrameStart, StopwatchStore } from '@deepkit/stopwatch';
import { Mutex } from '@deepkit/core';
import { Broker } from '../../broker/broker';
declare const Config_base: import("@deepkit/core").ClassType<Pick<import("@deepkit/type").ExtractClassDefinition<{
    host: import("@deepkit/type").FieldDecoratorResult<string>;
    port: import("@deepkit/type").FieldDecoratorResult<number>;
    httpsPort: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    selfSigned: import("@deepkit/type").FieldDecoratorResult<boolean | undefined>;
    keepAliveTimeout: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    path: import("@deepkit/type").FieldDecoratorResult<string>;
    workers: import("@deepkit/type").FieldDecoratorResult<number>;
    ssl: import("@deepkit/type").FieldDecoratorResult<boolean>;
    sslOptions: import("@deepkit/type").FieldDecoratorResult<any>;
    sslKey: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCertificate: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCa: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    sslCrl: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    server: import("@deepkit/type").FieldDecoratorResult<any>;
    maxPayload: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
    publicDir: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
    debug: import("@deepkit/type").FieldDecoratorResult<boolean>;
    debugUrl: import("@deepkit/type").FieldDecoratorResult<string>;
    varPath: import("@deepkit/type").FieldDecoratorResult<string>;
    debugStorePath: import("@deepkit/type").FieldDecoratorResult<string>;
    httpLog: import("@deepkit/type").FieldDecoratorResult<boolean>;
    session: import("@deepkit/type").FieldDecoratorResult<any>;
    databases: import("@deepkit/type").FieldDecoratorResult<any[] | undefined>;
    migrateOnStartup: import("@deepkit/type").FieldDecoratorResult<boolean>;
    migrationDir: import("@deepkit/type").FieldDecoratorResult<string>;
}>, "varPath" | "debugStorePath">>;
declare class Config extends Config_base {
}
export declare class FileStopwatchStore extends StopwatchStore {
    protected config: Config;
    protected broker: Broker;
    protected lastSync?: any;
    protected frameFileHandle?: number;
    protected frameDataFileHandle?: number;
    protected syncMutex: Mutex;
    protected lastId: number;
    protected lastContext: number;
    protected frameChannel: import("@deepkit/broker").BrokerChannel<Uint8Array>;
    constructor(config: Config, broker: Broker);
    run<T>(data: {
        [name: string]: any;
    }, cb: () => Promise<T>): Promise<T>;
    getZone(): {
        [name: string]: any;
    } | undefined;
    add(frame: FrameStart | FrameEnd): number;
    protected loadLastNumberRange(): Promise<void>;
    protected sync(): void;
    protected syncNow(): Promise<void>;
}
export {};
