"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KernelConfigAll = exports.kernelConfig = void 0;
const type_1 = require("@deepkit/type");
const app_1 = require("@deepkit/app");
const session_1 = require("./session");
exports.kernelConfig = new app_1.AppModuleConfig({
    host: type_1.t.string.default('localhost'),
    port: type_1.t.number.default(8080),
    httpsPort: type_1.t.number.optional.description('If httpsPort and ssl is defined, then the https server is started additional to the http-server.'),
    selfSigned: type_1.t.boolean.optional.description('If for ssl: true the certificate and key should be automatically generated.'),
    keepAliveTimeout: type_1.t.number.optional,
    path: type_1.t.string.default('/'),
    workers: type_1.t.number.default(1),
    ssl: type_1.t.boolean.default(false).description("Enables HTTPS server"),
    sslOptions: type_1.t.any.description("Same interface as tls.SecureContextOptions & tls.TlsOptions."),
    sslKey: type_1.t.string.optional.description('A file path to a ssl key file for https'),
    sslCertificate: type_1.t.string.optional.description('A file path to a certificate file for https'),
    sslCa: type_1.t.string.optional.description('A file path to a ca file for https'),
    sslCrl: type_1.t.string.optional.description('A file path to a crl file for https'),
    server: type_1.t.any,
    maxPayload: type_1.t.number.optional,
    publicDir: type_1.t.string.optional.description('A path to a folder that should be served per default. Relative to cwd.'),
    debug: type_1.t.boolean.default(false),
    debugUrl: type_1.t.string.default('_debug'),
    varPath: type_1.t.string.default('var/'),
    debugStorePath: type_1.t.string.default('debug/').description('Relative to {varPath} option'),
    httpLog: type_1.t.boolean.default(true),
    session: type_1.t.any.default(session_1.Session).description('The session ClassType'),
    databases: type_1.t.array(type_1.t.any).optional.description('ClassType[] of Database classes'),
    migrateOnStartup: type_1.t.boolean.default(false).description('Whether all registered database should be migrated automatically on startup.'),
    migrationDir: type_1.t.string.default('migrations'),
});
class KernelConfigAll extends exports.kernelConfig.all() {
}
exports.KernelConfigAll = KernelConfigAll;
//# sourceMappingURL=kernel.config.js.map