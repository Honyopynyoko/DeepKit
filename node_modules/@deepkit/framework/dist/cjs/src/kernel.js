"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KernelModule = void 0;
const core_1 = require("@deepkit/core");
const framework_debug_api_1 = require("@deepkit/framework-debug-api");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = require("path");
const application_server_1 = require("./application-server");
const broker_module_1 = require("./broker/broker.module");
const live_database_1 = require("./database/live-database");
const debug_router_1 = require("./cli/debug-router");
const debug_di_1 = require("./cli/debug-di");
const server_listen_1 = require("./cli/server-listen");
const debug_controller_1 = require("./debug/debug.controller");
const http_debug_controller_1 = require("./debug/http-debug.controller");
const http_1 = require("@deepkit/http");
const injector_1 = require("@deepkit/injector");
const kernel_config_1 = require("./kernel.config");
const logger_1 = require("@deepkit/logger");
const session_1 = require("./session");
const worker_1 = require("./worker");
const stopwatch_1 = require("@deepkit/stopwatch");
const controller_1 = require("./orm-browser/controller");
const database_listener_1 = require("./database/database-listener");
const orm_1 = require("@deepkit/orm");
const commands_1 = require("@deepkit/sql/commands");
const app_1 = require("@deepkit/app");
const store_1 = require("./debug/stopwatch/store");
const debug_debug_frames_1 = require("./cli/debug-debug-frames");
const rpc_1 = require("@deepkit/rpc");
const app_config_1 = require("./cli/app-config");
exports.KernelModule = new app_1.AppModule({
    config: kernel_config_1.kernelConfig,
    providers: [
        core_1.ProcessLocker,
        application_server_1.ApplicationServer,
        http_1.Router,
        http_1.HttpKernel,
        worker_1.WebWorkerFactory,
        logger_1.ConsoleTransport,
        stopwatch_1.Stopwatch,
        logger_1.Logger,
        rpc_1.RpcKernelSecurity,
        commands_1.MigrationProvider,
        debug_controller_1.DebugController,
        { provide: orm_1.DatabaseRegistry, deps: [injector_1.InjectorContext], useFactory: (ic) => new orm_1.DatabaseRegistry(ic) },
        { provide: live_database_1.LiveDatabase, scope: 'rpc' },
        { provide: http_1.HttpListener },
        { provide: session_1.SessionHandler, scope: 'http' },
    ],
    workflows: [
    // httpWorkflow
    // rpcWorkflow,
    ],
    listeners: [
        http_1.HttpListener,
        application_server_1.ApplicationServerListener,
        database_listener_1.DatabaseListener,
    ],
    controllers: [
        server_listen_1.ServerListenController,
        debug_router_1.DebugRouterController,
        debug_di_1.DebugDIController,
        debug_debug_frames_1.DebugDebugFramesCommand,
        app_config_1.AppConfigController,
        commands_1.MigrationUpCommand,
        commands_1.MigrationDownCommand,
        commands_1.MigrationPendingCommand,
        commands_1.MigrationCreateController,
    ],
    imports: [
        broker_module_1.BrokerModule,
        http_1.HttpModule,
    ],
}, 'kernel').setup((module, config) => {
    if (config.databases) {
        const dbs = config.databases;
        module.addProvider(...dbs);
        module.setupProvider(commands_1.MigrationProvider).setMigrationDir(config.migrationDir);
        for (const db of dbs) {
            module.setupProvider(orm_1.DatabaseRegistry).addDatabase(db);
            module.setupProvider(db).stopwatch = injector_1.injectorReference(stopwatch_1.Stopwatch);
        }
    }
    module.setupProvider(orm_1.DatabaseRegistry).setMigrateOnStartup(config.migrateOnStartup);
    if (config.httpLog) {
        module.addListener(http_1.HttpLogger);
    }
    if (config.publicDir) {
        module.addListener(http_1.serveStaticListener('/', config.publicDir));
    }
    module.setupProvider(logger_1.Logger).addTransport(injector_1.injectorReference(logger_1.ConsoleTransport));
    if (config.debug) {
        fs_extra_1.default.ensureDirSync(path_1.join(config.varPath, config.debugStorePath));
        //this segfaults on node v16, so disable for the moment, until the framework debugger is fully launched
        // Zone.enable();
        module.addProvider({ provide: controller_1.OrmBrowserController, deps: [orm_1.DatabaseRegistry], useFactory: (registry) => new controller_1.OrmBrowserController(registry.getDatabases()) });
        module.addController(debug_controller_1.DebugController);
        module.addController(controller_1.OrmBrowserController);
        http_debug_controller_1.registerDebugHttpController(module, config.debugUrl);
        module.addProvider(store_1.FileStopwatchStore);
        module.addProvider({
            provide: stopwatch_1.Stopwatch,
            deps: [store_1.FileStopwatchStore],
            useFactory(store) {
                return new stopwatch_1.Stopwatch(store);
            }
        });
        module.setupProvider(live_database_1.LiveDatabase).enableChangeFeed(framework_debug_api_1.DebugRequest);
    }
}).forRoot();
//# sourceMappingURL=kernel.js.map