"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmBrowserController = void 0;
const core_1 = require("@deepkit/core");
const orm_browser_api_1 = require("@deepkit/orm-browser-api");
const rpc_1 = require("@deepkit/rpc");
const type_1 = require("@deepkit/type");
const faker = __importStar(require("faker"));
const sql_1 = require("@deepkit/sql");
const logger_1 = require("@deepkit/logger");
const perf_hooks_1 = require("perf_hooks");
const http_1 = require("@deepkit/http");
let OrmBrowserController = class OrmBrowserController {
    constructor(databases) {
        this.databases = databases;
    }
    registerDatabase(...databases) {
        this.databases.push(...databases);
    }
    extractDatabaseInfo(db) {
        return new orm_browser_api_1.DatabaseInfo(db.name, db.adapter.getName(), type_1.serializeSchemas([...db.entities]));
    }
    getDb(dbName) {
        for (const db of this.databases) {
            if (db.name === dbName)
                return db;
        }
        throw new Error(`No database ${dbName} found`);
    }
    getDbEntity(dbName, entityName) {
        for (const db of this.databases) {
            if (db.name === dbName) {
                for (const entity of db.entities) {
                    if (entity.name === entityName)
                        return [db, entity];
                }
            }
        }
        throw new Error(`No entity ${entityName} for in database ${dbName}`);
    }
    getDatabases() {
        const databases = [];
        for (const db of this.databases) {
            databases.push(this.extractDatabaseInfo(db));
        }
        return databases;
    }
    getDatabase(name) {
        for (const db of this.databases) {
            if (db.name === name)
                return this.extractDatabaseInfo(db);
        }
        throw new Error(`No database ${name} found`);
    }
    findDatabase(name) {
        for (const db of this.databases) {
            if (db.name === name)
                return db;
        }
        throw new Error(`No database ${name} found`);
    }
    async migrate(name) {
        const db = this.findDatabase(name);
        await db.migrate();
    }
    async resetAllTables(name) {
        const db = this.findDatabase(name);
        if (db.adapter instanceof sql_1.SQLDatabaseAdapter) {
            await db.adapter.createTables([...db.entities.values()]);
        }
    }
    async getFakerTypes() {
        const res = {};
        for (const fn of orm_browser_api_1.fakerFunctions) {
            const [p1, p2] = fn.split('.');
            try {
                const example = p2 ? faker[p1][p2]() : faker[p1]();
                res[fn] = { example: example, type: orm_browser_api_1.getType(example) };
            }
            catch (error) {
                console.log(`warning: faker function not available ${fn}: ${error}`);
            }
        }
        return res;
    }
    async getMigrations(name) {
        const db = this.findDatabase(name);
        if (db.adapter instanceof sql_1.SQLDatabaseAdapter) {
            return db.adapter.getMigrations([...db.entities.values()]);
        }
        return {};
    }
    async seed(dbName, seed) {
        var _a, _b;
        const db = this.getDb(dbName);
        db.logger.active = false;
        try {
            const session = db.createSession();
            const added = {};
            const assignReference = [];
            function fakerValue(path, fakerName) {
                const [p1, p2] = fakerName.split('.');
                try {
                    return p2 ? faker[p1][p2]() : faker[p1]();
                }
                catch (error) {
                    console.warn(`Could not fake ${path} via faker's ${fakerName}: ${error}`);
                }
            }
            function fake(path, property, propSeed, callback) {
                if (!propSeed.fake) {
                    if (propSeed.value !== undefined)
                        callback(propSeed.value);
                    return;
                }
                if (property.isReference) {
                    if (property.type !== 'class')
                        throw new Error(`${path}: only class properties can be references`);
                    assignReference.push({ path, entity: property.getResolvedClassSchema().getName(), reference: propSeed.reference, properties: propSeed.properties, callback });
                    return;
                }
                else if (property.isArray) {
                    const res = [];
                    if (!propSeed.array)
                        return res;
                    const range = propSeed.array.max - propSeed.array.min;
                    const subPath = path + '.' + property.getSubType().name;
                    for (let i = 0; i < Math.ceil(Math.random() * range); i++) {
                        fake(subPath, property.getSubType(), propSeed.array.seed, (v) => {
                            res.push(v);
                        });
                    }
                    return callback(res);
                }
                else if (property.isMap) {
                    const res = {};
                    if (!propSeed.map)
                        return res;
                    const map = propSeed.map;
                    const range = propSeed.map.max - propSeed.map.min;
                    const subPath = path + '.' + property.getSubType().name;
                    for (let i = 0; i < Math.ceil(Math.random() * range); i++) {
                        fake(subPath, property.getSubType(), propSeed.map.seed, (v) => {
                            res[fakerValue(subPath, map.key.faker)] = v;
                        });
                    }
                    return callback(res);
                }
                else if (property.type === 'class' || property.type === 'partial') {
                    const foreignSchema = property.getResolvedClassSchema();
                    const item = type_1.plainToClass(foreignSchema, {});
                    for (const prop of foreignSchema.getProperties()) {
                        if (!propSeed.properties[prop.name])
                            continue;
                        fake(path + '.' + prop.name, prop, propSeed.properties[prop.name], (v) => {
                            item[prop.name] = v;
                        });
                    }
                    return callback(item);
                }
                else if (property.type === 'boolean') {
                    callback(Math.random() > 0.5);
                }
                else if (property.type === 'enum') {
                    const keys = core_1.getEnumValues(property.getResolvedClassType());
                    callback(keys[keys.length * Math.random() | 0]);
                }
                else {
                    return callback(fakerValue(path, propSeed.faker));
                }
            }
            function create(entity, properties) {
                if (!added[entity.getName()])
                    added[entity.getName()] = [];
                const item = type_1.plainToClass(entity, {});
                for (const [propName, propSeed] of Object.entries(properties)) {
                    const property = entity.getProperty(propName);
                    fake(entity.getClassName() + '.' + propName, property, propSeed, (v) => {
                        item[property.name] = v;
                    });
                }
                for (const reference of entity.references) {
                    if (reference.isArray)
                        continue;
                    if (reference.backReference)
                        continue;
                    item[reference.name] = db.getReference(reference.getResolvedClassSchema(), item[reference.name]);
                }
                session.add(item);
                added[entity.getName()].push(item);
                return item;
            }
            for (const [entityName, entitySeed] of Object.entries(seed.entities)) {
                if (!entitySeed || !entitySeed.active)
                    continue;
                const entity = db.getEntity(entityName);
                if (entitySeed.truncate) {
                    await db.query(entity).deleteMany();
                }
                for (let i = 0; i < entitySeed.amount; i++) {
                    create(entity, entitySeed.properties);
                }
            }
            //assign references
            const dbCandidates = {};
            for (const ref of assignReference) {
                const entity = db.getEntity(ref.entity);
                let candidates = added[_a = ref.entity] || (added[_a] = []);
                if (ref.reference === 'random') {
                    //note: I know there are faster ways, but this gets the job done for now
                    candidates = dbCandidates[_b = ref.entity] || (dbCandidates[_b] = await db.query(entity).limit(1000).find());
                }
                if (!candidates.length) {
                    if (ref.reference === 'random') {
                        throw new Error(`Entity ${ref.entity} has no items in the database. Used in ${ref.path}.`);
                    }
                    if (ref.reference === 'random-seed') {
                        throw new Error(`Entity ${ref.entity} has no seeded items. Used in ${ref.path}.`);
                    }
                }
                if (ref.reference === 'create') {
                    ref.callback(create(entity, ref.properties));
                }
                else {
                    ref.callback(candidates[candidates.length * Math.random() | 0]);
                }
            }
            await session.commit();
        }
        finally {
            db.logger.active = true;
        }
    }
    async httpQuery(dbName, entityName, query) {
        const [, entity] = this.getDbEntity(dbName, entityName);
        const res = await this.query(dbName, entityName, query);
        if (core_1.isArray(res.result)) {
            const serialize = type_1.jsonSerializer.for(entity);
            res.result = res.result.map(v => serialize.partialSerialize(v));
        }
        return res;
    }
    async query(dbName, entityName, query) {
        const res = {
            executionTime: 0,
            log: [],
            result: undefined
        };
        const [db, entity] = this.getDbEntity(dbName, entityName);
        const oldLogger = db.logger.logger;
        const loggerTransport = new logger_1.MemoryLoggerTransport;
        db.logger.setLogger(new logger_1.Logger([loggerTransport]));
        try {
            const fn = new Function(`return function(database, ${entity.getClassName()}) {return ${query}}`)();
            const start = perf_hooks_1.performance.now();
            res.result = await fn(db, entity);
            res.executionTime = perf_hooks_1.performance.now() - start;
        }
        catch (error) {
            res.error = String(error);
        }
        finally {
            res.log = loggerTransport.messageStrings;
            if (oldLogger)
                db.logger.setLogger(oldLogger);
        }
        return res;
    }
    async getCount(dbName, entityName, filter) {
        const [db, entity] = this.getDbEntity(dbName, entityName);
        return await db.query(entity).filter(filter).count();
    }
    async getItems(dbName, entityName, filter, sort, limit, skip) {
        const [db, entity] = this.getDbEntity(dbName, entityName);
        const start = perf_hooks_1.performance.now();
        const items = await db.query(entity).filter(filter).sort(sort).limit(limit).skip(skip).find();
        return { items, executionTime: perf_hooks_1.performance.now() - start };
    }
    async create(dbName, entityName) {
        const [db, entity] = this.getDbEntity(dbName, entityName);
        return type_1.plainToClass(entity, {});
    }
    async commit(commit) {
        // console.log(inspect(commit, false, 2133));
        function isNewIdWrapper(value) {
            return core_1.isObject(value) && '$___newId' in value;
        }
        for (const [dbName, c] of Object.entries(commit)) {
            const db = this.getDb(dbName);
            const session = db.createSession();
            try {
                const updates = [];
                for (const [entityName, removes] of Object.entries(c.removed)) {
                    const entity = db.getEntity(entityName);
                    const query = session.query(entity);
                    for (const remove of removes) {
                        updates.push(query.filter(db.getReference(entity, remove)).deleteOne());
                    }
                }
                const addedItems = new Map();
                for (const [entityName, added] of Object.entries(c.added)) {
                    const entity = db.getEntity(entityName);
                    const addedIds = c.addedIds[entityName];
                    for (let i = 0; i < added.length; i++) {
                        addedItems.set(addedIds[i], type_1.plainToClass(entity, added[i]));
                    }
                }
                for (const [entityName, ids] of Object.entries(c.addedIds)) {
                    const entity = db.getEntity(entityName);
                    const added = c.added[entityName];
                    for (let i = 0; i < added.length; i++) {
                        const id = ids[i];
                        const add = added[i];
                        const item = addedItems.get(id);
                        for (const reference of entity.references) {
                            if (reference.backReference)
                                continue;
                            //note, we need to operate on `added` from commit
                            // since `item` from addedItems got already converted and $___newId is lost.
                            const v = add[reference.name];
                            if (reference.isArray) {
                            }
                            else {
                                if (isNewIdWrapper(v)) {
                                    //reference to not-yet existing record,
                                    //so place the actual item in it, so the UoW accordingly saves
                                    item[reference.name] = addedItems.get(v.$___newId);
                                }
                                else {
                                    //regular reference to already existing record,
                                    //so convert to reference
                                    item[reference.name] = db.getReference(reference.getResolvedClassSchema(), item[reference.name]);
                                }
                            }
                        }
                        session.add(item);
                    }
                }
                await session.commit();
                for (const [entityName, changes] of Object.entries(c.changed)) {
                    const entity = db.getEntity(entityName);
                    const query = session.query(entity);
                    for (const change of changes) {
                        //todo: convert $set from json to class
                        const $set = change.changes.$set;
                        if (!$set)
                            continue;
                        for (const reference of entity.references) {
                            if (reference.backReference)
                                continue;
                            const v = $set[reference.name];
                            if (v === undefined)
                                continue;
                            if (isNewIdWrapper(v)) {
                                $set[reference.name] = addedItems.get(v.$___newId);
                            }
                            else {
                                $set[reference.name] = db.getReference(reference.getResolvedClassSchema(), $set[reference.name]);
                            }
                        }
                        updates.push(query.filter(db.getReference(entity, change.pk)).patchOne(change.changes));
                    }
                }
                await Promise.all(updates);
            }
            catch (error) {
                //todo: rollback
                throw error;
            }
        }
    }
};
__decorate([
    rpc_1.rpc.action(),
    type_1.t.array(orm_browser_api_1.DatabaseInfo),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], OrmBrowserController.prototype, "getDatabases", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.type(orm_browser_api_1.DatabaseInfo),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", orm_browser_api_1.DatabaseInfo)
], OrmBrowserController.prototype, "getDatabase", null);
__decorate([
    rpc_1.rpc.action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "migrate", null);
__decorate([
    rpc_1.rpc.action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "resetAllTables", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.any,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "getFakerTypes", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.any,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "getMigrations", null);
__decorate([
    rpc_1.rpc.action(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, orm_browser_api_1.SeedDatabase]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "seed", null);
__decorate([
    http_1.http.GET('_orm-browser/query'),
    type_1.t.any,
    __param(0, http_1.http.query()),
    __param(1, http_1.http.query()),
    __param(2, http_1.http.query()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "httpQuery", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.any,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "query", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.number,
    __param(2, type_1.t.map(type_1.t.any)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Object]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "getCount", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.any,
    __param(2, type_1.t.map(type_1.t.any)),
    __param(3, type_1.t.map(type_1.t.any)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Object, Object, Number, Number]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "getItems", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.any,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "create", null);
__decorate([
    rpc_1.rpc.action(),
    type_1.t.any,
    __param(0, type_1.t.any),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], OrmBrowserController.prototype, "commit", null);
OrmBrowserController = __decorate([
    rpc_1.rpc.controller(orm_browser_api_1.BrowserControllerInterface),
    __metadata("design:paramtypes", [Array])
], OrmBrowserController);
exports.OrmBrowserController = OrmBrowserController;
//# sourceMappingURL=controller.js.map