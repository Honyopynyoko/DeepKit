"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionHandler = exports.Session = void 0;
const type_1 = require("@deepkit/type");
const injector_1 = require("@deepkit/injector");
/**
 * This is the default session object, that can be used in your application.
 *
 * If you want to receive the Session object you can simply use this Session class as dependency injection token.
 * However, this will always create a new session (creating a session id + store it in the session storage).
 * If you simply want to check whether a session exists (user has a valid authenticaton token/cookie), use
 * SessionHandler.
 *
 * If you need more fields, you can create your own Session class. Make sure to
 * annotate all fields using `@t` of @deepkit/type, since the whole object is serialized
 * in a session storage (either memory, local file system, or external databases like redis/mysql/etc).
*/
let Session = class Session {
    constructor(id, username) {
        this.id = id;
        this.username = username;
        this.data = {};
        this.createdAt = new Date;
        this.groups = [];
    }
    isAnonymous() {
        return undefined === this.username;
    }
};
__decorate([
    type_1.t.map(type_1.t.any),
    __metadata("design:type", Object)
], Session.prototype, "data", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Date)
], Session.prototype, "createdAt", void 0);
__decorate([
    type_1.t.array(type_1.t.string),
    __metadata("design:type", Array)
], Session.prototype, "groups", void 0);
Session = __decorate([
    __param(0, type_1.t),
    __param(1, type_1.t),
    __metadata("design:paramtypes", [String, String])
], Session);
exports.Session = Session;
/**
 *
 */
let SessionHandler = class SessionHandler {
    setSession(session) {
        this.session = session;
    }
    hasSession() {
        return this.session !== undefined;
    }
    getSessionOrUndefined() {
        return this.session;
    }
    getSession() {
        if (!this.session) {
            throw new Error('No session loaded');
        }
        return this.session;
    }
};
SessionHandler = __decorate([
    injector_1.injectable()
], SessionHandler);
exports.SessionHandler = SessionHandler;
//# sourceMappingURL=session.js.map