"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_1 = require("@deepkit/rpc");
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const application_1 = require("../src/application");
const app_1 = require("@deepkit/app");
const injector_1 = require("@deepkit/injector");
const testing_1 = require("../src/testing");
const application_server_1 = require("../src/application-server");
const logger_1 = require("@deepkit/logger");
const kernel_1 = require("../src/kernel");
globals_1.test('testing app api', async () => {
    let MyController = class MyController {
        constructor(logger) {
            this.logger = logger;
        }
        foo() {
            this.logger.log('bar');
            return 'bar';
        }
    };
    __decorate([
        rpc_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MyController.prototype, "foo", null);
    MyController = __decorate([
        rpc_1.rpc.controller('test'),
        __metadata("design:paramtypes", [logger_1.Logger])
    ], MyController);
    const testing = testing_1.createTestingApp({ controllers: [MyController] });
    await testing.startServer();
    const client = testing.createRpcClient();
    const controller = client.controller('test');
    globals_1.expect(await controller.foo()).toBe('bar');
    globals_1.expect(testing.app.get(logger_1.MemoryLoggerTransport).messageStrings.includes('bar'));
    await testing.stopServer();
});
globals_1.test('basic controller', async () => {
    let createdControllers = 0;
    let MyController = class MyController {
        constructor() {
            createdControllers++;
        }
        foo() {
            return 'bar';
        }
    };
    __decorate([
        rpc_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MyController.prototype, "foo", null);
    MyController = __decorate([
        rpc_1.rpc.controller('test'),
        __metadata("design:paramtypes", [])
    ], MyController);
    const appModule = new app_1.AppModule({
        controllers: [MyController],
        imports: [
            kernel_1.KernelModule.configure({
                broker: { startOnBootstrap: false }
            })
        ]
    });
    const app = new application_1.Application(appModule);
    const applicationServer = app.get(application_server_1.ApplicationServer);
    const injectorContext = app.get(injector_1.InjectorContext);
    const controller = injectorContext.createChildScope('rpc').get(MyController);
    globals_1.expect(controller.foo()).toBe('bar');
    createdControllers = 0;
    globals_1.expect(createdControllers).toBe(0);
    await applicationServer.start();
    {
        const client = applicationServer.createClient();
        const controller = client.controller('test');
        const a = await controller.foo();
        globals_1.expect(a).toBe('bar');
        globals_1.expect(createdControllers).toBe(1);
        client.disconnect();
    }
    {
        const client = applicationServer.createClient();
        const controller = client.controller('test');
        const a = await controller.foo();
        globals_1.expect(a).toBe('bar');
        globals_1.expect(createdControllers).toBe(2);
        client.disconnect();
    }
    await applicationServer.close();
});
//# sourceMappingURL=application-server.spec.js.map