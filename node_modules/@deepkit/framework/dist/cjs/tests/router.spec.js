"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const http_1 = require("@deepkit/http");
const application_1 = require("../src/application");
globals_1.test('router parameters', async () => {
    class Controller {
        string(name) {
            return new http_1.JSONResponse(name);
        }
        number(id) {
            return new http_1.JSONResponse(id);
        }
        boolean(yes) {
            return new http_1.JSONResponse(yes);
        }
        any(path) {
            return new http_1.JSONResponse(path);
        }
    }
    __decorate([
        http_1.http.GET('/user/:name'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "string", null);
    __decorate([
        http_1.http.GET('/user-id/:id'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "number", null);
    __decorate([
        http_1.http.GET('/boolean/:yes'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "boolean", null);
    __decorate([
        http_1.http.GET(':path').regexp('path', '.*'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "any", null);
    const app = application_1.Application.create({ controllers: [Controller] });
    const httpHandler = app.get(http_1.HttpKernel);
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/user/peter')).toBe('peter');
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/user-id/123')).toBe(123);
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/user-id/asd')).toMatchObject({ message: 'Validation failed: id(invalid_number): No valid number given, got NaN' });
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/boolean/1')).toBe(true);
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/boolean/false')).toBe(false);
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/any')).toBe('any');
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/any/path')).toBe('any/path');
});
globals_1.test('router parameterResolver', async () => {
    class User {
        constructor(username) {
            this.username = username;
        }
    }
    class Controller {
        route1(user) {
            return [user.username];
        }
        route2(user) {
            return [user.username];
        }
    }
    __decorate([
        http_1.http.GET('user/:username'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [User]),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "route1", null);
    __decorate([
        http_1.http.GET('group'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [User]),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "route2", null);
    class MyRouteParameterResolver {
        resolve(context) {
            if (!context.parameters.username)
                throw new Error('No :username specified');
            return new User(context.parameters.username);
        }
    }
    const app = application_1.Application.create({
        providers: [http_1.RouteParameterResolverTag.provide(MyRouteParameterResolver)],
        controllers: [Controller],
    });
    const httpHandler = app.get(http_1.HttpKernel);
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/user/peter')).toEqual(['peter']);
    globals_1.expect(await httpHandler.handleRequestFor('GET', '/group')).toEqual('Internal error');
});
//# sourceMappingURL=router.spec.js.map