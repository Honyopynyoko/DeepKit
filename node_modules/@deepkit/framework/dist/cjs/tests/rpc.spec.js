"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const rpc_1 = require("@deepkit/rpc");
const testing_1 = require("../src/testing");
globals_1.test('di', async () => {
    class MyService {
    }
    const MyController = rpc_1.ControllerSymbol('test');
    let Controller = class Controller {
        constructor(connection, service, sessionState) {
            this.connection = connection;
            this.service = service;
            this.sessionState = sessionState;
        }
        hasService() {
            return this.service instanceof MyService;
        }
        hasSession() {
            return this.sessionState.getSession() instanceof rpc_1.Session;
        }
        hasConnection() {
            return this.connection instanceof rpc_1.RpcKernelConnection;
        }
    };
    __decorate([
        rpc_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "hasService", null);
    __decorate([
        rpc_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "hasSession", null);
    __decorate([
        rpc_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "hasConnection", null);
    Controller = __decorate([
        rpc_1.rpc.controller(MyController),
        __metadata("design:paramtypes", [rpc_1.RpcKernelConnection, MyService, rpc_1.SessionState])
    ], Controller);
    const testing = testing_1.createTestingApp({ providers: [MyService], controllers: [Controller] });
    await testing.startServer();
    const client = testing.createRpcClient();
    const controller = client.controller(MyController);
    globals_1.expect(await controller.hasConnection()).toBe(true);
    globals_1.expect(await controller.hasSession()).toBe(true);
    globals_1.expect(await controller.hasService()).toBe(true);
});
//# sourceMappingURL=rpc.spec.js.map