import { AsyncSubscription } from '@deepkit/core-rxjs';
import { Broker } from './broker';
export declare class AppLock {
    protected subscription: AsyncSubscription;
    constructor(subscription: AsyncSubscription);
    release(): Promise<void>;
}
/**
 * An global application lock (across workers, processes, and nodes).
 * It provides a way to acquire locks on the central broker process atomically.
*/
export declare class AppLocker {
    protected broker: Broker;
    constructor(broker: Broker);
    /**
     * Locks the given id. If the lock is already aquired by someone else, it waits max `timeout` seconds.
     *
     * Make sure the call `release` on the result AppLock to get a dead-lock.
     *
     * @param id
     * @param ttl time to live in seconds. The lock automatically releases when ttl is reached. 0 for no limit.
     * @param timeout in seconds. When the lock is already aquired the times defines when to give up aquisiting the lock. 0 for no limit.
     *
     * @example
     * ```typescript
     *
     * class MyController {
     *   constructor(protected appLocker: AppLocker) {
     *   }
     *
     *   async doSomething() {
     *     const lock = this.appLocker.acquireLock('myId);
     *     try {
     *         //do you stuff here
     *     } finally {
     *       //important to have it in finally to not accidantely keep the lock alive forever.
     *       lock.release();
     *     }
     *   }
     * }
     *
     * ```
     */
    acquireLock(id: string, ttl?: number, timeout?: number): Promise<AppLock>;
    /**
     * Tries to acquire the lock and give immediately up when already locked by someone else.
     *
     * @param id
     * @param ttl time to live in seconds. The lock automatically releases when ttl is reached. 0 for no limit.
     */
    tryLock(id: string, ttl?: number): Promise<AppLock | undefined>;
    /**
     * Returns true if the lock is already aquired by someone.
    */
    isLocked(id: string): Promise<boolean>;
}
