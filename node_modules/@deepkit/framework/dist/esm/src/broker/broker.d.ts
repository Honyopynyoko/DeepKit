import { BrokerChannel, BrokerClient, BrokerKernel } from '@deepkit/broker';
import { ClassType } from '@deepkit/core';
import { IdInterface } from '@deepkit/rpc';
import { ClassSchema, FieldDecoratorResult } from '@deepkit/type';
import { NetTcpRpcServer, TcpRpcServer } from '@deepkit/rpc-tcp';
export declare enum EntityChannelMessageType {
    remove = 0,
    patch = 1,
    add = 2
}
interface EntityChannelMessageAdd<T> {
    type: EntityChannelMessageType.add;
    id: string | number;
    item: T;
}
interface EntityChannelMessageRemove<T> {
    type: EntityChannelMessageType.remove;
    ids: (string | number)[];
}
export interface EntityPatches {
    $set?: {
        [path: string]: any;
    };
    $unset?: {
        [path: string]: number;
    };
    $inc?: {
        [path: string]: number;
    };
}
interface EntityChannelMessagePatch<T> {
    type: EntityChannelMessageType.patch;
    id: string | number;
    version: number;
    item: Partial<T>;
    patch: EntityPatches;
}
declare type EntityChannelMessage<T extends IdInterface> = EntityChannelMessageAdd<T> | EntityChannelMessageRemove<T> | EntityChannelMessagePatch<T>;
export declare class EntityBrokerChannel<T extends IdInterface> extends BrokerChannel<EntityChannelMessage<T>> {
    publishAdd(item: T): Promise<undefined>;
    publishRemove(ids: (string | number)[]): Promise<undefined>;
    publishPatch(id: string | number, version: number, patch: EntityPatches, item: Partial<T>): Promise<undefined>;
}
export declare class BaseBroker extends BrokerClient {
    protected getEntityChannelMessageSchema<T>(schema: ClassSchema<T>): FieldDecoratorResult<any>;
    entityChannel<T extends IdInterface>(schemaOrType: ClassSchema<T> | ClassType<T>): EntityBrokerChannel<T>;
}
export declare class Broker extends BaseBroker {
    protected url: string;
    constructor(url: string);
}
export declare class NetBroker extends BaseBroker {
    protected url: string;
    constructor(url: string);
}
export declare class DirectBroker extends BaseBroker {
    constructor(rpcKernel: BrokerKernel);
}
export declare class BrokerServer extends TcpRpcServer {
    protected kernel: BrokerKernel;
    constructor(listen: string);
}
export declare class NetBrokerServer extends NetTcpRpcServer {
    protected kernel: BrokerKernel;
    constructor(listen: string);
}
export {};
