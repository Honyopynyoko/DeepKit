/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { cli, flag } from '@deepkit/app';
import { join } from 'path';
import { readFileSync, unlinkSync } from 'fs';
import { decodeFrameData, decodeFrames } from '@deepkit/framework-debug-api';
import { deserialize } from '@deepkit/bson';
import { kernelConfig } from '../kernel.config';
import { Logger } from '@deepkit/logger';
class Config extends kernelConfig.slice(['varPath', 'debugStorePath']) {
}
let DebugDebugFramesCommand = class DebugDebugFramesCommand {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
    }
    async execute(reset = false) {
        const path = join(this.config.varPath, this.config.debugStorePath);
        if (reset) {
            unlinkSync(join(path, 'frames.bin'));
            unlinkSync(join(path, 'frames-data.bin'));
            this.logger.log('Files removed.');
            return;
        }
        console.log('frames', decodeFrames(readFileSync(join(path, 'frames.bin'))));
        console.log('data', decodeFrameData(readFileSync(join(path, 'frames-data.bin'))).map(v => {
            v.bson = deserialize(v.bson);
            return v;
        }));
    }
};
__decorate([
    __param(0, flag.optional),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Promise)
], DebugDebugFramesCommand.prototype, "execute", null);
DebugDebugFramesCommand = __decorate([
    cli.controller('debug:debug:frames', {}),
    __metadata("design:paramtypes", [Config,
        Logger])
], DebugDebugFramesCommand);
export { DebugDebugFramesCommand };
//# sourceMappingURL=debug-debug-frames.js.map