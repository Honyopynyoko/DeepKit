/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { cli, flag } from '@deepkit/app';
import { ApplicationServiceContainer } from '../application-service-container';
let DebugDIController = class DebugDIController {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
    }
    async execute(scope) {
        const modules = [this.serviceContainer.appModule, ...this.serviceContainer.appModule.getImports()];
        let injectorContext = this.serviceContainer.getRootInjectorContext();
        if (scope) {
            console.log('For scope', scope);
            injectorContext = injectorContext.createChildScope(scope);
        }
        console.log('injectorContext.configuredProviderRegistry', injectorContext.configuredProviderRegistry.calls);
        for (const module of modules) {
            console.log(`Module ${module.getName() || 'root'} DI retriever:`);
            const context = this.serviceContainer.getContextFor(module);
            console.log(injectorContext.getInjector(context.id).retriever.toString());
        }
    }
};
__decorate([
    __param(0, flag.optional),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DebugDIController.prototype, "execute", null);
DebugDIController = __decorate([
    cli.controller('debug:di', {}),
    __metadata("design:paramtypes", [ApplicationServiceContainer])
], DebugDIController);
export { DebugDIController };
//# sourceMappingURL=debug-di.js.map