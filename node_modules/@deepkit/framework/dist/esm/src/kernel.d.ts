import { ProcessLocker } from '@deepkit/core';
import { ApplicationServer, ApplicationServerListener } from './application-server';
import { LiveDatabase } from './database/live-database';
import { DebugRouterController } from './cli/debug-router';
import { DebugDIController } from './cli/debug-di';
import { ServerListenController } from './cli/server-listen';
import { DebugController } from './debug/debug.controller';
import { HttpKernel, HttpListener, Router } from '@deepkit/http';
import { InjectorContext } from '@deepkit/injector';
import { ConsoleTransport, Logger } from '@deepkit/logger';
import { SessionHandler } from './session';
import { WebWorkerFactory } from './worker';
import { Stopwatch } from '@deepkit/stopwatch';
import { DatabaseListener } from './database/database-listener';
import { DatabaseRegistry } from '@deepkit/orm';
import { MigrationCreateController, MigrationDownCommand, MigrationPendingCommand, MigrationProvider, MigrationUpCommand } from '@deepkit/sql/commands';
import { AppModule } from '@deepkit/app';
import { DebugDebugFramesCommand } from './cli/debug-debug-frames';
import { RpcKernelSecurity } from '@deepkit/rpc';
import { AppConfigController } from './cli/app-config';
export declare const KernelModule: AppModule<{
    config: import("@deepkit/app").AppModuleConfig<{
        host: import("@deepkit/type").FieldDecoratorResult<string>;
        port: import("@deepkit/type").FieldDecoratorResult<number>;
        httpsPort: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
        selfSigned: import("@deepkit/type").FieldDecoratorResult<boolean | undefined>;
        keepAliveTimeout: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
        path: import("@deepkit/type").FieldDecoratorResult<string>;
        workers: import("@deepkit/type").FieldDecoratorResult<number>;
        ssl: import("@deepkit/type").FieldDecoratorResult<boolean>;
        sslOptions: import("@deepkit/type").FieldDecoratorResult<any>;
        sslKey: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
        sslCertificate: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
        sslCa: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
        sslCrl: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
        server: import("@deepkit/type").FieldDecoratorResult<any>;
        maxPayload: import("@deepkit/type").FieldDecoratorResult<number | undefined>;
        publicDir: import("@deepkit/type").FieldDecoratorResult<string | undefined>;
        debug: import("@deepkit/type").FieldDecoratorResult<boolean>;
        debugUrl: import("@deepkit/type").FieldDecoratorResult<string>;
        varPath: import("@deepkit/type").FieldDecoratorResult<string>;
        debugStorePath: import("@deepkit/type").FieldDecoratorResult<string>;
        httpLog: import("@deepkit/type").FieldDecoratorResult<boolean>;
        session: import("@deepkit/type").FieldDecoratorResult<any>;
        databases: import("@deepkit/type").FieldDecoratorResult<any[] | undefined>;
        migrateOnStartup: import("@deepkit/type").FieldDecoratorResult<boolean>;
        migrationDir: import("@deepkit/type").FieldDecoratorResult<string>;
    }>;
    providers: (typeof ProcessLocker | typeof ApplicationServer | typeof Router | typeof HttpKernel | typeof WebWorkerFactory | typeof ConsoleTransport | typeof Stopwatch | typeof Logger | typeof RpcKernelSecurity | typeof MigrationProvider | typeof DebugController | {
        provide: typeof DatabaseRegistry;
        deps: (typeof InjectorContext)[];
        useFactory: (ic: any) => DatabaseRegistry;
        scope?: undefined;
    } | {
        provide: typeof LiveDatabase;
        scope: string;
        deps?: undefined;
        useFactory?: undefined;
    } | {
        provide: typeof HttpListener;
        deps?: undefined;
        useFactory?: undefined;
        scope?: undefined;
    } | {
        provide: typeof SessionHandler;
        scope: string;
        deps?: undefined;
        useFactory?: undefined;
    })[];
    workflows: never[];
    listeners: (typeof HttpListener | typeof ApplicationServerListener | typeof DatabaseListener)[];
    controllers: (typeof ServerListenController | typeof DebugRouterController | typeof DebugDIController | typeof DebugDebugFramesCommand | typeof AppConfigController | typeof MigrationUpCommand | typeof MigrationDownCommand | typeof MigrationPendingCommand | typeof MigrationCreateController)[];
    imports: (AppModule<{
        listeners: typeof import("./broker/broker.module").BrokerListener[];
        config: import("@deepkit/app").AppModuleConfig<{
            listen: import("@deepkit/type").FieldDecoratorResult<string>;
            host: import("@deepkit/type").FieldDecoratorResult<string>;
            startOnBootstrap: import("@deepkit/type").FieldDecoratorResult<boolean>;
        }>;
        providers: (typeof import("..").Broker | typeof import("./broker/app-locker").AppLocker | typeof import("..").BrokerServer)[];
        exports: (typeof import("..").Broker | typeof import("./broker/app-locker").AppLocker | typeof import("..").BrokerServer)[];
    }, "broker"> | AppModule<{
        config: import("@deepkit/app").AppModuleConfig<{
            debug: import("@deepkit/type").FieldDecoratorResult<boolean>;
        }>;
        workflows: (import("@deepkit/workflow").WorkflowDefinition<{
            start: typeof import("@deepkit/workflow").WorkflowEvent;
            request: typeof import("@deepkit/http").HttpWorkflowEvent;
            route: typeof import("@deepkit/http").HttpRouteEvent;
            routeNotFound: typeof import("@deepkit/http").HttpWorkflowEvent;
            auth: typeof import("@deepkit/http").HttpAuthEvent;
            resolveParameters: typeof import("@deepkit/http").HttpResolveParametersEvent;
            accessDenied: typeof import("@deepkit/http").HttpAccessDeniedEvent;
            controller: typeof import("@deepkit/http").HttpControllerEvent;
            controllerError: typeof import("@deepkit/http").HttpControllerErrorEvent;
            parametersFailed: typeof import("@deepkit/http").HttpControllerErrorEvent;
            response: typeof import("@deepkit/http").HttpResponseEvent;
        }> & import("@deepkit/workflow").WorkflowDefinitionEvents<{
            start: typeof import("@deepkit/workflow").WorkflowEvent;
            request: typeof import("@deepkit/http").HttpWorkflowEvent;
            route: typeof import("@deepkit/http").HttpRouteEvent;
            routeNotFound: typeof import("@deepkit/http").HttpWorkflowEvent;
            auth: typeof import("@deepkit/http").HttpAuthEvent;
            resolveParameters: typeof import("@deepkit/http").HttpResolveParametersEvent;
            accessDenied: typeof import("@deepkit/http").HttpAccessDeniedEvent;
            controller: typeof import("@deepkit/http").HttpControllerEvent;
            controllerError: typeof import("@deepkit/http").HttpControllerErrorEvent;
            parametersFailed: typeof import("@deepkit/http").HttpControllerErrorEvent;
            response: typeof import("@deepkit/http").HttpResponseEvent;
        }>)[];
    }, "http">)[];
}, "kernel">;
