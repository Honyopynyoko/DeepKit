/// <reference types="node" />
import { BrokerKernel } from '@deepkit/broker';
import { ClassType } from '@deepkit/core';
import { ClassSchema } from '@deepkit/type';
import { Application } from './application';
import { BrokerServer } from './broker/broker';
import { ModuleOptions } from '@deepkit/app';
import { HttpResponse, RequestBuilder } from '@deepkit/http';
import { RpcClient } from '@deepkit/rpc';
export declare class TestHttpResponse extends HttpResponse {
    body: Buffer;
    write(chunk: any, encoding: any, callback?: any): boolean;
    end(chunk: any, encoding?: any, callback?: any): void;
}
export declare class TestingFacade<A extends Application<any>> {
    app: A;
    constructor(app: A);
    startServer(): Promise<void>;
    stopServer(): Promise<void>;
    request(requestBuilder: RequestBuilder): Promise<TestHttpResponse>;
    createRpcClient(): RpcClient;
}
export declare class BrokerMemoryServer extends BrokerServer {
    kernel: BrokerKernel;
    start(): Promise<void>;
    stop(): Promise<void>;
}
/**
 * Creates a new Application instance, but with kernel services in place that work in memory.
 * For example RPC/Broker/HTTP communication without TCP stack. Logger uses MemoryLogger.
 */
export declare function createTestingApp<O extends ModuleOptions>(optionsOrModule: O, entities?: (ClassType | ClassSchema)[]): TestingFacade<Application<O>>;
