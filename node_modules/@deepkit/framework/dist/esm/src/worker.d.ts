/// <reference types="node" />
import { RpcConnectionWriter, RpcKernel, RpcKernelBaseConnection } from '@deepkit/rpc';
import http, { Server } from 'http';
import https from 'https';
import WebSocket from 'ws';
import { HttpKernel, HttpRequest } from '@deepkit/http';
import { InjectorContext } from '@deepkit/injector';
import { RpcControllers } from './application-service-container';
import { SecureContextOptions, TlsOptions } from 'tls';
import { Logger } from '@deepkit/logger';
export interface WebServerOptions {
    host: string;
    /**
     * Defins the port of the http server.
     * If ssl is defined, this port is used for the https server. If you want to have http and https
     * at the same time, use `httpsPort` accordingly.
    */
    port: number;
    varPath: string;
    /**
     * If httpsPort and ssl is defined, then the https server is started additional to the http-server.
     *
     * In a production deployment, you usually want both, http and https server.
     * Set `port: 80` and `httpsPort: 443` to have both.
     */
    httpsPort?: number;
    /**
     * HTTP Keep alive timeout.
     */
    keepAliveTimeout?: number;
    /**
     * When external server should be used. If this is set, all other opptions are ignored.
     */
    server?: Server;
    /**
     * Enables HTTPS.
     * Make sure to pass `sslKey` and `sslCertificate` as well (or use sslOptions).
    */
    ssl: boolean;
    sslKey?: string;
    sslCertificate?: string;
    sslCa?: string;
    sslCrl?: string;
    /**
     * If defined https.createServer is used and all options passed as is to it.
     * Make sure to pass `key` and `cert`, as described in Node's https.createServer() documentation.
     * See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
     */
    sslOptions?: SecureContextOptions & TlsOptions;
    /**
     * When true keys & certificates are created on-the-fly (for development purposes).
     * Should not be used in production.
     */
    selfSigned?: boolean;
}
export declare class WebWorkerFactory {
    protected httpKernel: HttpKernel;
    logger: Logger;
    protected rpcControllers: RpcControllers;
    protected rootScopedContext: InjectorContext;
    constructor(httpKernel: HttpKernel, logger: Logger, rpcControllers: RpcControllers, rootScopedContext: InjectorContext);
    create(id: number, options: WebServerOptions): WebWorker;
    createRpcKernel(): RpcKernel;
}
export declare class WebMemoryWorkerFactory extends WebWorkerFactory {
    create(id: number, options: WebServerOptions): WebMemoryWorker;
}
export declare function createRpcConnection(rootScopedContext: InjectorContext, rpcKernel: RpcKernel, writer: RpcConnectionWriter, request?: HttpRequest): RpcKernelBaseConnection;
export declare class WebWorker {
    readonly id: number;
    logger: Logger;
    httpKernel: HttpKernel;
    rpcKernel: RpcKernel;
    protected rootScopedContext: InjectorContext;
    protected options: WebServerOptions;
    protected wsServer?: WebSocket.Server;
    protected wssServer?: WebSocket.Server;
    protected server?: http.Server | https.Server;
    protected servers?: https.Server;
    constructor(id: number, logger: Logger, httpKernel: HttpKernel, rpcKernel: RpcKernel, rootScopedContext: InjectorContext, options: WebServerOptions);
    start(): void;
    onWsConnection(ws: WebSocket, req: HttpRequest): void;
    close(): void;
}
export declare class WebMemoryWorker extends WebWorker {
    start(): void;
}
