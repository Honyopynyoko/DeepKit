var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { BrokerKernel } from '@deepkit/broker';
import { sleep } from '@deepkit/core';
import { entity, plainToClass, t, uuid } from '@deepkit/type';
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { BehaviorSubject } from 'rxjs';
import { DirectBroker, EntityChannelMessageType } from '../src/broker/broker';
test('entity channel number', async () => {
    const kernel = new BrokerKernel();
    const client = new DirectBroker(kernel);
    let Model = class Model {
        constructor() {
            this.id = 0;
            this.version = 0;
            this.title = '';
        }
    };
    __decorate([
        t,
        __metadata("design:type", Number)
    ], Model.prototype, "id", void 0);
    __decorate([
        t,
        __metadata("design:type", Number)
    ], Model.prototype, "version", void 0);
    __decorate([
        t,
        __metadata("design:type", String)
    ], Model.prototype, "title", void 0);
    Model = __decorate([
        entity.name('model')
    ], Model);
    {
        const subject = new BehaviorSubject(undefined);
        const channel = client.entityChannel(Model);
        await channel.subscribe(v => subject.next(v));
        await channel.publishRemove([23]);
        await sleep(0);
        expect(subject.value).toEqual({ type: EntityChannelMessageType.remove, ids: [23] });
        await channel.publishPatch(23, 5, { $set: { username: true } }, { title: 'asd' });
        await sleep(0);
        expect(subject.value).toEqual({
            type: EntityChannelMessageType.patch,
            id: 23,
            version: 5,
            patch: { $set: { username: true } },
            item: { title: 'asd' }
        });
        await channel.publishAdd(plainToClass(Model, { id: 1243, version: 0, title: 'peter' }));
        await sleep(0);
        expect(subject.value).toEqual({
            type: EntityChannelMessageType.add,
            id: 1243,
            item: { id: 1243, version: 0, title: 'peter' }
        });
    }
});
test('entity channel uuid', async () => {
    const kernel = new BrokerKernel();
    const client = new DirectBroker(kernel);
    let Model = class Model {
        constructor() {
            this.id = uuid();
            this.version = 0;
            this.title = '';
        }
    };
    __decorate([
        t.primary.uuid,
        __metadata("design:type", String)
    ], Model.prototype, "id", void 0);
    __decorate([
        t,
        __metadata("design:type", Number)
    ], Model.prototype, "version", void 0);
    __decorate([
        t,
        __metadata("design:type", String)
    ], Model.prototype, "title", void 0);
    Model = __decorate([
        entity.name('modelUuid')
    ], Model);
    {
        const subject = new BehaviorSubject(undefined);
        const channel = client.entityChannel(Model);
        await channel.subscribe(v => subject.next(v));
        const item = new Model();
        await channel.publishRemove([item.id]);
        await sleep(0);
        expect(subject.value).toEqual({ type: EntityChannelMessageType.remove, ids: [item.id] });
        await channel.publishPatch(item.id, 5, { $set: { username: true } }, { title: 'asd' });
        await sleep(0);
        expect(subject.value).toEqual({
            type: EntityChannelMessageType.patch,
            id: item.id,
            version: 5,
            patch: { $set: { username: true } },
            item: { title: 'asd' }
        });
        await channel.publishAdd(plainToClass(Model, { id: item.id, version: 0, title: 'peter' }));
        await sleep(0);
        expect(subject.value).toEqual({
            type: EntityChannelMessageType.add,
            id: item.id,
            item: { id: item.id, version: 0, title: 'peter' }
        });
    }
});
//# sourceMappingURL=broker.spec.js.map