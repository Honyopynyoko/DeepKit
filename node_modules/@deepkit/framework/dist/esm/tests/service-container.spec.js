var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { ApplicationServiceContainer } from '../src/application-service-container';
import { rpc } from '@deepkit/rpc';
import { AppModule } from '@deepkit/app';
test('controller', () => {
    class MyService {
        constructor(text = 'hello') {
            this.text = text;
        }
        getHello() {
            return this.text;
        }
    }
    let MyController = class MyController {
        constructor(myService) {
            this.myService = myService;
        }
        foo() {
            return this.myService.getHello();
        }
    };
    MyController = __decorate([
        rpc.controller('test'),
        __metadata("design:paramtypes", [MyService])
    ], MyController);
    {
        const myModule = new AppModule({
            providers: [MyService],
            controllers: [MyController],
        });
        const serviceContainer = new ApplicationServiceContainer(myModule);
        const rpcScopedContext = serviceContainer.getRootInjectorContext().createChildScope('rpc');
        const controller = rpcScopedContext.getInjector(0).get(MyController);
        expect(controller).toBeInstanceOf(MyController);
        expect(controller.foo()).toBe('hello');
    }
});
test('controller in module and overwrite service', () => {
    class MyService {
        constructor(text = 'hello') {
            this.text = text;
        }
        getHello() {
            return this.text;
        }
    }
    let MyController = class MyController {
        constructor(myService) {
            this.myService = myService;
        }
        foo() {
            return this.myService.getHello();
        }
    };
    MyController = __decorate([
        rpc.controller('test'),
        __metadata("design:paramtypes", [MyService])
    ], MyController);
    const controllerModule = new AppModule({
        providers: [MyService],
        controllers: [MyController],
        exports: [
            MyService
        ]
    });
    {
        const myModule = new AppModule({
            imports: [controllerModule],
        });
        const serviceContainer = new ApplicationServiceContainer(myModule);
        const rpcScopedContext = serviceContainer.getRootInjectorContext().createChildScope('rpc');
        const controller = rpcScopedContext.get(MyController);
        expect(controller).toBeInstanceOf(MyController);
        expect(controller.foo()).toBe('hello');
    }
    {
        const myModule = new AppModule({
            providers: [
                { provide: MyService, useValue: new MyService('different') }
            ],
            imports: [controllerModule],
        });
        const serviceContainer = new ApplicationServiceContainer(myModule);
        const rpcScopedContext = serviceContainer.getRootInjectorContext().createChildScope('rpc');
        const controller = rpcScopedContext.get(MyController);
        expect(controller).toBeInstanceOf(MyController);
        expect(controller.foo()).toBe('different');
    }
});
//# sourceMappingURL=service-container.spec.js.map