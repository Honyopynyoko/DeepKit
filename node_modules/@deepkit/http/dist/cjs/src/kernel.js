"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpKernel = void 0;
const injector_1 = require("@deepkit/injector");
const router_1 = require("./router");
const event_1 = require("@deepkit/event");
const logger_1 = require("@deepkit/logger");
const model_1 = require("./model");
const net_1 = require("net");
const http_1 = require("./http");
const stopwatch_1 = require("@deepkit/stopwatch");
const fs_1 = require("fs");
let HttpKernel = class HttpKernel {
    constructor(router, eventDispatcher, injectorContext, logger, stopwatch) {
        this.router = router;
        this.eventDispatcher = eventDispatcher;
        this.injectorContext = injectorContext;
        this.logger = logger;
        this.stopwatch = stopwatch;
    }
    async handleRequestFor(method, url, jsonBody) {
        const body = Buffer.from(jsonBody ? JSON.stringify(jsonBody) : '');
        const request = new (class extends model_1.HttpRequest {
            constructor() {
                super(...arguments);
                this.url = url;
                this.method = method;
                this.position = 0;
                this.headers = {
                    'content-type': 'application/json',
                    'content-length': String(body.byteLength),
                };
                this.done = false;
            }
            _read(size) {
                if (this.done) {
                    this.push(null);
                }
                else {
                    this.push(body);
                    this.done = true;
                }
            }
        })(new net_1.Socket());
        let result = 'nothing';
        const response = new (class extends model_1.HttpResponse {
            end(chunk) {
                result = chunk ? chunk.toString() : chunk;
            }
            write(chunk) {
                result = chunk ? chunk.toString() : chunk;
                return true;
            }
        })(request);
        await this.handleRequest(request, response);
        if (result === '' || result === undefined || result === null)
            return result;
        try {
            return JSON.parse(result);
        }
        catch (error) {
            return result;
        }
    }
    async handleRequest(req, res) {
        const httpInjectorContext = this.injectorContext.createChildScope('http', new injector_1.MemoryInjector([
            { provide: model_1.HttpRequest, useValue: req },
            { provide: model_1.HttpResponse, useValue: res },
        ]));
        const frame = this.stopwatch.active ? this.stopwatch.start(req.getUrl(), stopwatch_1.FrameCategory.http, true) : undefined;
        const workflow = http_1.httpWorkflow.create('start', this.eventDispatcher, httpInjectorContext, this.stopwatch);
        try {
            if (frame) {
                frame.data({ url: req.getUrl(), method: req.getMethod(), clientIp: req.getRemoteAddress() });
                await frame.run({}, () => workflow.apply('request', new http_1.HttpRequestEvent(httpInjectorContext, req, res)));
            }
            else {
                await workflow.apply('request', new http_1.HttpRequestEvent(httpInjectorContext, req, res));
            }
        }
        catch (error) {
            if (!res.headersSent)
                res.status(500);
            this.logger.error('HTTP kernel request failed', error);
        }
        finally {
            for (const file of Object.values(req.uploadedFiles)) {
                fs_1.unlink(file.path, () => {
                });
            }
            frame === null || frame === void 0 ? void 0 : frame.data({ responseStatus: res.statusCode });
            frame === null || frame === void 0 ? void 0 : frame.end();
        }
    }
};
HttpKernel = __decorate([
    injector_1.injectable(),
    __metadata("design:paramtypes", [router_1.Router,
        event_1.EventDispatcher,
        injector_1.InjectorContext,
        logger_1.Logger,
        stopwatch_1.Stopwatch])
], HttpKernel);
exports.HttpKernel = HttpKernel;
//# sourceMappingURL=kernel.js.map