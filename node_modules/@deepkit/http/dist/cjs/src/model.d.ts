/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { UploadedFile } from './router';
export declare class HttpResponse extends ServerResponse {
    status(code: number): void;
}
export declare type HttpRequestQuery = {
    [name: string]: string;
};
export declare type HttpRequestResolvedParameters = {
    [name: string]: any;
};
export declare class RequestBuilder {
    protected path: string;
    protected method: string;
    protected contentBuffer: Buffer;
    protected headers: {
        [name: string]: string;
    };
    protected queryPath?: string;
    constructor(path: string, method?: string);
    getUrl(): string;
    build(): HttpRequest;
    header(name: string, value: string | number): this;
    json(body: object): this;
    body(body: string | Buffer): this;
    query(query: any): this;
}
export declare class HttpRequest extends IncomingMessage {
    /**
     * A store that can be used to transport data from guards/listeners to ParameterResolvers/controllers.
     */
    store: {
        [name: string]: any;
    };
    uploadedFiles: {
        [name: string]: UploadedFile;
    };
    static GET(path: string): RequestBuilder;
    static POST(path: string): RequestBuilder;
    static PUT(path: string): RequestBuilder;
    static DELETE(path: string): RequestBuilder;
    getUrl(): string;
    getMethod(): string;
    getRemoteAddress(): string;
}
