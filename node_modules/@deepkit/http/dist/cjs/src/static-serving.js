"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerStaticHttpController = exports.serveStaticListener = void 0;
const decorator_1 = require("./decorator");
const path_1 = require("path");
const fs_1 = require("fs");
const http_1 = require("./http");
const utils_1 = require("./utils");
const core_1 = require("@deepkit/core");
const injector_1 = require("@deepkit/injector");
const send_1 = __importDefault(require("send"));
const event_1 = require("@deepkit/event");
const router_1 = require("./router");
function serveStaticListener(path, localPath = path) {
    var HttpRequestStaticServingListener_1;
    let HttpRequestStaticServingListener = HttpRequestStaticServingListener_1 = class HttpRequestStaticServingListener {
        serve(path, request, response) {
            return new Promise(resolve => {
                const res = send_1.default(request, path, { root: localPath });
                response.once('finish', resolve);
                res.pipe(response);
            });
        }
        onRoute(event) {
            var _a;
            if (event.sent)
                return;
            if (event.route)
                return;
            if (!((_a = event.request.url) === null || _a === void 0 ? void 0 : _a.startsWith(path)))
                return;
            const relativePath = core_1.urlJoin('/', event.url.substr(path.length));
            const finalLocalPath = path_1.join(localPath, relativePath);
            return new Promise(resolve => {
                fs_1.stat(finalLocalPath, (err, stat) => {
                    if (stat && stat.isFile()) {
                        event.routeFound(new router_1.RouteConfig('static', 'GET', event.url, {
                            controller: HttpRequestStaticServingListener_1,
                            methodName: 'serve'
                        }), () => [relativePath, event.request, event.response]);
                    }
                    resolve(undefined);
                });
            });
        }
    };
    __decorate([
        event_1.eventDispatcher.listen(http_1.httpWorkflow.onRoute, 101) //after default route listener at 100
        ,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], HttpRequestStaticServingListener.prototype, "onRoute", null);
    HttpRequestStaticServingListener = HttpRequestStaticServingListener_1 = __decorate([
        injector_1.injectable()
    ], HttpRequestStaticServingListener);
    return HttpRequestStaticServingListener;
}
exports.serveStaticListener = serveStaticListener;
function loadHtml(localPath, path) {
    try {
        let indexHtml = fs_1.readFileSync(path_1.join(localPath, 'index.html')).toString('utf8');
        indexHtml = indexHtml.replace('<base href="/">', `<base href="${path}">`);
        return indexHtml;
    }
    catch (error) {
        return '';
    }
}
/**
 * Serves files from a local directory at `path`. All paths without . are redirected to
 * ${localPath}/index.html.
 */
function registerStaticHttpController(module, path, localPath) {
    path = utils_1.normalizeDirectory(path);
    let indexHtml = '';
    let StaticController = class StaticController {
        serviceApp(any) {
            if (!indexHtml)
                indexHtml = loadHtml(localPath, path);
            return indexHtml ? new http_1.HtmlResponse(indexHtml) : new http_1.HtmlResponse('Index not found', 404);
        }
    };
    __decorate([
        decorator_1.http.GET(':any').regexp('any', '[^\.]*'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], StaticController.prototype, "serviceApp", null);
    StaticController = __decorate([
        decorator_1.http.controller(path)
    ], StaticController);
    module.addController(StaticController);
    module.addListener(serveStaticListener(path, localPath));
}
exports.registerStaticHttpController = registerStaticHttpController;
//# sourceMappingURL=static-serving.js.map