import { HttpRequest, HttpResponse } from './model';
import { InjectorContext } from '@deepkit/injector';
import { Logger } from '@deepkit/logger';
import { RouteConfig, RouteParameterResolverForInjector, Router } from './router';
import { WorkflowEvent } from '@deepkit/workflow';
import { Stopwatch } from '@deepkit/stopwatch';
export declare class Redirect {
    statusCode: number;
    routeName?: string;
    routeParameters?: {
        [name: string]: any;
    };
    url?: string;
    constructor(statusCode?: number);
    static toRoute(routeName: string, parameters?: {
        [name: string]: any;
    }, statusCode?: number): Redirect;
    static toUrl(url: string, statusCode?: number): Redirect;
}
export interface HttpError<T> {
    new (...args: any[]): Error;
    getHttpCode(): T;
}
export declare function HttpError<T extends number>(code: T, defaultMessage?: string): HttpError<T>;
declare const HttpNotFoundError_base: HttpError<404>;
export declare class HttpNotFoundError extends HttpNotFoundError_base {
}
declare const HttpBadRequestError_base: HttpError<400>;
export declare class HttpBadRequestError extends HttpBadRequestError_base {
}
declare const HttpAccessDeniedError_base: HttpError<403>;
export declare class HttpAccessDeniedError extends HttpAccessDeniedError_base {
}
export declare class HttpWorkflowEvent {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    stopped: boolean;
    stopPropagation(): void;
    isStopped(): boolean;
    nextState?: any;
    nextStateEvent?: any;
    clearNext(): void;
    /**
     * @see WorkflowNextEvent.next
     */
    next(nextState: string, event?: any): void;
    /**
     * Whether already a next workflow state has been scheduled.
     */
    hasNext(): boolean;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse);
    get url(): string;
    /**
     * Whether a response has already been sent.
     */
    get sent(): boolean;
    send(response: any): void;
}
export declare const HttpRequestEvent: typeof HttpWorkflowEvent;
export declare const HttpRouteNotFoundEvent: typeof HttpWorkflowEvent;
export declare class HttpWorkflowEventWithRoute extends HttpWorkflowEvent {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    route: RouteConfig;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, route: RouteConfig);
    send(response: any): void;
    accessDenied(): void;
}
export declare class HttpRouteEvent extends HttpWorkflowEvent {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    parameterResolver?: RouteParameterResolverForInjector | undefined;
    route?: RouteConfig | undefined;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, parameterResolver?: RouteParameterResolverForInjector | undefined, route?: RouteConfig | undefined);
    routeFound(route: RouteConfig, parameterResolver: RouteParameterResolverForInjector): void;
    notFound(): void;
}
export declare class HttpAuthEvent extends HttpWorkflowEventWithRoute {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    route: RouteConfig;
    parameterResolver: RouteParameterResolverForInjector;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, route: RouteConfig, parameterResolver: RouteParameterResolverForInjector);
    success(): void;
}
export declare class HttpAccessDeniedEvent extends HttpWorkflowEvent {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    route: RouteConfig;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, route: RouteConfig);
}
export declare class HttpResolveParametersEvent extends HttpWorkflowEventWithRoute {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    parameterResolver: RouteParameterResolverForInjector;
    route: RouteConfig;
    parameters: any[];
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, parameterResolver: RouteParameterResolverForInjector, route: RouteConfig);
    accessDenied(): void;
}
export declare class HttpControllerEvent extends HttpWorkflowEventWithRoute {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    parameters: any[];
    route: RouteConfig;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, parameters: any[], route: RouteConfig);
}
export declare class HttpResponseEvent extends WorkflowEvent {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    result: any;
    route?: RouteConfig | undefined;
    /**
     * The time it took to call the controller action in milliseconds.
     */
    controllerActionTime: number;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, result: any, route?: RouteConfig | undefined);
}
export declare class HttpControllerErrorEvent extends HttpWorkflowEventWithRoute {
    injectorContext: InjectorContext;
    request: HttpRequest;
    response: HttpResponse;
    route: RouteConfig;
    error: Error;
    constructor(injectorContext: InjectorContext, request: HttpRequest, response: HttpResponse, route: RouteConfig, error: Error);
}
export declare const httpWorkflow: import("@deepkit/workflow").WorkflowDefinition<{
    start: typeof WorkflowEvent;
    request: typeof HttpWorkflowEvent;
    route: typeof HttpRouteEvent;
    routeNotFound: typeof HttpWorkflowEvent;
    auth: typeof HttpAuthEvent;
    resolveParameters: typeof HttpResolveParametersEvent;
    accessDenied: typeof HttpAccessDeniedEvent;
    controller: typeof HttpControllerEvent;
    controllerError: typeof HttpControllerErrorEvent;
    parametersFailed: typeof HttpControllerErrorEvent;
    response: typeof HttpResponseEvent;
}> & import("@deepkit/workflow").WorkflowDefinitionEvents<{
    start: typeof WorkflowEvent;
    request: typeof HttpWorkflowEvent;
    route: typeof HttpRouteEvent;
    routeNotFound: typeof HttpWorkflowEvent;
    auth: typeof HttpAuthEvent;
    resolveParameters: typeof HttpResolveParametersEvent;
    accessDenied: typeof HttpAccessDeniedEvent;
    controller: typeof HttpControllerEvent;
    controllerError: typeof HttpControllerErrorEvent;
    parametersFailed: typeof HttpControllerErrorEvent;
    response: typeof HttpResponseEvent;
}>;
export declare class HtmlResponse {
    html: string;
    statusCode?: number | undefined;
    constructor(html: string, statusCode?: number | undefined);
}
export declare class JSONResponse {
    json: any;
    statusCode?: number | undefined;
    constructor(json: any, statusCode?: number | undefined);
}
export declare class HttpListener {
    protected router: Router;
    protected logger: Logger;
    protected stopwatch: Stopwatch;
    constructor(router: Router, logger: Logger, stopwatch: Stopwatch);
    onRequest(event: typeof httpWorkflow.onRequest.event): void;
    onRoute(event: typeof httpWorkflow.onRoute.event): void;
    onRouteForward(event: typeof httpWorkflow.onRoute.event): void;
    routeNotFound(event: typeof httpWorkflow.onRouteNotFound.event): Promise<void>;
    onAuth(event: typeof httpWorkflow.onAuth.event): void;
    onResolveParameters(event: typeof httpWorkflow.onResolveParameters.event): Promise<void>;
    onAccessDenied(event: typeof httpWorkflow.onAccessDenied.event): void;
    onController(event: typeof httpWorkflow.onController.event): Promise<void>;
    onParametersFailed(event: typeof httpWorkflow.onParametersFailed.event): void;
    onControllerError(event: typeof httpWorkflow.onControllerError.event): void;
    /**
     * This happens before the result is sent.
     */
    onResultSerialization(event: typeof httpWorkflow.onResponse.event): Promise<void>;
    onResponse(event: typeof httpWorkflow.onResponse.event): Promise<void>;
}
export {};
