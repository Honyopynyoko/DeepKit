/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { IncomingMessage, ServerResponse } from 'http';
import { Socket } from 'net';
import * as querystring from 'querystring';
export class HttpResponse extends ServerResponse {
    status(code) {
        this.writeHead(code);
        this.end();
    }
}
export class RequestBuilder {
    constructor(path, method = 'GET') {
        this.path = path;
        this.method = method;
        this.contentBuffer = Buffer.alloc(0);
        this.headers = {};
    }
    getUrl() {
        if (this.queryPath) {
            return this.path + '?' + this.queryPath;
        }
        return this.path;
    }
    build() {
        const headers = this.headers;
        const method = this.method;
        const url = this.getUrl();
        const bodyContent = this.contentBuffer;
        return new (class extends HttpRequest {
            constructor() {
                super(...arguments);
                this.url = url;
                this.method = method;
                this.position = 0;
                this.headers = headers;
                this.done = false;
            }
            _read(size) {
                if (this.done) {
                    this.push(null);
                }
                else {
                    this.push(bodyContent);
                    this.done = true;
                }
            }
        })(new Socket());
    }
    header(name, value) {
        this.headers[name] = String(value);
        return this;
    }
    json(body) {
        this.contentBuffer = Buffer.from(JSON.stringify(body), 'utf8');
        this.headers['Content-Type'] = 'application/json';
        this.headers['Content-Length'] = String(this.contentBuffer.byteLength);
        return this;
    }
    body(body) {
        if ('string' === typeof body) {
            this.contentBuffer = Buffer.from(body, 'utf8');
        }
        else {
            this.contentBuffer = body;
        }
        this.headers['Content-Length'] = String(this.contentBuffer.byteLength);
        return this;
    }
    query(query) {
        this.queryPath = querystring.stringify(query);
        return this;
    }
}
export class HttpRequest extends IncomingMessage {
    constructor() {
        super(...arguments);
        /**
         * A store that can be used to transport data from guards/listeners to ParameterResolvers/controllers.
         */
        this.store = {};
        this.uploadedFiles = {};
    }
    static GET(path) {
        return new RequestBuilder(path);
    }
    static POST(path) {
        return new RequestBuilder(path, 'POST');
    }
    static PUT(path) {
        return new RequestBuilder(path, 'PUT');
    }
    static DELETE(path) {
        return new RequestBuilder(path, 'DELETE');
    }
    getUrl() {
        return this.url || '/';
    }
    getMethod() {
        return this.method || 'GET';
    }
    getRemoteAddress() {
        return this.connection.remoteAddress || '';
    }
}
//# sourceMappingURL=model.js.map