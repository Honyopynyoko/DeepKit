import { AppModule } from '@deepkit/app';
export declare const HttpModule: AppModule<{
    config: import("@deepkit/app").AppModuleConfig<{
        debug: import("@deepkit/type").FieldDecoratorResult<boolean>;
    }>;
    workflows: (import("@deepkit/workflow").WorkflowDefinition<{
        start: typeof import("@deepkit/workflow").WorkflowEvent;
        request: typeof import("./http").HttpWorkflowEvent;
        route: typeof import("./http").HttpRouteEvent;
        routeNotFound: typeof import("./http").HttpWorkflowEvent;
        auth: typeof import("./http").HttpAuthEvent;
        resolveParameters: typeof import("./http").HttpResolveParametersEvent;
        accessDenied: typeof import("./http").HttpAccessDeniedEvent;
        controller: typeof import("./http").HttpControllerEvent;
        controllerError: typeof import("./http").HttpControllerErrorEvent;
        parametersFailed: typeof import("./http").HttpControllerErrorEvent;
        response: typeof import("./http").HttpResponseEvent;
    }> & import("@deepkit/workflow").WorkflowDefinitionEvents<{
        start: typeof import("@deepkit/workflow").WorkflowEvent;
        request: typeof import("./http").HttpWorkflowEvent;
        route: typeof import("./http").HttpRouteEvent;
        routeNotFound: typeof import("./http").HttpWorkflowEvent;
        auth: typeof import("./http").HttpAuthEvent;
        resolveParameters: typeof import("./http").HttpResolveParametersEvent;
        accessDenied: typeof import("./http").HttpAccessDeniedEvent;
        controller: typeof import("./http").HttpControllerEvent;
        controllerError: typeof import("./http").HttpControllerErrorEvent;
        parametersFailed: typeof import("./http").HttpControllerErrorEvent;
        response: typeof import("./http").HttpResponseEvent;
    }>)[];
}, "http">;
