/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { http } from './decorator';
import { join } from 'path';
import { readFileSync, stat } from 'fs';
import { HtmlResponse, httpWorkflow } from './http';
import { normalizeDirectory } from './utils';
import { urlJoin } from '@deepkit/core';
import { injectable } from '@deepkit/injector';
import send from 'send';
import { eventDispatcher } from '@deepkit/event';
import { RouteConfig } from './router';
export function serveStaticListener(path, localPath = path) {
    var HttpRequestStaticServingListener_1;
    let HttpRequestStaticServingListener = HttpRequestStaticServingListener_1 = class HttpRequestStaticServingListener {
        serve(path, request, response) {
            return new Promise(resolve => {
                const res = send(request, path, { root: localPath });
                response.once('finish', resolve);
                res.pipe(response);
            });
        }
        onRoute(event) {
            var _a;
            if (event.sent)
                return;
            if (event.route)
                return;
            if (!((_a = event.request.url) === null || _a === void 0 ? void 0 : _a.startsWith(path)))
                return;
            const relativePath = urlJoin('/', event.url.substr(path.length));
            const finalLocalPath = join(localPath, relativePath);
            return new Promise(resolve => {
                stat(finalLocalPath, (err, stat) => {
                    if (stat && stat.isFile()) {
                        event.routeFound(new RouteConfig('static', 'GET', event.url, {
                            controller: HttpRequestStaticServingListener_1,
                            methodName: 'serve'
                        }), () => [relativePath, event.request, event.response]);
                    }
                    resolve(undefined);
                });
            });
        }
    };
    __decorate([
        eventDispatcher.listen(httpWorkflow.onRoute, 101) //after default route listener at 100
        ,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], HttpRequestStaticServingListener.prototype, "onRoute", null);
    HttpRequestStaticServingListener = HttpRequestStaticServingListener_1 = __decorate([
        injectable()
    ], HttpRequestStaticServingListener);
    return HttpRequestStaticServingListener;
}
function loadHtml(localPath, path) {
    try {
        let indexHtml = readFileSync(join(localPath, 'index.html')).toString('utf8');
        indexHtml = indexHtml.replace('<base href="/">', `<base href="${path}">`);
        return indexHtml;
    }
    catch (error) {
        return '';
    }
}
/**
 * Serves files from a local directory at `path`. All paths without . are redirected to
 * ${localPath}/index.html.
 */
export function registerStaticHttpController(module, path, localPath) {
    path = normalizeDirectory(path);
    let indexHtml = '';
    let StaticController = class StaticController {
        serviceApp(any) {
            if (!indexHtml)
                indexHtml = loadHtml(localPath, path);
            return indexHtml ? new HtmlResponse(indexHtml) : new HtmlResponse('Index not found', 404);
        }
    };
    __decorate([
        http.GET(':any').regexp('any', '[^\.]*'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], StaticController.prototype, "serviceApp", null);
    StaticController = __decorate([
        http.controller(path)
    ], StaticController);
    module.addController(StaticController);
    module.addListener(serveStaticListener(path, localPath));
}
//# sourceMappingURL=static-serving.js.map