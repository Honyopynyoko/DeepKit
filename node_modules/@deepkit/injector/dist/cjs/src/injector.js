"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectorContext = exports.setupProvider = exports.ConfiguredProviderRegistry = exports.Context = exports.ScopedContextCache = exports.ScopedContextScopeCaches = exports.ContextRegistry = exports.MemoryInjector = exports.Injector = exports.tokenLabel = exports.DependenciesUnmetError = exports.TokenNotFoundError = exports.CircularDependencyError = exports.injectable = exports.InjectToken = exports.inject = exports.createConfig = exports.injectorReference = exports.InjectorReference = exports.ConfigDefinition = exports.ConfigSlice = exports.ConfigToken = void 0;
const type_1 = require("@deepkit/type");
const provider_1 = require("./provider");
const core_1 = require("@deepkit/core");
const module_1 = require("./module");
class ConfigToken {
    constructor(config, name) {
        this.config = config;
        this.name = name;
    }
}
exports.ConfigToken = ConfigToken;
class ConfigSlice {
    constructor(config, names) {
        //we want that ConfigSlice acts as a regular plain object, which can be serialized at wish.
        Object.defineProperties(this, {
            config: { enumerable: false, value: config },
            names: { enumerable: false, value: names },
            bag: { enumerable: false, writable: true },
        });
        for (const name of names) {
            Object.defineProperty(this, name, {
                enumerable: true,
                get: () => {
                    return this.bag ? this.bag[name] : undefined;
                }
            });
        }
    }
    valueOf() {
        return { ...this };
    }
}
exports.ConfigSlice = ConfigSlice;
class ConfigDefinition {
    constructor(schema) {
        this.schema = schema;
    }
    setModule(module) {
        this.module = module;
    }
    hasModule() {
        return this.module !== undefined;
    }
    getModule() {
        if (!this.module)
            throw new Error('ConfigDefinition module not set. Make sure your config is assigned to a single module. See createModule({config: x}).');
        return this.module;
    }
    getConfigOrDefaults() {
        if (this.module)
            return this.module.getConfig();
        return type_1.jsonSerializer.for(this.schema).validatedDeserialize({});
    }
    all() {
        const self = this;
        return class extends ConfigSlice {
            constructor() {
                super(self, [...self.schema.getProperties()].map(v => v.name));
            }
        };
    }
    slice(names) {
        const self = this;
        return class extends ConfigSlice {
            constructor() {
                super(self, names);
            }
        };
    }
    token(name) {
        return new ConfigToken(this, name);
    }
}
exports.ConfigDefinition = ConfigDefinition;
class InjectorReference {
    constructor(to) {
        this.to = to;
    }
}
exports.InjectorReference = InjectorReference;
function injectorReference(classTypeOrToken) {
    return new InjectorReference(classTypeOrToken);
}
exports.injectorReference = injectorReference;
function createConfig(config) {
    return new ConfigDefinition(type_1.t.schema(config));
}
exports.createConfig = createConfig;
function inject(token) {
    const injectOptions = {
        optional: false,
        root: false,
        token: token,
    };
    const fn = (target, propertyOrMethodName, parameterIndexOrDescriptor) => {
        type_1.FieldDecoratorWrapper((target, property, returnType) => {
            property.data['deepkit/inject'] = injectOptions;
            property.setFromJSType(returnType);
        })(target, propertyOrMethodName, parameterIndexOrDescriptor);
    };
    Object.defineProperty(fn, 'optional', {
        get() {
            injectOptions.optional = true;
            return fn;
        }
    });
    Object.defineProperty(fn, 'root', {
        get() {
            injectOptions.optional = true;
            return fn;
        }
    });
    return fn;
}
exports.inject = inject;
class InjectToken {
    constructor(name) {
        this.name = name;
    }
    toString() {
        return 'InjectToken=' + this.name;
    }
}
exports.InjectToken = InjectToken;
function injectable() {
    return (target) => {
        //don't do anything. This is just used to generate type metadata.
    };
}
exports.injectable = injectable;
class CircularDependencyError extends core_1.CustomError {
}
exports.CircularDependencyError = CircularDependencyError;
class TokenNotFoundError extends core_1.CustomError {
}
exports.TokenNotFoundError = TokenNotFoundError;
class DependenciesUnmetError extends core_1.CustomError {
}
exports.DependenciesUnmetError = DependenciesUnmetError;
function tokenLabel(token) {
    if (token === null)
        return 'null';
    if (token === undefined)
        return 'undefined';
    if (token instanceof provider_1.TagProvider)
        return 'Tag(' + core_1.getClassName(token.provider.provide) + ')';
    if (core_1.isClass(token))
        return core_1.getClassName(token);
    if (core_1.isFunction(token.toString))
        return token.toString();
    return token + '';
}
exports.tokenLabel = tokenLabel;
let CircularDetector = [];
let CircularDetectorResets = [];
class Injector {
    constructor(providers = [], parents = [], injectorContext = new InjectorContext, configuredProviderRegistry = undefined, tagRegistry = new provider_1.TagRegistry()) {
        this.providers = providers;
        this.parents = parents;
        this.injectorContext = injectorContext;
        this.configuredProviderRegistry = configuredProviderRegistry;
        this.tagRegistry = tagRegistry;
        this.circularCheck = true;
        this.resolved = [];
        if (!this.configuredProviderRegistry)
            this.configuredProviderRegistry = injectorContext.configuredProviderRegistry;
        if (this.providers.length)
            this.retriever = this.buildRetriever();
    }
    retriever(injector, token, frontInjector) {
        for (const parent of injector.parents) {
            const v = 'retriever' in parent ? parent.retriever(parent, token, frontInjector) : parent.get(token, frontInjector);
            if (v !== undefined)
                return v;
        }
        return undefined;
    }
    /**
     * Creates a clone of this instance, maintains the provider structure, but drops provider instances.
     * Note: addProviders() in the new fork changes the origin, since providers array is not cloned.
     */
    fork(parents, injectorContext) {
        const injector = new Injector(undefined, parents || this.parents, injectorContext, this.configuredProviderRegistry, this.tagRegistry);
        injector.providers = this.providers;
        injector.retriever = this.retriever;
        return injector;
    }
    /**
     * Changes the provider structure of this injector.
     *
     * Note: This is very performance sensitive. Every time you call this function a new dependency injector function
     * is generated, which si pretty slow. So, it's recommended to create a Injector with providers in the constructor
     * and not change it.
     */
    addProviders(...providers) {
        this.providers.push(...providers);
        this.retriever = this.buildRetriever();
    }
    isRoot() {
        return this.parents.length === 0;
    }
    createFactoryProperty(property, compiler, classTypeVar, argPosition, notFoundFunction) {
        const options = property.data['deepkit/inject'];
        let token = property.resolveClassType;
        const isOptional = options && options.optional;
        if (options && options.token) {
            token = core_1.isFunction(options.token) ? options.token() : options.token;
        }
        if (token instanceof ConfigDefinition) {
            if (token.hasModule()) {
                const module = this.injectorContext.getModule(token.getModule().getName());
                return compiler.reserveVariable('fullConfig', module.getConfig());
            }
            else {
                return compiler.reserveVariable('fullConfig', token.getConfigOrDefaults());
            }
        }
        else if (token instanceof ConfigToken) {
            if (token.config.hasModule()) {
                const module = this.injectorContext.getModule(token.config.getModule().getName());
                const config = module.getConfig();
                return compiler.reserveVariable(token.name, config[token.name]);
            }
            else {
                const config = token.config.getConfigOrDefaults();
                return compiler.reserveVariable(token.name, config[token.name]);
            }
        }
        else if (core_1.isClass(token) && (Object.getPrototypeOf(Object.getPrototypeOf(token)) === ConfigSlice || Object.getPrototypeOf(token) === ConfigSlice)) {
            const value = new token;
            if (!value.bag) {
                if (value.config.hasModule()) {
                    const module = this.injectorContext.getModule(value.config.getModule().getName());
                    value.bag = module.getConfig();
                }
                else {
                    value.bag = value.config.getConfigOrDefaults();
                }
                return compiler.reserveVariable('configSlice', value);
            }
        }
        else if (token === provider_1.TagRegistry) {
            return compiler.reserveVariable('tagRegistry', this.tagRegistry);
        }
        else if (core_1.isPrototypeOfBase(token, provider_1.Tag)) {
            const tokenVar = compiler.reserveVariable('token', token);
            const providers = compiler.reserveVariable('tagRegistry', this.tagRegistry.resolve(token));
            return `new ${tokenVar}(${providers}.map(v => frontInjector.retriever(frontInjector, v, frontInjector)))`;
        }
        else {
            if (token === undefined)
                throw new Error(`Argument type of '${property.name}' at position ${argPosition} is undefined. Imported reflect-metadata correctly? For circular references use @inject(() => T) ${property.name}:T.`);
            const tokenVar = compiler.reserveVariable('token', token);
            const orThrow = isOptional ? '' : `|| ${notFoundFunction}(${classTypeVar}, ${JSON.stringify(property.name)}, ${argPosition}, ${tokenVar})`;
            return `frontInjector.retriever(frontInjector, ${tokenVar}, frontInjector) ${orThrow}`;
        }
        return 'undefined';
    }
    createFactory(compiler, classType) {
        const schema = type_1.getClassSchema(classType);
        const args = [];
        const propertyAssignment = [];
        const classTypeVar = compiler.reserveVariable('classType', classType);
        for (const property of schema.getMethodProperties('constructor')) {
            args.push(this.createFactoryProperty(property, compiler, classTypeVar, args.length, 'constructorParameterNotFound'));
        }
        for (const property of schema.getProperties()) {
            if (!('deepkit/inject' in property.data))
                continue;
            if (property.methodName === 'constructor')
                continue;
            propertyAssignment.push(`v.${property.name} = ${this.createFactoryProperty(property, compiler, classTypeVar, args.length, 'propertyParameterNotFound')};`);
        }
        return `v = new ${classTypeVar}(${args.join(',')});\n${propertyAssignment.join('\n')}`;
    }
    buildRetriever() {
        var _a;
        const compiler = new core_1.CompilerContext();
        const lines = [];
        const resets = [];
        this.resolved = [];
        lines.push(`
            case ${compiler.reserveVariable('injectorContextClassType', InjectorContext)}: return injector.injectorContext;
            case ${compiler.reserveVariable('injectorClassType', Injector)}: return injector;
        `);
        let resolvedIds = 0;
        const normalizedProviders = new Map();
        //make sure that providers that declare the same provider token will be filtered out so that the last will be used.
        for (const provider of this.providers) {
            if (provider instanceof provider_1.TagProvider) {
                normalizedProviders.set(provider, provider);
            }
            else if (provider_1.isValueProvider(provider)) {
                normalizedProviders.set(provider.provide, provider);
            }
            else if (provider_1.isClassProvider(provider)) {
                normalizedProviders.set(provider.provide, provider);
            }
            else if (provider_1.isExistingProvider(provider)) {
                normalizedProviders.set(provider.provide, provider);
            }
            else if (provider_1.isFactoryProvider(provider)) {
                normalizedProviders.set(provider.provide, provider);
            }
            else if (core_1.isClass(provider)) {
                normalizedProviders.set(provider, provider);
            }
        }
        for (let provider of normalizedProviders.values()) {
            const resolvedId = resolvedIds++;
            this.resolved.push(undefined);
            let transient = false;
            let factory = '';
            let token;
            const tagToken = provider instanceof provider_1.TagProvider ? provider : undefined;
            if (provider instanceof provider_1.TagProvider) {
                provider = provider.provider;
            }
            if (provider_1.isValueProvider(provider)) {
                transient = provider.transient === true;
                token = provider.provide;
                const valueVar = compiler.reserveVariable('useValue', provider.useValue);
                factory = `v = ${valueVar};`;
            }
            else if (provider_1.isClassProvider(provider)) {
                transient = provider.transient === true;
                token = provider.provide;
                factory = this.createFactory(compiler, provider.useClass || provider.provide);
            }
            else if (provider_1.isExistingProvider(provider)) {
                transient = provider.transient === true;
                token = provider.provide;
                factory = this.createFactory(compiler, provider.useExisting);
            }
            else if (provider_1.isFactoryProvider(provider)) {
                transient = provider.transient === true;
                token = provider.provide;
                const deps = (provider.deps || []).map(v => `frontInjector.get(${compiler.reserveVariable('dep', v)}, frontInjector)`);
                factory = `v = ${compiler.reserveVariable('factory', provider.useFactory)}(${deps.join(', ')});`;
            }
            else if (core_1.isClass(provider)) {
                token = provider;
                factory = this.createFactory(compiler, provider);
            }
            else {
                throw new Error('Invalid provider');
            }
            if (tagToken)
                token = tagToken;
            const tokenVar = compiler.reserveVariable('token', token);
            const creatingVar = compiler.reserveVariable('creating', false);
            const configuredProviderCalls = (_a = this.configuredProviderRegistry) === null || _a === void 0 ? void 0 : _a.get(token);
            const configureProvider = [];
            if (configuredProviderCalls) {
                for (const call of configuredProviderCalls) {
                    if (call.type === 'stop')
                        break;
                    if (call.type === 'call') {
                        const args = [];
                        const methodName = 'symbol' === typeof call.methodName ? '[' + compiler.reserveVariable('arg', call.methodName) + ']' : call.methodName;
                        for (const arg of call.args) {
                            if (arg instanceof InjectorReference) {
                                args.push(`frontInjector.get(${compiler.reserveVariable('forward', arg.to)})`);
                            }
                            else {
                                args.push(`${compiler.reserveVariable('arg', arg)}`);
                            }
                        }
                        configureProvider.push(`v.${methodName}(${args.join(', ')});`);
                    }
                    if (call.type === 'property') {
                        const property = 'symbol' === typeof call.property ? '[' + compiler.reserveVariable('property', call.property) + ']' : call.property;
                        const value = call.value instanceof InjectorReference ? `frontInjector.get(${compiler.reserveVariable('forward', call.value.to)})` : compiler.reserveVariable('value', call.value);
                        configureProvider.push(`v.${property} = ${value};`);
                    }
                }
            }
            else {
                configureProvider.push('//no custom provider setup');
            }
            resets.push(`${creatingVar} = false;`);
            lines.push(`
                //${tokenLabel(token)}
                case ${tokenVar}: {
                    ${transient ? 'let v;' : `let v = injector.resolved[${resolvedId}]; if (v !== undefined) return v;`}
                    CircularDetector.push(${tokenVar});
                    if (${creatingVar}) {
                        throwCircularDependency();
                    }
                    ${creatingVar} = true;
                    ${factory}
                    ${transient ? '' : `injector.resolved[${resolvedId}] = v;`}
                    ${creatingVar} = false;
                    ${configureProvider.join('\n')}
                    CircularDetector.pop();
                    return v;
                }
            `);
        }
        const parents = [];
        for (let i = 0; i < this.parents.length; i++) {
            let retriever = 'retriever' in this.parents[i] ? `injector.parents[${i}].retriever(injector.parents[${i}], ` : `injector.parents[${i}].get(`;
            parents.push(`
                {
                    const v = ${retriever}token, frontInjector);
                    if (v !== undefined) return v;
                }
            `);
        }
        compiler.context.set('CircularDetector', CircularDetector);
        compiler.context.set('throwCircularDependency', throwCircularDependency);
        compiler.context.set('CircularDetectorResets', CircularDetectorResets);
        compiler.context.set('constructorParameterNotFound', constructorParameterNotFound);
        compiler.context.set('propertyParameterNotFound', propertyParameterNotFound);
        compiler.preCode = `
            CircularDetectorResets.push(() => {
                ${resets.join('\n')};
            });
        `;
        return compiler.build(`
        frontInjector = frontInjector || injector;

        switch (token) {
            ${lines.join('\n')}
        }

        ${parents.join('\n')}

        return undefined;
        `, 'injector', 'token', 'frontInjector');
    }
    get(token, frontInjector) {
        const v = this.retriever(this, token, frontInjector || this);
        if (v !== undefined)
            return v;
        for (const reset of CircularDetectorResets)
            reset();
        throw new TokenNotFoundError(`Could not resolve injector token ${tokenLabel(token)}`);
    }
}
exports.Injector = Injector;
function constructorParameterNotFound(classType, name, position, token) {
    const argsCheck = [];
    for (let i = 0; i < position - 1; i++)
        argsCheck.push('✓');
    argsCheck.push('?');
    for (const reset of CircularDetectorResets)
        reset();
    throw new DependenciesUnmetError(`Unknown constructor argument ${name} of ${core_1.getClassName(classType)}(${argsCheck.join(', ')}). Make sure '${tokenLabel(token)}' is provided.`);
}
function propertyParameterNotFound(classType, name, position, token) {
    for (const reset of CircularDetectorResets)
        reset();
    throw new DependenciesUnmetError(`Unknown property parameter ${name} of ${core_1.getClassName(classType)}. Make sure '${tokenLabel(token)}' is provided.`);
}
function throwCircularDependency() {
    const path = CircularDetector.map(tokenLabel).join(' -> ');
    CircularDetector.length = 0;
    for (const reset of CircularDetectorResets)
        reset();
    throw new CircularDependencyError(`Circular dependency found ${path}`);
}
class MemoryInjector extends Injector {
    constructor(providers) {
        super();
        this.providers = providers;
    }
    fork(parents) {
        return this;
    }
    retriever(injector, token) {
        for (const p of this.providers) {
            if (p.provide === token)
                return 'useFactory' in p ? p.useFactory() : p.useValue;
        }
    }
    get(token, frontInjector) {
        const result = this.retriever(this, token);
        if (result === undefined)
            throw new TokenNotFoundError(`Could not resolve injector token ${tokenLabel(token)}`);
        return result;
    }
}
exports.MemoryInjector = MemoryInjector;
class ContextRegistry {
    constructor() {
        this.contexts = [];
    }
    get size() {
        return this.contexts.length;
    }
    get(id) {
        return this.contexts[id];
    }
    set(id, value) {
        this.contexts[id] = value;
    }
}
exports.ContextRegistry = ContextRegistry;
class ScopedContextScopeCaches {
    constructor(size) {
        this.size = size;
        this.caches = {};
    }
    getCache(scope) {
        let cache = this.caches[scope];
        if (!cache) {
            cache = new ScopedContextCache(this.size);
            this.caches[scope] = cache;
        }
        return cache;
    }
}
exports.ScopedContextScopeCaches = ScopedContextScopeCaches;
class ScopedContextCache {
    constructor(size) {
        this.size = size;
        this.injectors = new Array(this.size);
    }
    get(contextId) {
        return this.injectors[contextId];
    }
    set(contextId, injector) {
        this.injectors[contextId] = injector;
    }
}
exports.ScopedContextCache = ScopedContextCache;
class Context {
    constructor(module, id, parent) {
        this.module = module;
        this.id = id;
        this.parent = parent;
        this.providers = [];
    }
}
exports.Context = Context;
class ConfiguredProviderRegistry {
    constructor() {
        this.calls = new Map();
    }
    add(token, ...newCalls) {
        this.get(token).push(...newCalls);
    }
    get(token) {
        let calls = this.calls.get(token);
        if (!calls) {
            calls = [];
            this.calls.set(token, calls);
        }
        return calls;
    }
    clone() {
        const c = new ConfiguredProviderRegistry;
        for (const [token, calls] of this.calls.entries()) {
            c.calls.set(token, calls.slice());
        }
        return c;
    }
}
exports.ConfiguredProviderRegistry = ConfiguredProviderRegistry;
/**
 * Returns a configuration object that reflects the API of the given ClassType or token. Each call
 * is scheduled and executed once the provider has been created by the dependency injection container.
 */
function setupProvider(classTypeOrToken, registry) {
    const proxy = new Proxy({}, {
        get(target, prop) {
            return (...args) => {
                registry.add(classTypeOrToken, { type: 'call', methodName: prop, args: args });
                return proxy;
            };
        },
        set(target, prop, value) {
            registry.add(classTypeOrToken, { type: 'property', property: prop, value: value });
            return true;
        }
    });
    return proxy;
}
exports.setupProvider = setupProvider;
class InjectorContext {
    constructor(contextManager = new ContextRegistry, scope = 'module', configuredProviderRegistry = new ConfiguredProviderRegistry, parent = undefined, additionalInjectorParent = undefined, modules = {}, scopeCaches, tagRegistry = new provider_1.TagRegistry()) {
        this.contextManager = contextManager;
        this.scope = scope;
        this.configuredProviderRegistry = configuredProviderRegistry;
        this.parent = parent;
        this.additionalInjectorParent = additionalInjectorParent;
        this.modules = modules;
        this.tagRegistry = tagRegistry;
        this.injectors = new Array(this.contextManager.contexts.length);
        this.scopeCaches = scopeCaches || new ScopedContextScopeCaches(this.contextManager.size);
        this.cache = this.scopeCaches.getCache(this.scope);
    }
    getModule(name) {
        if (!this.modules[name])
            throw new Error(`No Module with name ${name} registered`);
        return this.modules[name];
    }
    registerModule(module, config) {
        if (this.modules[module.getName()])
            throw new Error(`Module ${module.getName()} already registered`);
        if (config)
            config.setModule(module);
        this.modules[module.getName()] = module;
        for (const [provider, calls] of module.getConfiguredProviderRegistry().calls) {
            this.configuredProviderRegistry.add(provider, ...calls);
        }
    }
    /**
     * Returns a configuration object that reflects the API of the given ClassType or token. Each call
     * is scheduled and executed once the provider has been created by the dependency injection container.
     */
    setupProvider(classTypeOrToken) {
        return setupProvider(classTypeOrToken, this.configuredProviderRegistry);
    }
    getModuleNames() {
        return Object.keys(this.modules);
    }
    static forProviders(providers) {
        const registry = new ContextRegistry();
        const context = new Context(new module_1.InjectorModule('', {}), 0);
        registry.set(0, context);
        context.providers.push(...providers);
        return new InjectorContext(registry);
    }
    getInjector(contextId) {
        let injector = this.injectors[contextId];
        if (injector)
            return injector;
        const parents = [];
        parents.push(this.parent ? this.parent.getInjector(contextId) : new Injector());
        if (this.additionalInjectorParent)
            parents.push(this.additionalInjectorParent.fork(undefined, this));
        const context = this.contextManager.get(contextId);
        if (context.parent)
            parents.push(this.getInjector(context.parent.id));
        injector = this.cache.get(contextId);
        if (injector) {
            //we have one from cache. Clear it, and return
            injector = injector.fork(parents, this);
            return this.injectors[contextId] = injector;
        }
        const providers = provider_1.getProviders(context.providers, this.scope);
        injector = new Injector(providers, parents, this, this.configuredProviderRegistry, this.tagRegistry);
        this.injectors[contextId] = injector;
        this.cache.set(contextId, injector);
        return injector;
    }
    get(token, frontInjector) {
        const context = typeof token === 'object' || typeof token === 'function' ? token[InjectorContext.contextSymbol] : undefined;
        const injector = this.getInjector(context ? context.id : 0);
        return injector.get(token, frontInjector);
    }
    createChildScope(scope, additionalInjectorParent) {
        return new InjectorContext(this.contextManager, scope, this.configuredProviderRegistry, this, additionalInjectorParent, this.modules, this.scopeCaches, this.tagRegistry);
    }
}
exports.InjectorContext = InjectorContext;
InjectorContext.contextSymbol = Symbol('context');
//# sourceMappingURL=injector.js.map