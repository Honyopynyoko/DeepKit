"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProviders = exports.isInjectionProvider = exports.isFactoryProvider = exports.isExistingProvider = exports.isClassProvider = exports.isValueProvider = exports.isScopedProvider = exports.Tag = exports.TagProvider = exports.TagRegistry = void 0;
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
const core_1 = require("@deepkit/core");
class TagRegistry {
    constructor(tags = []) {
        this.tags = tags;
    }
    resolve(tag) {
        return this.tags.filter(v => v.tag instanceof tag);
    }
}
exports.TagRegistry = TagRegistry;
class TagProvider {
    constructor(provider, tag) {
        this.provider = provider;
        this.tag = tag;
    }
}
exports.TagProvider = TagProvider;
class Tag {
    constructor(services = []) {
        this.services = services;
    }
    createTagProvider(provider) {
        return new TagProvider(provider, this);
    }
    static provide(provider) {
        const t = new this;
        if (core_1.isClass(provider)) {
            return t.createTagProvider({ provide: provider });
        }
        return t.createTagProvider(provider);
    }
}
exports.Tag = Tag;
function isScopedProvider(obj) {
    return obj.provide && obj.hasOwnProperty('scope');
}
exports.isScopedProvider = isScopedProvider;
function isValueProvider(obj) {
    return obj.provide && obj.hasOwnProperty('useValue');
}
exports.isValueProvider = isValueProvider;
function isClassProvider(obj) {
    return obj.provide && !isValueProvider(obj) && !isExistingProvider(obj) && !isFactoryProvider(obj);
}
exports.isClassProvider = isClassProvider;
function isExistingProvider(obj) {
    return obj.provide && obj.hasOwnProperty('useExisting');
}
exports.isExistingProvider = isExistingProvider;
function isFactoryProvider(obj) {
    return obj.provide && obj.hasOwnProperty('useFactory');
}
exports.isFactoryProvider = isFactoryProvider;
function isInjectionProvider(obj) {
    return isValueProvider(obj) || isClassProvider(obj) || isExistingProvider(obj) || isFactoryProvider(obj);
}
exports.isInjectionProvider = isInjectionProvider;
function getProviders(providers, requestScope) {
    const result = [];
    function normalize(provider) {
        if (core_1.isClass(provider)) {
            return provider;
        }
        return provider;
    }
    for (const provider of providers) {
        if (core_1.isClass(provider)) {
            if (requestScope === 'module')
                result.push(provider);
            continue;
        }
        if (core_1.isClass(provider)) {
            if (requestScope === 'module')
                result.push(provider);
            continue;
        }
        const scope = isScopedProvider(provider) ? provider.scope : 'module';
        if (scope === requestScope) {
            result.push(normalize(provider));
        }
    }
    return result;
}
exports.getProviders = getProviders;
//# sourceMappingURL=provider.js.map