"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.a = void 0;
const globals_1 = require("@jest/globals");
const type_1 = require("@deepkit/type");
require("reflect-metadata");
const injector_1 = require("../src/injector");
const module_1 = require("../src/module");
exports.a = 'asd';
globals_1.test('injector', () => {
    class Connection {
    }
    let MyServer = class MyServer {
        constructor(connection) {
            this.connection = connection;
            globals_1.expect(connection).toBeInstanceOf(Connection);
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    const injector = new injector_1.Injector([MyServer, Connection]);
    globals_1.expect(injector.get(Connection)).toBeInstanceOf(Connection);
    globals_1.expect(injector.get(MyServer)).toBeInstanceOf(MyServer);
});
globals_1.test('injector key', () => {
    let MyServer = class MyServer {
        constructor(foo) {
            this.foo = foo;
            globals_1.expect(foo).toBe('bar');
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject('foo')),
        __metadata("design:paramtypes", [String])
    ], MyServer);
    const injector = new injector_1.Injector([MyServer, { provide: 'foo', useValue: 'bar' }]);
    globals_1.expect(injector.get('foo')).toBe('bar');
    globals_1.expect(injector.get(MyServer)).toBeInstanceOf(MyServer);
});
globals_1.test('injector transient', () => {
    class Connection {
    }
    let MyServer = class MyServer {
        constructor(connection) {
            this.connection = connection;
            globals_1.expect(connection).toBeInstanceOf(Connection);
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    const injector = new injector_1.Injector([MyServer, { provide: Connection, transient: true }]);
    const c1 = injector.get(Connection);
    const c2 = injector.get(Connection);
    globals_1.expect(c1).toBeInstanceOf(Connection);
    globals_1.expect(c2).toBeInstanceOf(Connection);
    globals_1.expect(c1 !== c2).toBe(true);
    const s1 = injector.get(MyServer);
    const s2 = injector.get(MyServer);
    globals_1.expect(s1).toBeInstanceOf(MyServer);
    globals_1.expect(s2).toBeInstanceOf(MyServer);
    globals_1.expect(s1.connection).toBeInstanceOf(Connection);
    globals_1.expect(s2.connection).toBeInstanceOf(Connection);
    globals_1.expect(s1 === s2).toBe(true);
    globals_1.expect(s1.connection === s2.connection).toBe(true);
    globals_1.expect(s1.connection !== c1).toBe(true);
    globals_1.expect(s2.connection !== c2).toBe(true);
});
globals_1.test('injector property injection', () => {
    class Connection {
    }
    let MyServer = class MyServer {
        constructor(name) {
            this.name = name;
        }
    };
    __decorate([
        injector_1.inject(),
        __metadata("design:type", Connection)
    ], MyServer.prototype, "connection", void 0);
    MyServer = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject('name')),
        __metadata("design:paramtypes", [String])
    ], MyServer);
    const injector = new injector_1.Injector([MyServer, Connection, { provide: 'name', useValue: 'peter' }]);
    const s = injector.get(MyServer);
    globals_1.expect(s.connection).toBeInstanceOf(Connection);
    globals_1.expect(s.name).toBe('peter');
});
globals_1.test('injector overwrite token', () => {
    class Connection {
    }
    class Connection2 extends Connection {
    }
    let MyServer = class MyServer {
        constructor(connection) {
            this.connection = connection;
            globals_1.expect(connection).toBeInstanceOf(Connection2);
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject(Connection2)),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    {
        const injector = new injector_1.Injector([MyServer, Connection, Connection2]);
        globals_1.expect(injector.get(Connection)).toBeInstanceOf(Connection);
        globals_1.expect(injector.get(MyServer)).toBeInstanceOf(MyServer);
    }
});
globals_1.test('injector unmet dependency', () => {
    class Connection {
    }
    let MyServer = class MyServer {
        constructor(connection) {
            this.connection = connection;
            globals_1.expect(connection).toBeUndefined();
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    {
        const injector = new injector_1.Injector([MyServer]);
        globals_1.expect(() => injector.get(Connection)).toThrow('Could not resolve injector token Connection');
        globals_1.expect(() => injector.get(MyServer)).toThrow(`Unknown constructor argument connection of MyServer(?). Make sure 'Connection' is provided`);
    }
});
globals_1.test('injector optional dependency', () => {
    class Connection {
    }
    let MyServer = class MyServer {
        constructor(connection) {
            this.connection = connection;
            globals_1.expect(connection).toBeUndefined();
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject().optional),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    {
        const injector = new injector_1.Injector([MyServer]);
        globals_1.expect(() => injector.get(Connection)).toThrow('Could not resolve injector token Connection');
        globals_1.expect(injector.get(MyServer)).toBeInstanceOf(MyServer);
    }
});
globals_1.test('injector overwrite provider', () => {
    class Connection {
    }
    class Connection2 extends Connection {
    }
    let MyServer = class MyServer {
        constructor(connection) {
            this.connection = connection;
            globals_1.expect(connection).toBeInstanceOf(Connection2);
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    {
        const injector = new injector_1.Injector([MyServer, {
                provide: Connection, useClass: Connection2
            }]);
        globals_1.expect(injector.get(Connection)).toBeInstanceOf(Connection2);
        globals_1.expect(injector.get(MyServer)).toBeInstanceOf(MyServer);
    }
});
globals_1.test('injector direct circular dependency', () => {
    let MyServer = class MyServer {
        constructor(myServer) {
            this.myServer = myServer;
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [MyServer])
    ], MyServer);
    {
        const injector = new injector_1.Injector([MyServer]);
        globals_1.expect(() => injector.get(MyServer)).toThrow(injector_1.CircularDependencyError);
    }
});
globals_1.test('injector circular dependency', () => {
    let Connection = class Connection {
        constructor(myServer) {
            globals_1.expect(myServer).not.toBeUndefined();
            globals_1.expect(myServer).toBeInstanceOf(MyServer);
        }
    };
    Connection = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject(() => MyServer)),
        __metadata("design:paramtypes", [Object])
    ], Connection);
    let MyServer = class MyServer {
        constructor(connection) {
            globals_1.expect(connection).not.toBeUndefined();
            globals_1.expect(connection).toBeInstanceOf(Connection);
        }
    };
    MyServer = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Connection])
    ], MyServer);
    {
        const injector = new injector_1.Injector([MyServer, Connection]);
        globals_1.expect(() => injector.get(MyServer)).toThrow(injector_1.CircularDependencyError);
        globals_1.expect(() => injector.get(MyServer)).toThrow('Circular dependency found MyServer -> Connection -> MyServer');
    }
});
globals_1.test('injector factory', () => {
    class Service {
    }
    {
        const injector = new injector_1.Injector([{ provide: Service, useFactory: () => new Service() }]);
        const s1 = injector.get(Service);
        globals_1.expect(s1).toBeInstanceOf(Service);
        const s2 = injector.get(Service);
        globals_1.expect(s2).toBeInstanceOf(Service);
        globals_1.expect(s2).toBe(s1);
    }
});
globals_1.test('injector stack parent', () => {
    const i1 = new injector_1.Injector([
        { provide: 'level', deps: ['deep1'], useFactory: (d) => d },
        { provide: 'level2', deps: ['deep2'], useFactory: (d) => d },
    ]);
    const i2 = new injector_1.Injector([{ provide: 'deep1', useValue: 2 }], [i1]);
    const i3 = new injector_1.Injector([{ provide: 'deep2', useValue: 3 }], [i2]);
    globals_1.expect(i2.get('level')).toBe(2);
    globals_1.expect(i3.get('level')).toBe(2);
    globals_1.expect(() => i2.get('level2')).toThrow('Could not resolve injector token deep2');
    globals_1.expect(i3.get('level2')).toBe(3);
});
globals_1.test('injector stack parent fork', () => {
    const i1 = new injector_1.Injector([
        { provide: 'level', deps: ['deep1'], useFactory: (d) => d },
        { provide: 'level2', deps: ['deep2'], useFactory: (d) => d },
    ]);
    const i2 = new injector_1.Injector([{ provide: 'deep1', useValue: 2 }], [i1]).fork();
    const i3 = new injector_1.Injector([{ provide: 'deep2', useValue: 3 }], [i2]).fork();
    globals_1.expect(i2.get('level')).toBe(2);
    globals_1.expect(i3.get('level')).toBe(2);
    globals_1.expect(() => i2.get('level2')).toThrow('Could not resolve injector token deep2');
    globals_1.expect(i3.get('level2')).toBe(3);
});
globals_1.test('injector config', () => {
    const FullConfig = injector_1.createConfig({
        debug: type_1.t.boolean.default(false)
    });
    class ServiceConfig extends FullConfig.slice(['debug']) {
    }
    let MyService = class MyService {
        constructor(config) {
            this.config = config;
        }
    };
    MyService = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [ServiceConfig])
    ], MyService);
    let MyService2 = class MyService2 {
        constructor(config) {
            this.config = config;
        }
    };
    MyService2 = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject(FullConfig)),
        __metadata("design:paramtypes", [Object])
    ], MyService2);
    let MyService3 = class MyService3 {
        constructor(config) {
            this.config = config;
        }
    };
    MyService3 = __decorate([
        injector_1.injectable(),
        __param(0, injector_1.inject(FullConfig.all())),
        __metadata("design:paramtypes", [Object])
    ], MyService3);
    class Slice extends FullConfig.slice(['debug']) {
    }
    let MyService4 = class MyService4 {
        constructor(config) {
            this.config = config;
        }
    };
    MyService4 = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [Slice])
    ], MyService4);
    {
        const i1 = new injector_1.Injector([MyService, MyService2, MyService3, MyService4], []);
        globals_1.expect(i1.get(MyService).config.debug).toBe(false);
        globals_1.expect(i1.get(MyService2).config.debug).toBe(false);
        globals_1.expect(i1.get(MyService3).config.debug).toBe(false);
        globals_1.expect(i1.get(MyService4).config.debug).toBe(false);
    }
    {
        const myModule = new module_1.InjectorModule('asd', { debug: true });
        const injectorContext = new injector_1.InjectorContext();
        injectorContext.registerModule(myModule, FullConfig);
        const i1 = new injector_1.Injector([MyService, MyService2, MyService3, MyService4], [], injectorContext);
        globals_1.expect(i1.get(MyService).config.debug).toBe(true);
        globals_1.expect(i1.get(MyService2).config.debug).toBe(true);
        globals_1.expect(i1.get(MyService3).config.debug).toBe(true);
        globals_1.expect(i1.get(MyService4).config.debug).toBe(true);
    }
});
globals_1.test('setup provider', () => {
    class MyService {
        constructor() {
            this.transporter = [];
        }
        addTransporter(t) {
            this.transporter.push(t);
        }
    }
    {
        const injectorContext = new injector_1.InjectorContext();
        const i1 = new injector_1.Injector([MyService], [], injectorContext);
        globals_1.expect(i1.get(MyService).transporter).toEqual([]);
    }
    {
        const injectorContext = new injector_1.InjectorContext();
        injectorContext.setupProvider(MyService).addTransporter('a');
        injectorContext.setupProvider(MyService).addTransporter('b');
        globals_1.expect(injectorContext.configuredProviderRegistry.get(MyService).length).toBe(2);
        const i1 = new injector_1.Injector([MyService], [], injectorContext);
        globals_1.expect(i1.get(MyService).transporter).toEqual(['a', 'b']);
    }
    {
        const injectorContext = new injector_1.InjectorContext();
        injectorContext.setupProvider(MyService).transporter = ['a'];
        injectorContext.setupProvider(MyService).transporter = ['a', 'b', 'c'];
        globals_1.expect(injectorContext.configuredProviderRegistry.get(MyService).length).toBe(2);
        const i1 = new injector_1.Injector([MyService], [], injectorContext);
        globals_1.expect(i1.get(MyService).transporter).toEqual(['a', 'b', 'c']);
    }
});
globals_1.test('injector fork', () => {
    class MyService {
    }
    const i1 = new injector_1.Injector([MyService]);
    const s1 = i1.get(MyService);
    globals_1.expect(s1).toBeInstanceOf(MyService);
    const i2 = i1.fork();
    const s2 = i2.get(MyService);
    globals_1.expect(s2).toBeInstanceOf(MyService);
    globals_1.expect(s2).not.toBe(s1);
});
//# sourceMappingURL=injector.spec.js.map