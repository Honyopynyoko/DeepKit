var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { injectable, InjectorContext } from '../src/injector';
test('context fork', () => {
    let databaseConstructed = 0;
    class Database {
        constructor() {
            databaseConstructed++;
        }
    }
    let connectionConstructed = 0;
    let Connection = class Connection {
        constructor(db) {
            connectionConstructed++;
            expect(db).toBeInstanceOf(Database);
        }
    };
    Connection = __decorate([
        injectable(),
        __metadata("design:paramtypes", [Database])
    ], Connection);
    const context = InjectorContext.forProviders([
        Database,
        { provide: Connection, scope: 'http' },
    ]);
    expect(context.get(Database)).toBeInstanceOf(Database);
    expect(databaseConstructed).toBe(1);
    expect(context.get(Database)).toBeInstanceOf(Database);
    expect(databaseConstructed).toBe(1);
    {
        const httpContext = context.createChildScope('http');
        expect(httpContext.get(Connection)).toBeInstanceOf(Connection);
        expect(databaseConstructed).toBe(1);
        expect(connectionConstructed).toBe(1);
        expect(httpContext.get(Connection)).toBeInstanceOf(Connection);
        expect(databaseConstructed).toBe(1);
        expect(connectionConstructed).toBe(1);
    }
    {
        const httpContext = context.createChildScope('http');
        expect(httpContext.get(Connection)).toBeInstanceOf(Connection);
        expect(databaseConstructed).toBe(1);
        expect(connectionConstructed).toBe(2);
        expect(httpContext.get(Connection)).toBeInstanceOf(Connection);
        expect(databaseConstructed).toBe(1);
        expect(connectionConstructed).toBe(2);
    }
});
test('injector scoped setup provider', () => {
    class MyService {
        set(value) {
            this.value = value;
        }
    }
    class MySubService extends MyService {
    }
    const context = InjectorContext.forProviders([MyService, { provide: MySubService, scope: 'rpc' }]);
    context.configuredProviderRegistry.add(MyService, { type: 'call', methodName: 'set', args: ['foo'] });
    context.configuredProviderRegistry.add(MySubService, { type: 'call', methodName: 'set', args: ['foo'] });
    {
        const s = context.getInjector(0).get(MyService);
        expect(s.value).toBe('foo');
    }
    const sub = context.createChildScope('rpc');
    {
        const s = sub.getInjector(0).get(MySubService);
        expect(s.value).toBe('foo');
    }
});
//# sourceMappingURL=injector-context.spec.js.map