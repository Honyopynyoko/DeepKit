import { ClassType } from '@deepkit/core';
export declare enum LoggerLevel {
    none = 0,
    alert = 1,
    error = 2,
    warning = 3,
    log = 4,
    info = 5,
    debug = 6
}
export declare class ConsoleTransport implements LoggerTransport {
    write(message: string, level: LoggerLevel): void;
    supportsColor(): boolean;
}
export interface LoggerTransport {
    write(message: string, level: LoggerLevel): void;
    supportsColor(): boolean;
}
export interface LoggerFormatter {
    format(message: string, level: LoggerLevel): string;
}
export declare class ColorFormatter implements LoggerFormatter {
    static colors: string[];
    format(message: string, level: LoggerLevel): string;
}
export declare class RemoveColorFormatter implements LoggerFormatter {
    format(message: string, level: LoggerLevel): string;
}
export declare class TimestampFormatter implements LoggerFormatter {
    format(message: string, level: LoggerLevel): string;
}
export interface LoggerInterface {
    level: LoggerLevel;
    scoped(name: string): LoggerInterface;
    is(level: LoggerLevel): boolean;
    alert(...message: any[]): void;
    error(...message: any[]): void;
    warning(...message: any[]): void;
    log(...message: any[]): void;
    info(...message: any[]): void;
    debug(...message: any[]): void;
}
export declare class ScopedLogger implements LoggerInterface {
    protected parent: Logger;
    protected scope: string;
    constructor(parent: Logger, scope: string);
    scoped(name: string): LoggerInterface;
    get level(): LoggerLevel;
    set level(level: LoggerLevel);
    is(level: LoggerLevel): boolean;
    alert(...message: any[]): void;
    error(...message: any[]): void;
    warning(...message: any[]): void;
    log(...message: any[]): void;
    info(...message: any[]): void;
    debug(...message: any[]): void;
}
export declare class Logger implements LoggerInterface {
    protected transport: LoggerTransport[];
    protected formatter: LoggerFormatter[];
    protected colorFormatter: ColorFormatter;
    protected removeColorFormatter: RemoveColorFormatter;
    level: LoggerLevel;
    scopedLevel: {
        [scope: string]: LoggerLevel;
    };
    protected scopes: {
        [scope: string]: LoggerInterface;
    };
    constructor(transport?: LoggerTransport[], formatter?: LoggerFormatter[]);
    scoped(name: string): LoggerInterface;
    addTransport(transport: LoggerTransport): void;
    removeTransport(transport: LoggerTransport): void;
    hasFormatter(formatterType: ClassType<LoggerFormatter>): boolean;
    addFormatter(formatter: LoggerFormatter): void;
    protected format(message: string, level: LoggerLevel): string;
    is(level: LoggerLevel): boolean;
    protected send(messages: any[], level: LoggerLevel): void;
    alert(...message: any[]): void;
    error(...message: any[]): void;
    warning(...message: any[]): void;
    log(...message: any[]): void;
    info(...message: any[]): void;
    debug(...message: any[]): void;
}
