import { ConnectionRequest, MongoConnection, MongoConnectionPool } from './connection';
import { ClassSchema } from '@deepkit/type';
import { ClassType } from '@deepkit/core';
import { Command } from './command/command';
import { MongoClientConfig } from './config';
export declare class MongoClient {
    protected inCloseProcedure: boolean;
    readonly config: MongoClientConfig;
    protected connectionPool: MongoConnectionPool;
    constructor(connectionString: string);
    resolveCollectionName(schema: ClassSchema | ClassType): string;
    connect(): Promise<void>;
    close(): void;
    dropDatabase(dbName: string): Promise<void>;
    /**
     * Returns an existing or new connection, that needs to be released once done using it.
     */
    getConnection(request?: ConnectionRequest): Promise<MongoConnection>;
    execute<T extends Command>(command: T): Promise<ReturnType<T['execute']>>;
}
