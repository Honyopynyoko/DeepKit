"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = exports.BaseResponse = exports.CommandMessage = void 0;
const type_1 = require("@deepkit/type");
const core_1 = require("@deepkit/core");
const bson_1 = require("@deepkit/bson");
const error_1 = require("../error");
class CommandMessage {
    constructor(schema, message, responseSchema, responseCallback) {
        this.schema = schema;
        this.message = message;
        this.responseSchema = responseSchema;
        this.responseCallback = responseCallback;
    }
}
exports.CommandMessage = CommandMessage;
exports.BaseResponse = type_1.t.schema({
    ok: type_1.t.number,
    errmsg: type_1.t.string.optional,
    code: type_1.t.number.optional,
    codeName: type_1.t.string.optional,
});
class Command {
    sendAndWait(schema, message, response) {
        if (!this.sender)
            throw new Error(`No sender set in command ${type_1.getClassSchema(this)}`);
        this.sender(schema, message);
        return core_1.asyncOperation((resolve, reject) => {
            this.current = { resolve, reject, response };
        });
    }
    handleResponse(response) {
        if (!this.current)
            throw new Error('Got handleResponse without active command');
        const message = this.current.response ? bson_1.getBSONDecoder(this.current.response)(response) : bson_1.deserialize(response);
        if (!message.ok) {
            console.error(message);
            this.current.reject(new error_1.MongoError(message.errmsg, message.code));
        }
        else {
            this.current.resolve(message);
        }
    }
}
exports.Command = Command;
//# sourceMappingURL=command.js.map