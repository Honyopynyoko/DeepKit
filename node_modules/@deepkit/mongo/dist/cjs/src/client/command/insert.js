"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertCommand = void 0;
const command_1 = require("./command");
const type_1 = require("@deepkit/type");
const core_1 = require("@deepkit/core");
class InsertResponse extends type_1.t.extendClass(command_1.BaseResponse, {
    n: type_1.t.number,
}) {
}
const insertSchema = type_1.t.schema({
    insert: type_1.t.string,
    $db: type_1.t.string,
});
class InsertCommand extends command_1.Command {
    constructor(classSchema, documents) {
        super();
        this.classSchema = classSchema;
        this.documents = documents;
    }
    async execute(config) {
        const schema = type_1.getClassSchema(this.classSchema);
        const cmd = {
            insert: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            documents: this.documents,
        };
        const jit = schema.jit;
        let specialisedSchema = jit.mdbInsert;
        if (!specialisedSchema) {
            specialisedSchema = type_1.t.extendSchema(insertSchema, {
                documents: type_1.t.array(schema)
            });
            jit.mdbInsert = specialisedSchema;
            core_1.toFastProperties(jit);
        }
        const res = await this.sendAndWait(specialisedSchema, cmd, InsertResponse);
        return res.n;
    }
    needsWritableHost() {
        return true;
    }
}
exports.InsertCommand = InsertCommand;
//# sourceMappingURL=insert.js.map