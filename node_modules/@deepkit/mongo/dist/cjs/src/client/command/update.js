"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateCommand = void 0;
const command_1 = require("./command");
const type_1 = require("@deepkit/type");
class UpdateResponse extends type_1.t.extendClass(command_1.BaseResponse, {
    n: type_1.t.number,
}) {
}
const updateSchema = type_1.t.schema({
    update: type_1.t.string,
    $db: type_1.t.string,
    updates: type_1.t.array({
        q: type_1.t.any,
        // maybe in the future support classSchema. But `u` supports update statements https://docs.mongodb.com/manual/reference/operator/update/#id1
        u: type_1.t.any,
        multi: type_1.t.boolean,
    })
});
class UpdateCommand extends command_1.Command {
    constructor(classSchema, updates = []) {
        super();
        this.classSchema = classSchema;
        this.updates = updates;
    }
    async execute(config) {
        const schema = type_1.getClassSchema(this.classSchema);
        const cmd = {
            update: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            updates: this.updates
        };
        const res = await this.sendAndWait(updateSchema, cmd, UpdateResponse);
        return res.n;
    }
    needsWritableHost() {
        return false;
    }
}
exports.UpdateCommand = UpdateCommand;
//# sourceMappingURL=update.js.map