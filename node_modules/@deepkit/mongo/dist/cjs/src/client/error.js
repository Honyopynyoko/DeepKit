"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoFindConnectionTimeOut = exports.MongoCommandError = exports.MongoConnectionError = exports.isErrorRetryableRead = exports.isErrorRetryableWrite = exports.MongoError = void 0;
const core_1 = require("@deepkit/core");
class MongoError extends core_1.CustomError {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
    toString() {
        if (this.code)
            return `[${this.code}] ${this.message}`;
        return this.message;
    }
}
exports.MongoError = MongoError;
//https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#determining-retryable-errors
const retryableWrites = [
    11600,
    11602,
    10107,
    13435,
    13436,
    189,
    91,
    7,
    6,
    89,
    9001,
    262
];
function isErrorRetryableWrite(error) {
    if (error instanceof MongoError && error.code) {
        return retryableWrites.includes(error.code);
    }
    return false;
}
exports.isErrorRetryableWrite = isErrorRetryableWrite;
// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error
const retryableReads = [
    11600,
    11602,
    10107,
    13435,
    13436,
    189,
    91,
    7,
    6,
    89,
    9001
];
function isErrorRetryableRead(error) {
    if (error instanceof MongoError && error.code) {
        return retryableReads.includes(error.code);
    }
    return false;
}
exports.isErrorRetryableRead = isErrorRetryableRead;
/**
 * When a tcp/connection issue happened.
 */
class MongoConnectionError extends MongoError {
}
exports.MongoConnectionError = MongoConnectionError;
/**
 * When the error came from the server `errmsg`.
 */
class MongoCommandError extends MongoError {
}
exports.MongoCommandError = MongoCommandError;
class MongoFindConnectionTimeOut extends MongoError {
}
exports.MongoFindConnectionTimeOut = MongoFindConnectionTimeOut;
//# sourceMappingURL=error.js.map