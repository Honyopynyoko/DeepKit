"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionOptions = void 0;
const type_1 = require("@deepkit/type");
function parsePropertyValue(value) {
    if (value === 'true')
        return true;
    if (value === 'false')
        return false;
    return value;
}
class ConnectionOptions extends type_1.t.class({
    replicaSet: type_1.t.string.optional,
    connectTimeoutMS: type_1.t.number.default(10000),
    socketTimeoutMS: type_1.t.number.default(36000),
    w: type_1.t.string.optional,
    wtimeoutMS: type_1.t.number.optional,
    journal: type_1.t.string.optional,
    appName: type_1.t.string.optional,
    retryWrites: type_1.t.boolean.default(true),
    retryReads: type_1.t.boolean.default(true),
    readConcernLevel: type_1.t.union('local', 'majority', 'linearizable', 'available').default('majority'),
    //unknown is there to prevent Typescript generating wrong options.d.ts
    readPreference: type_1.t.union('primary', 'primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest', 'unknown').default('primary'),
    maxStalenessSeconds: type_1.t.number.optional,
    readPreferenceTags: type_1.t.string.optional,
    compressors: type_1.t.union('snappy', 'zlib', 'zstd').optional,
    zlibCompressionLevel: type_1.t.number.optional,
    authSource: type_1.t.string.optional,
    authMechanism: type_1.t.union('SCRAM-SHA-1', 'SCRAM-SHA-256', 'MONGODB-X509', 'GSSAPI', 'PLAIN').optional,
    authMechanismProperties: type_1.t.string.optional,
    gssapiServiceName: type_1.t.string.optional,
    ssl: type_1.t.boolean.optional,
    tlsCertificateFile: type_1.t.string.optional,
    tlsCertificateKeyFile: type_1.t.string.optional,
    tlsCertificateKeyFilePassword: type_1.t.string.optional,
    tlsCAFile: type_1.t.string.optional,
    tlsCRLFile: type_1.t.string.optional,
    tlsAllowInvalidCertificates: type_1.t.boolean.optional,
    tlsAllowInvalidHostnames: type_1.t.boolean.optional,
    tlsInsecure: type_1.t.boolean.optional,
    maxPoolSize: type_1.t.number.default(20),
    minPoolSize: type_1.t.number.default(1),
    maxIdleTimeMS: type_1.t.number.default(100),
    waitQueueTimeoutMS: type_1.t.number.default(0),
}) {
    getAuthMechanismProperties() {
        const properties = {};
        if (!this.authMechanismProperties)
            return properties;
        for (const pairs of this.authMechanismProperties.split(',')) {
            let [name, value] = pairs.trim().split(':');
            properties[name] = parsePropertyValue(value);
        }
        return properties;
    }
    get checkServerIdentity() {
        return !this.tlsAllowInvalidHostnames && !this.tlsInsecure;
    }
    get rejectUnauthorized() {
        return this.tlsInsecure || this.tlsAllowInvalidCertificates;
    }
    get secondaryReadAllowed() {
        return this.readPreference === 'secondary' || this.readPreference === 'secondaryPreferred';
    }
}
exports.ConnectionOptions = ConnectionOptions;
//# sourceMappingURL=options.js.map