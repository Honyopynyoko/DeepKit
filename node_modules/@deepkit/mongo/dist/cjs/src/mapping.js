"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPlainQueryToMongo = exports.convertClassQueryToMongo = void 0;
const type_1 = require("@deepkit/type");
require("./mongo-serializer");
const mongo_serializer_1 = require("./mongo-serializer");
const orm_1 = require("@deepkit/orm");
/**
 * Takes a mongo filter query and converts its class values to classType's mongo types, so you
 * can use it to send it to mongo.
 */
function convertClassQueryToMongo(classType, query, fieldNamesMap = {}, customMapping = {}) {
    const serializer = mongo_serializer_1.mongoSerializer.for(type_1.getClassSchema(classType));
    return orm_1.convertQueryFilter(classType, query, (convertClassType, path, value) => {
        return serializer.serializeProperty(path, value);
    }, fieldNamesMap, customMapping);
}
exports.convertClassQueryToMongo = convertClassQueryToMongo;
/**
 * Takes a mongo filter query and converts its plain values to classType's mongo types, so you
 * can use it to send it to mongo.
 */
function convertPlainQueryToMongo(classType, target, fieldNamesMap = {}, customMapping = {}) {
    return orm_1.convertQueryFilter(classType, target, (convertClassType, path, value) => {
        const property = type_1.resolvePropertySchema(convertClassType, path);
        const classValue = type_1.jsonSerializer.deserializeProperty(property, value);
        return mongo_serializer_1.mongoSerializer.serializeProperty(property, classValue);
    }, fieldNamesMap, customMapping);
}
exports.convertPlainQueryToMongo = convertPlainQueryToMongo;
//# sourceMappingURL=mapping.js.map