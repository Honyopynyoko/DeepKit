import { DatabaseQueryModel, Entity, SORT_ORDER } from '@deepkit/orm';
declare type BSONTypeAlias = 'number' | 'double' | 'string' | 'object' | 'array' | 'binData' | 'undefined' | 'objectId' | 'bool' | 'date' | 'null' | 'regex' | 'dbPointer' | 'javascript' | 'symbol' | 'javascriptWithScope' | 'int' | 'timestamp' | 'long' | 'decimal' | 'minKey' | 'maxKey';
/** https://docs.mongodb.com/manual/reference/operator/query-bitwise */
declare type BitwiseQuery = number /** <numeric bitmask> */ | number[]; /** [ <position1>, <position2>, ... ] */
declare type RegExpForString<T> = T extends string ? (RegExp | T) : T;
declare type MongoAltQuery<T> = T extends Array<infer U> ? (T | RegExpForString<U>) : RegExpForString<T>;
/** https://docs.mongodb.com/manual/reference/operator/query/#query-selectors */
export declare type QuerySelector<T> = {
    $eq?: T;
    $gt?: T;
    $gte?: T;
    $in?: T[];
    $lt?: T;
    $lte?: T;
    $ne?: T;
    $nin?: T[];
    $not?: T extends string ? (QuerySelector<T> | RegExp) : QuerySelector<T>;
    /**
     * When `true`, `$exists` matches the documents that contain the field,
     * including documents where the field value is null.
     */
    $exists?: boolean;
    $type?: number | BSONTypeAlias;
    $expr?: any;
    $jsonSchema?: any;
    $mod?: T extends number ? [number, number] : never;
    $regex?: T extends string ? (RegExp | string) : never;
    $options?: T extends string ? string : never;
    $geoIntersects?: {
        $geometry: object;
    };
    $geoWithin?: object;
    $near?: object;
    $nearSphere?: object;
    $maxDistance?: number;
    $all?: T extends Array<infer U> ? any[] : never;
    $elemMatch?: T extends Array<infer U> ? object : never;
    $size?: T extends Array<infer U> ? number : never;
    $bitsAllClear?: BitwiseQuery;
    $bitsAllSet?: BitwiseQuery;
    $bitsAnyClear?: BitwiseQuery;
    $bitsAnySet?: BitwiseQuery;
    $parameter?: string;
};
export declare type RootQuerySelector<T> = {
    /** https://docs.mongodb.com/manual/reference/operator/query/and/#op._S_and */
    $and?: Array<FilterQuery<T>>;
    /** https://docs.mongodb.com/manual/reference/operator/query/nor/#op._S_nor */
    $nor?: Array<FilterQuery<T>>;
    /** https://docs.mongodb.com/manual/reference/operator/query/or/#op._S_or */
    $or?: Array<FilterQuery<T>>;
    /** https://docs.mongodb.com/manual/reference/operator/query/text */
    $text?: {
        $search: string;
        $language?: string;
        $caseSensitive?: boolean;
        $diacraticSensitive?: boolean;
    };
    /** https://docs.mongodb.com/manual/reference/operator/query/where/#op._S_where */
    $where?: string | Function;
    /** https://docs.mongodb.com/manual/reference/operator/query/comment/#op._S_comment */
    $comment?: string;
    [key: string]: any;
};
export declare type ObjectQuerySelector<T> = T extends object ? {
    [key in keyof T]?: QuerySelector<T[key]>;
} : QuerySelector<T>;
export declare type Condition<T> = MongoAltQuery<T> | QuerySelector<MongoAltQuery<T>>;
export declare type FilterQuery<T> = {
    [P in keyof T]?: Condition<T[P]>;
} & RootQuerySelector<T>;
export declare type SORT_TYPE = SORT_ORDER | {
    $meta: "textScore";
};
export declare type DEEP_SORT<T extends Entity> = {
    [P in keyof T]?: SORT_TYPE;
} & {
    [P: string]: SORT_TYPE;
};
export declare class MongoQueryModel<T extends Entity> extends DatabaseQueryModel<T, FilterQuery<T>, DEEP_SORT<T>> {
}
export {};
