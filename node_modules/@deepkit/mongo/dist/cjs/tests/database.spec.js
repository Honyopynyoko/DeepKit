"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const orm_1 = require("@deepkit/orm");
const adapter_1 = require("../src/adapter");
const type_1 = require("@deepkit/type");
globals_1.test('simple', async () => {
    let Test = class Test {
        constructor(name) {
            this.name = name;
        }
    };
    __decorate([
        type_1.t.primary.mongoId,
        __metadata("design:type", String)
    ], Test.prototype, "_id", void 0);
    Test = __decorate([
        type_1.Entity('asd'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [String])
    ], Test);
    const database = new orm_1.Database(new adapter_1.MongoDatabaseAdapter('mongodb://localhost/test'));
    await database.query(Test).deleteMany();
    {
        const item = new Test('asd');
        await database.persist(item);
    }
    {
        globals_1.expect(await database.query(Test).filter({ name: { $regex: /asd/ } }).has()).toBe(true);
        const item = await database.query(Test).filter({ name: 'asd' }).findOne();
        globals_1.expect(item).toBeInstanceOf(Test);
        globals_1.expect(item.name).toBe('asd');
    }
    database.disconnect();
});
globals_1.test('unit of work', async () => {
    let Test = class Test {
        constructor(name) {
            this.name = name;
        }
    };
    __decorate([
        type_1.t.primary.mongoId,
        __metadata("design:type", String)
    ], Test.prototype, "_id", void 0);
    Test = __decorate([
        type_1.Entity('asd2'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [String])
    ], Test);
    const database = new orm_1.Database(new adapter_1.MongoDatabaseAdapter('mongodb://localhost/test'));
    await database.query(Test).deleteMany();
    const session = database.createSession();
    const item = new Test('asd');
    session.add(item);
    await session.commit();
    {
        globals_1.expect(await session.query(Test).filter({ name: 'asd' }).has()).toBe(true);
        const item = await session.query(Test).filter({ name: 'asd' }).findOne();
        globals_1.expect(item).toBeInstanceOf(Test);
        globals_1.expect(item.name).toBe('asd');
    }
    await session.remove(item);
    await session.commit();
    globals_1.expect(await session.query(Test).filter({ name: 'asd' }).has()).toBe(false);
    database.disconnect();
});
globals_1.test('repository', async () => {
    let Test = class Test {
        constructor(name) {
            this.name = name;
        }
    };
    __decorate([
        type_1.t.primary.mongoId,
        __metadata("design:type", String)
    ], Test.prototype, "_id", void 0);
    Test = __decorate([
        type_1.Entity('asd3'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [String])
    ], Test);
    const database = new orm_1.Database(new adapter_1.MongoDatabaseAdapter('mongodb://localhost/test'));
    await database.query(Test).deleteMany();
    const item = new Test('asda');
    await database.persist(item);
    class TestRepository {
        constructor(database) {
            this.database = database;
        }
        async findById(id) {
            return this.database.query(Test).filter({ _id: id }).findOne();
        }
    }
    const repo = new TestRepository(database);
    const itemFromRepo = await repo.findById(item._id);
    globals_1.expect(itemFromRepo).toBeInstanceOf(Test);
    globals_1.expect(itemFromRepo._id).toBe(item._id);
    database.disconnect();
});
globals_1.test('session', async () => {
    let Test = class Test {
        constructor(name) {
            this.name = name;
        }
    };
    __decorate([
        type_1.t.primary.mongoId,
        __metadata("design:type", String)
    ], Test.prototype, "_id", void 0);
    Test = __decorate([
        type_1.Entity('asd4'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [String])
    ], Test);
    const database = new orm_1.Database(new adapter_1.MongoDatabaseAdapter('mongodb://localhost/test'));
    await database.query(Test).deleteMany();
    await database.session(async (session) => {
        const item = new Test('asd');
        session.add(item);
    });
    {
        globals_1.expect(await database.query(Test).filter({ name: 'asd' }).has()).toBe(true);
        const item = await database.query(Test).filter({ name: 'asd' }).findOne();
        globals_1.expect(item).toBeInstanceOf(Test);
        globals_1.expect(item.name).toBe('asd');
    }
    database.disconnect();
});
//# sourceMappingURL=database.spec.js.map