export declare class JobTaskQueue {
    position: number;
    tries: number;
    result: string;
    added: Date;
}
export declare class SubModel {
    label: string;
    age?: number;
    queue?: JobTaskQueue;
    constructorUsed: boolean;
    constructor(label: string);
}
export declare enum Plan {
    DEFAULT = 0,
    PRO = 1,
    ENTERPRISE = 2
}
export declare const now: Date;
export declare class CollectionWrapper {
    items: SubModel[];
    constructor(items: SubModel[]);
    add(item: SubModel): void;
}
export declare class StringCollectionWrapper {
    items: string[];
    constructor(items: string[]);
    add(item: string): void;
}
export declare class SimpleModel {
    id: string;
    name: string;
    type: number;
    yesNo: boolean;
    plan: Plan;
    created: Date;
    types: string[];
    child?: SubModel;
    selfChild?: SimpleModel;
    children: SubModel[];
    childrenMap: {
        [key: string]: SubModel;
    };
    childrenCollection: CollectionWrapper;
    stringChildrenCollection: StringCollectionWrapper;
    notMapped: {
        [key: string]: any;
    };
    anyField: any;
    excluded: string;
    excludedForMongo: string;
    excludedForPlain: string;
    constructor(name: string);
}
export declare class SuperSimple {
    _id?: string;
    name?: string;
}
export declare class BaseClass {
    _id?: string;
}
export declare class ChildClass extends BaseClass {
    name?: string;
}
