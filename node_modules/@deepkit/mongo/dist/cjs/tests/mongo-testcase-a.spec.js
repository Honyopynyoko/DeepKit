"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var User_1;
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const type_1 = require("@deepkit/type");
const orm_1 = require("@deepkit/orm");
const utils_1 = require("./utils");
Error.stackTraceLimit = 20;
let User = User_1 = class User {
    constructor(name) {
        this.name = name;
        this.id = type_1.uuid();
        this.organisations = [];
        this.managedUsers = [];
    }
};
__decorate([
    type_1.t.uuid.primary,
    __metadata("design:type", String)
], User.prototype, "id", void 0);
__decorate([
    type_1.t.array(() => Organisation).backReference({ via: () => OrganisationMembership }),
    __metadata("design:type", Array)
], User.prototype, "organisations", void 0);
__decorate([
    type_1.t.optional.reference(),
    __metadata("design:type", User)
], User.prototype, "manager", void 0);
__decorate([
    type_1.t.array(User_1).backReference(),
    __metadata("design:type", Array)
], User.prototype, "managedUsers", void 0);
User = User_1 = __decorate([
    type_1.Entity('user2'),
    __param(0, type_1.t),
    __metadata("design:paramtypes", [String])
], User);
let Organisation = class Organisation {
    constructor(name, owner) {
        this.name = name;
        this.owner = owner;
        this.id = type_1.uuid();
        this.users = [];
    }
};
__decorate([
    type_1.t.uuid.primary,
    __metadata("design:type", String)
], Organisation.prototype, "id", void 0);
__decorate([
    type_1.t.array(User).backReference({ mappedBy: 'organisations', via: () => OrganisationMembership }),
    __metadata("design:type", Array)
], Organisation.prototype, "users", void 0);
Organisation = __decorate([
    type_1.Entity('organisation2'),
    __param(0, type_1.t),
    __param(1, type_1.t.reference()),
    __metadata("design:paramtypes", [String, User])
], Organisation);
let OrganisationMembership = class OrganisationMembership {
    constructor(user, organisation) {
        this.user = user;
        this.organisation = organisation;
        this.id = type_1.uuid();
    }
};
__decorate([
    type_1.t.uuid.primary,
    __metadata("design:type", String)
], OrganisationMembership.prototype, "id", void 0);
OrganisationMembership = __decorate([
    type_1.Entity('organisation_member2'),
    __param(0, type_1.t.reference().index()),
    __param(1, type_1.t.reference().index()),
    __metadata("design:paramtypes", [User,
        Organisation])
], OrganisationMembership);
async function setupTestCase(name) {
    const db = await utils_1.createDatabase(name);
    const session = db.createSession();
    const admin = new User('admin');
    const marc = new User('marc');
    const peter = new User('peter');
    const marcel = new User('marcel');
    const microsoft = new Organisation('Microsoft', admin);
    const apple = new Organisation('Apple', admin);
    session.add(admin);
    session.add(marc);
    session.add(peter);
    session.add(marcel);
    session.add(microsoft);
    session.add(apple);
    session.add(new OrganisationMembership(marc, apple));
    session.add(new OrganisationMembership(marc, microsoft));
    session.add(new OrganisationMembership(peter, microsoft));
    session.add(new OrganisationMembership(marcel, microsoft));
    await session.commit();
    return {
        db, session, admin, marc, peter, marcel, microsoft, apple,
    };
}
globals_1.test('check if foreign keys are deleted correctly', async () => {
    const { db } = await setupTestCase('check if foreign keys are deleted correctly');
    const manager = new User('manager');
    await db.persist(manager);
    {
        const marc = await db.query(User).filter({ name: 'marc' }).findOne();
        globals_1.expect(marc.manager).toBeUndefined();
        marc.manager = manager;
        globals_1.expect(marc.manager).toBe(manager);
        await db.persist(marc);
    }
    {
        const marc = await db.query(User).filter({ name: 'marc' }).findOne();
        globals_1.expect(marc.manager.id).toBe(manager.id);
    }
    {
        const marc = await db.query(User).joinWith('manager').filter({ name: 'marc' }).findOne();
        globals_1.expect(marc.manager.id).toBe(manager.id);
        globals_1.expect(marc.manager.name).toBe('manager');
    }
    {
        const marc = await db.query(User).filter({ name: 'marc' }).findOne();
        marc.manager = undefined;
        await db.persist(marc);
    }
    {
        const marc = await db.query(User).filter({ name: 'marc' }).findOne();
        globals_1.expect(marc.manager).toBeUndefined();
    }
});
globals_1.test('disabled identity map', async () => {
    const { session, marc, peter, marcel } = await setupTestCase('disabled identity map');
    const manager1 = new User('manager1');
    session.add(manager1);
    await session.commit();
    session.withIdentityMap = false;
    globals_1.expect(await session.query(User).count()).toBe(5);
    marc.manager = manager1;
    session.add(marc);
    await session.commit();
    globals_1.expect(await session.query(User).count()).toBe(5);
    peter.manager = manager1;
    session.add(peter);
    await session.commit();
    marcel.manager = manager1;
    session.add(marcel);
    await session.commit();
    {
        const item = await session.query(User).filter({ name: 'marc' }).findOne();
        globals_1.expect(item).not.toBe(marc);
        globals_1.expect(item.id).toBe(marc.id);
        globals_1.expect(item.manager.id).toBe(manager1.id);
    }
    {
        const item = await session.query(User).filter({ id: manager1.id }).findOne();
        globals_1.expect(item).not.toBe(manager1);
        globals_1.expect(item).toBeInstanceOf(User);
        globals_1.expect(item.id).toBe(manager1.id);
        globals_1.expect(() => item.managedUsers).toThrow('managedUsers was not populated');
    }
    {
        const item = await session.query(User).joinWith('managedUsers').filter({ id: manager1.id }).findOne();
        globals_1.expect(item.managedUsers.length).toBe(3);
        globals_1.expect(item.managedUsers[0]).toBeInstanceOf(User);
        globals_1.expect(item.managedUsers[0].id).toBe(marc.id);
    }
});
globals_1.test('parameters', async () => {
    const { db, admin, marc, peter, marcel, apple, microsoft } = await setupTestCase('parameters');
    const session = db.createSession();
    await globals_1.expect(session.query(User).filter({ 'name': { $parameter: 'name' } }).find()).rejects.toThrow('Parameter name not defined');
    {
        const query = session.query(User).filter({ 'name': { $parameter: 'name' } });
        const marc = await query.parameter('name', 'marc').findOne();
        globals_1.expect(marc.name).toBe('marc');
        const peter = await query.parameter('name', 'peter').findOne();
        globals_1.expect(peter.name).toBe('peter');
        const marcel = await query.parameters({ name: 'marcel' }).findOne();
        globals_1.expect(marcel.name).toBe('marcel');
    }
});
globals_1.test('hydrate', async () => {
    const { db, admin, marc, peter, marcel, apple, microsoft } = await setupTestCase('hydrate');
    const session = db.createSession();
    {
        const item = await session.query(OrganisationMembership).filter({
            user: marc,
            organisation: apple,
        }).disableIdentityMap().findOne();
        globals_1.expect(item).toBeInstanceOf(OrganisationMembership);
        globals_1.expect(item.user.id).toBe(marc.id);
        globals_1.expect(item.organisation.id).toBe(apple.id);
        globals_1.expect(() => item.user.name).toThrow(`Can not access User.name since class was not completely hydrated`);
        await orm_1.hydrateEntity(item.user);
        globals_1.expect(item.user.name).toBe('marc');
    }
    {
        globals_1.expect(session.withIdentityMap).toBe(true);
        //test automatic hydration
        {
            const marcFromDb = await session.query(User).filter({ name: 'marc' }).findOne();
            const item = await session.query(OrganisationMembership).filter({
                user: marc,
                organisation: apple,
            }).findOne();
            globals_1.expect(item).toBeInstanceOf(OrganisationMembership);
            globals_1.expect(item.user.id).toBe(marcFromDb.id);
            globals_1.expect(item.user.name).toBe('marc');
            globals_1.expect(item.user).toBe(marcFromDb);
            globals_1.expect(item.organisation.id).toBe(apple.id);
        }
        session.identityMap.clear();
        //test automatic hydration
        {
            const item = await session.query(OrganisationMembership).filter({
                user: marc,
                organisation: apple,
            }).findOne();
            globals_1.expect(item).toBeInstanceOf(OrganisationMembership);
            globals_1.expect(item.user.id).toBe(marc.id);
            globals_1.expect(item.organisation.id).toBe(apple.id);
            globals_1.expect(() => item.user.name).toThrow(`Can not access User.name since class was not completely hydrated`);
            globals_1.expect(orm_1.getInstanceStateFromItem(item.user).getLastKnownPK()).toEqual({ id: item.user.id });
            globals_1.expect(session.identityMap.isKnown(item.user)).toBe(true);
            //this will hydrate all related proxy objects
            const items = await session.query(User).filter({ name: 'marc' }).find();
            globals_1.expect(items[0]).toBe(item.user);
        }
    }
});
globals_1.test('joins', async () => {
    const { session, admin, marc, peter, marcel, apple, microsoft } = await setupTestCase('joins');
    globals_1.expect('_id' in marc).toBe(false);
    globals_1.expect(await session.query(User).count()).toBe(4);
    globals_1.expect(await session.query(Organisation).count()).toBe(2);
    globals_1.expect(await session.query(OrganisationMembership).count()).toBe(4);
    globals_1.expect(await session.query(OrganisationMembership).filter({ user: marc }).count()).toBe(2);
    globals_1.expect(await session.query(OrganisationMembership).filter({ user: peter }).count()).toBe(1);
    globals_1.expect(await session.query(OrganisationMembership).filter({ user: marcel }).count()).toBe(1);
    globals_1.expect(await session.query(OrganisationMembership).filter({ organisation: apple }).count()).toBe(1);
    globals_1.expect(await session.query(OrganisationMembership).filter({ organisation: microsoft }).count()).toBe(3);
    globals_1.expect(() => {
        session.query(Organisation).join('id');
    }).toThrow('is not marked as reference');
    session.withIdentityMap = false;
    {
        const item = await session.query(User).findOne();
        globals_1.expect(item.name).toEqual('admin');
        const name = await session.query(User).findOneField('name');
        globals_1.expect(name).toEqual('admin');
    }
    {
        const item = await session.query(User).join('organisations').findOneField('name');
        globals_1.expect(item).toEqual('admin');
    }
    {
        const item = await session.query(User).innerJoin('organisations').findOneField('name');
        globals_1.expect(item).toEqual('marc');
    }
    {
        await globals_1.expect(session.query(User).innerJoin('organisations').filter({ name: 'notexisting' }).findOneField('name')).rejects.toThrow('not found');
    }
    {
        const item = await session.query(User).innerJoin('organisations').filter({ name: 'notexisting' }).findOneFieldOrUndefined('name');
        globals_1.expect(item).toBeUndefined();
    }
    {
        const items = await session.query(User).findField('name');
        globals_1.expect(items).toEqual(['admin', 'marc', 'peter', 'marcel']);
    }
    {
        const items = await session.query(User).sort({ name: 'asc' }).findField('name');
        globals_1.expect(items).toEqual(['admin', 'marc', 'marcel', 'peter']);
    }
    {
        const items = await session.query(User).sort({ name: 'desc' }).findField('name');
        globals_1.expect(items).toEqual(['peter', 'marcel', 'marc', 'admin']);
    }
    await globals_1.expect(session.query(User).filter({ name: 'notexisting' }).findOneField('name')).rejects.toThrow('not found');
    globals_1.expect(await session.query(User).filter({ name: 'marc' }).has()).toBe(true);
    globals_1.expect(await session.query(User).filter({ name: 'notexisting' }).has()).toBe(false);
    globals_1.expect(await session.query(User).join('organisations').filter({ name: 'marc' }).has()).toBe(true);
    globals_1.expect(await session.query(User).join('organisations').filter({ name: 'notexisting' }).has()).toBe(false);
    {
        const item = await session.query(User).filter({ name: 'notexisting' }).findOneFieldOrUndefined('name');
        globals_1.expect(item).toBeUndefined();
    }
    {
        const schema = type_1.getClassSchema(OrganisationMembership);
        globals_1.expect(schema.getProperty('user').getResolvedClassType()).toBe(User);
        const query = session.query(OrganisationMembership).joinWith('user');
        const resolvedType = query.model.joins[0].propertySchema.getResolvedClassType();
        globals_1.expect(resolvedType).toBe(User);
        globals_1.expect(resolvedType === User).toBe(true);
        const schema2 = type_1.getClassSchema(resolvedType);
        globals_1.expect(schema2.name).toBe('user2');
        globals_1.expect(schema2.classType).toBe(User);
        globals_1.expect(query.model.joins[0].propertySchema.getResolvedClassSchema().classType).toBe(User);
    }
    {
        const items = await session.query(OrganisationMembership).joinWith('user').find();
        globals_1.expect(items.length).toBe(4);
        globals_1.expect(items[0].user).toBeInstanceOf(User);
        globals_1.expect(items[0].user).toBe(items[1].user); //marc === marc instance
        globals_1.expect(items[0].user).toBeInstanceOf(User);
        globals_1.expect(items[0].user.id).toBe(marc.id);
        globals_1.expect(items[0].user.name).toBe(marc.name);
        const count = await session.query(OrganisationMembership).joinWith('user').count();
        globals_1.expect(count).toBe(4);
    }
    {
        const items = await session.query(OrganisationMembership).filter({ user: peter }).joinWith('user').find();
        globals_1.expect(items.length).toBe(1);
        globals_1.expect(items[0].user.id).toBe(peter.id);
        globals_1.expect(items[0].organisation.id).toBe(microsoft.id);
    }
    {
        const item = await session.query(OrganisationMembership).filter({ user: peter }).joinWith('user').findOne();
        globals_1.expect(item).not.toBeUndefined();
        globals_1.expect(item.user.id).toBe(peter.id);
        globals_1.expect(item.user.name).toBe(peter.name);
        globals_1.expect(item.organisation.id).toBe(microsoft.id);
        globals_1.expect(() => {
            item.organisation.name;
        }).toThrow(`Can not access Organisation.name since class`);
        const count1 = await session.query(OrganisationMembership).filter({ user: peter }).joinWith('user').count();
        globals_1.expect(count1).toBe(1);
        const count2 = await session.query(OrganisationMembership).filter({ user: peter }).count();
        globals_1.expect(count2).toBe(1);
    }
    {
        const item = await session.query(OrganisationMembership).filter({ user: peter }).findOne();
        globals_1.expect(item).not.toBeUndefined();
        globals_1.expect(item.user.id).toBe(peter.id);
        globals_1.expect(item.organisation.id).toBe(microsoft.id);
        globals_1.expect(() => {
            item.user.name;
        }).toThrow(`Can not access User.name since class was not completely hydrated`);
        globals_1.expect(() => {
            item.organisation.name;
        }).toThrow(`Can not access Organisation.name since class was not completely hydrated`);
    }
    {
        const items = await session.query(OrganisationMembership).innerJoin('user').find();
        globals_1.expect(items.length).toBe(4);
    }
    {
        const items = await session.query(OrganisationMembership)
            .useJoinWith('user').filter({ name: 'marc' }).end().find();
        globals_1.expect(items.length).toBe(4); //still 4, but user is empty for all other than marc
        globals_1.expect(items[0].user).toBeInstanceOf(User);
        globals_1.expect(items[1].user).toBeInstanceOf(User);
        globals_1.expect(items[2].user).toBeUndefined();
        globals_1.expect(items[3].user).toBeUndefined();
    }
    {
        const items = await session.query(OrganisationMembership)
            .useInnerJoin('user').filter({ name: 'marc' }).end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(() => {
            items[0].user.name;
        }).toThrow('not completely hydrated');
        globals_1.expect(() => {
            items[1].user.name;
        }).toThrow('not completely hydrated');
    }
    {
        const query = await session.query(OrganisationMembership)
            .useInnerJoinWith('user').select('id').filter({ name: 'marc' }).end();
        {
            const items = await query.find();
            globals_1.expect(items.length).toBe(2);
            globals_1.expect(items[0].user).not.toBeInstanceOf(User);
            globals_1.expect(items[1].user).not.toBeInstanceOf(User);
            globals_1.expect(items[0].user).toEqual({ id: marc.id });
        }
        {
            const items = await query.clone().find();
            globals_1.expect(items.length).toBe(2);
            globals_1.expect(items[0].user).not.toBeInstanceOf(User);
            globals_1.expect(items[1].user).not.toBeInstanceOf(User);
            globals_1.expect(items[0].user).toEqual({ id: marc.id });
        }
    }
    {
        const items = await session.query(User).innerJoinWith('organisations').find();
        globals_1.expect(items[0].organisations.length).toBe(2);
        globals_1.expect(items[0].organisations[0]).toBeInstanceOf(Organisation);
        globals_1.expect(items[0].organisations[0].name).toBe('Microsoft');
        globals_1.expect(items[0].organisations[1]).toBeInstanceOf(Organisation);
        globals_1.expect(items[0].organisations[1].name).toBe('Apple');
        globals_1.expect(items[1].organisations.length).toBe(1);
        globals_1.expect(items[1].organisations[0]).toBeInstanceOf(Organisation);
        globals_1.expect(items[1].organisations[0].name).toBe('Microsoft');
        globals_1.expect(items[0].organisations[0]).toBe(items[1].organisations[0]); //microsoft the same instance
    }
    {
        const items = await session.query(User).useInnerJoinWith('organisations').filter({ name: 'Microsoft' }).end().find();
        globals_1.expect(items[0].organisations.length).toBe(1);
        globals_1.expect(items[0].organisations[0]).toBeInstanceOf(Organisation);
        globals_1.expect(items[0].organisations[0].name).toBe('Microsoft');
        globals_1.expect(items[1].organisations.length).toBe(1);
        globals_1.expect(items[1].organisations[0]).toBeInstanceOf(Organisation);
        globals_1.expect(items[1].organisations[0].name).toBe('Microsoft');
        globals_1.expect(items[0].organisations[0]).toBe(items[1].organisations[0]); //microsoft the same instance
    }
    {
        const items = await session.query(Organisation).useJoinWith('users').end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(items[0].name).toBe('Microsoft');
        globals_1.expect(items[1].name).toBe('Apple');
        globals_1.expect(items[0].users.length).toBe(3);
        globals_1.expect(items[1].users.length).toBe(1);
    }
    {
        const items = await session.query(Organisation).useInnerJoinWith('users').end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(items[0].name).toBe('Microsoft');
        globals_1.expect(items[1].name).toBe('Apple');
        globals_1.expect(items[0].users.length).toBe(3);
        globals_1.expect(items[1].users.length).toBe(1);
        globals_1.expect(items[0].users[0].name).toBe('marc');
        globals_1.expect(items[0].users[1].name).toBe('peter');
        globals_1.expect(items[0].users[2].name).toBe('marcel');
    }
    {
        const items = await session.query(Organisation).useInnerJoinWith('users').sort({ name: 'asc' }).end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(items[0].name).toBe('Microsoft');
        globals_1.expect(items[1].name).toBe('Apple');
        globals_1.expect(items[0].users.length).toBe(3);
        globals_1.expect(items[1].users.length).toBe(1);
        globals_1.expect(items[0].users[0].name).toBe('marc');
        globals_1.expect(items[0].users[1].name).toBe('marcel');
        globals_1.expect(items[0].users[2].name).toBe('peter');
    }
    {
        const items = await session.query(Organisation).useJoinWith('users').sort({ name: 'asc' }).skip(1).end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(items[0].name).toBe('Microsoft');
        globals_1.expect(items[1].name).toBe('Apple');
        globals_1.expect(items[0].users.length).toBe(2);
        globals_1.expect(items[1].users.length).toBe(0);
        globals_1.expect(items[0].users[0].name).toBe('marcel');
        globals_1.expect(items[0].users[1].name).toBe('peter');
    }
    {
        const items = await session.query(Organisation).useJoinWith('users').sort({ name: 'asc' }).skip(1).limit(1).end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(items[0].name).toBe('Microsoft');
        globals_1.expect(items[1].name).toBe('Apple');
        globals_1.expect(items[0].users.length).toBe(1);
        globals_1.expect(items[1].users.length).toBe(0);
        globals_1.expect(items[0].users[0].name).toBe('marcel');
    }
    {
        const items = await session.query(Organisation).useJoinWith('users').select('id').end().find();
        globals_1.expect(items.length).toBe(2);
        globals_1.expect(items[0].name).toBe('Microsoft');
        globals_1.expect(items[1].name).toBe('Apple');
        globals_1.expect(items[0].users.length).toBe(3);
        globals_1.expect(items[1].users.length).toBe(1);
        globals_1.expect(items[0].users[0]).not.toBeInstanceOf(User);
        globals_1.expect(items[0].users[0].id).toBe(marc.id);
        globals_1.expect(items[0].users[0].name).toBeUndefined();
    }
    {
        const query = session.query(OrganisationMembership)
            .useInnerJoinWith('user').filter({ name: 'marc' }).end();
        const items = await query.find();
        globals_1.expect(items.length).toBe(2); //we get 2 because of inner join
        globals_1.expect(items[0].user).toBeInstanceOf(User);
        globals_1.expect(items[1].user).toBeInstanceOf(User);
        const items2 = await query.joinWith('organisation').find();
        globals_1.expect(items2.length).toBe(2); //still the same
        globals_1.expect(items2[0].user).toBeInstanceOf(User);
        globals_1.expect(items2[1].user).toBeInstanceOf(User);
    }
    {
        const query = session.query(OrganisationMembership)
            .useInnerJoinWith('user').filter({ name: 'marc' }).end();
        const item = await query.findOne();
        globals_1.expect(item.user).toBeInstanceOf(User);
        globals_1.expect(item.user.name).toBe('marc');
    }
    {
        const query = session.query(OrganisationMembership).filter({ user: marc });
        const items = await query.find();
        globals_1.expect(items.length).toBe(2);
    }
    session.remove(peter);
    await session.commit();
    {
        const query = session.query(OrganisationMembership).joinWith('user').filter({ user: peter });
        const items = await query.find();
        globals_1.expect(items.length).toBe(1);
        globals_1.expect(await query.count()).toBe(1);
    }
    {
        globals_1.expect(await session.query(OrganisationMembership).innerJoin('user').filter({ user: peter }).count()).toBe(0);
        globals_1.expect(await session.query(OrganisationMembership).innerJoinWith('user').filter({ user: peter }).count()).toBe(0);
    }
    {
        const query = session.query(OrganisationMembership)
            .useJoinWith('user').filter({ name: 'marc' }).end()
            .joinWith('organisation');
        globals_1.expect(query.model.joins.length).toBe(2);
        globals_1.expect(query.model.joins[0].propertySchema.getResolvedClassType()).toBe(User);
        globals_1.expect(query.model.joins[1].propertySchema.getResolvedClassType()).toBe(Organisation);
        const items = await query.find();
        globals_1.expect(items.length).toBe(4); //we get all, because we got a left join
    }
    {
        const query = session.query(User)
            .useInnerJoinWith('organisations').filter({ name: 'Microsoft' }).end();
        {
            const items = await query.clone().find();
            globals_1.expect(items.length).toBe(2);
            globals_1.expect(() => {
                globals_1.expect(items[0].organisations[0].owner.name).toBeUndefined();
            }).toThrow('was not completely hydrated');
        }
        {
            const items = await query.find();
            globals_1.expect(items.length).toBe(2);
            globals_1.expect(items[0].name).toBe('marc');
            globals_1.expect(items[0].organisations.length).toBe(1);
            globals_1.expect(items[0].organisations[0].name).toBe('Microsoft');
            globals_1.expect(() => {
                globals_1.expect(items[0].organisations[0].owner.name).toBeUndefined();
            }).toThrow('was not completely hydrated');
            globals_1.expect(items[1].name).toBe('marcel');
            globals_1.expect(items[1].organisations.length).toBe(1);
            globals_1.expect(items[1].organisations[0].name).toBe('Microsoft');
            globals_1.expect(() => {
                globals_1.expect(items[1].organisations[0].owner.name).toBeUndefined();
            }).toThrow('was not completely hydrated');
        }
        {
            const items = await query.clone().getJoin('organisations').joinWith('owner').end().find();
            globals_1.expect(items.length).toBe(2);
            globals_1.expect(items[0].name).toBe('marc');
            globals_1.expect(items[0].organisations.length).toBe(1);
            globals_1.expect(items[0].organisations[0].name).toBe('Microsoft');
            globals_1.expect(items[0].organisations[0].owner).toBeInstanceOf(User);
            globals_1.expect(items[1].name).toBe('marcel');
            globals_1.expect(items[1].organisations.length).toBe(1);
            globals_1.expect(items[1].organisations[0].name).toBe('Microsoft');
            globals_1.expect(items[1].organisations[0].owner).toBeInstanceOf(User);
            globals_1.expect(items[1].organisations[0].owner).toBe(items[0].organisations[0].owner);
            globals_1.expect(items[1].organisations[0].owner.name).toBe('admin');
            globals_1.expect(items[1].organisations[0].owner.id).toBe(admin.id);
        }
        {
            const items = await query.clone().getJoin('organisations').useJoinWith('owner').select('id').end().end().find();
            globals_1.expect(items.length).toBe(2);
            globals_1.expect(items[0].name).toBe('marc');
            globals_1.expect(items[0].organisations.length).toBe(1);
            globals_1.expect(items[0].organisations[0].name).toBe('Microsoft');
            globals_1.expect(items[0].organisations[0].owner).not.toBeInstanceOf(User);
            globals_1.expect(items[1].name).toBe('marcel');
            globals_1.expect(items[1].organisations.length).toBe(1);
            globals_1.expect(items[1].organisations[0].name).toBe('Microsoft');
            globals_1.expect(items[1].organisations[0].owner).not.toBeInstanceOf(User);
            globals_1.expect(items[1].organisations[0].owner.name).toBeUndefined();
            globals_1.expect(items[1].organisations[0].owner.id).toBe(admin.id);
        }
        {
            const item = await session.query(User).findOne();
            globals_1.expect(() => item.organisations).toThrow('was not populated');
        }
        {
            const item = await session.query(User).joinWith('organisations').filter({ name: 'marc' }).findOne();
            globals_1.expect(item.name).toBe('marc');
            globals_1.expect(item.organisations.length).toBeGreaterThan(0);
        }
        {
            const item = await session.query(User).innerJoinWith('organisations').findOne();
            globals_1.expect(item.name).toBe('marc');
            globals_1.expect(item.organisations.length).toBeGreaterThan(0);
        }
    }
});
//# sourceMappingURL=mongo-testcase-a.spec.js.map