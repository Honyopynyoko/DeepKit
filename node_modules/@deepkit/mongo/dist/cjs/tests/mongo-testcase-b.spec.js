"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const user_1 = require("./testcase-b/user");
const utils_1 = require("./utils");
async function setupTestCase(name) {
    const db = await utils_1.createDatabase(name);
    const marc = new user_1.User('marc', 'marcPassword');
    const peter = new user_1.User('peter', 'peterPassword');
    const marcel = new user_1.User('marcel');
    await db.persist(marc.credentials);
    await db.persist(peter.credentials);
    await db.persist(marcel.credentials);
    await db.persist(marc);
    await db.persist(peter);
    await db.persist(marcel);
    return {
        database: db, marc, peter, marcel,
    };
}
globals_1.test('ids', async () => {
    const { database, marc, peter, marcel, } = await setupTestCase('ids');
    {
        const ids = await database.query(user_1.User).ids(true);
        globals_1.expect(ids).toEqual([marc.id, peter.id, marcel.id]);
    }
    {
        const ids = await database.query(user_1.User).ids();
        globals_1.expect(ids).toEqual([{ id: marc.id }, { id: peter.id }, { id: marcel.id }]);
    }
    {
        const ids = await database.query(user_1.User).sort({ name: 'asc' }).ids(true);
        globals_1.expect(ids).toEqual([marc.id, marcel.id, peter.id]);
    }
    {
        const ids = await database.query(user_1.User).filter({ name: { $regex: /^marc/ } }).ids(true);
        globals_1.expect(ids).toEqual([marc.id, marcel.id]);
    }
    {
        const ids = await database.query(user_1.User).joinWith('credentials').ids(true);
        globals_1.expect(ids).toEqual([marc.id, peter.id, marcel.id]);
    }
    {
        const ids = await database.query(user_1.User).joinWith('credentials').filter({ name: { $regex: /^marc/ } }).ids(true);
        globals_1.expect(ids).toEqual([marc.id, marcel.id]);
    }
});
globals_1.test('one-to-one', async () => {
    const { database, marc, peter, marcel, } = await setupTestCase('one-to-one');
    {
        const item = await database.query(user_1.User).joinWith('credentials').filter({ name: 'marc' }).findOne();
        globals_1.expect(item.credentials.password).toBe('marcPassword');
    }
    {
        const item = await database.query(user_1.User).joinWith('credentials').filter({ name: 'marcel' }).findOne();
        globals_1.expect(item.credentials.password).toBe('');
    }
});
//# sourceMappingURL=mongo-testcase-b.spec.js.map