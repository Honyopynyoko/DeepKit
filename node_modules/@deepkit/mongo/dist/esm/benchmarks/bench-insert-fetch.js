var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import 'reflect-metadata';
import { Database } from '@deepkit/orm';
import { MongoDatabaseAdapter } from '../src/adapter';
import { Entity, f } from '@deepkit/type';
import { bench } from './utils';
let User = class User {
    constructor(id, name) {
        this.id = id;
        this.name = name;
        this.tags = [];
        this.priority = 0;
    }
};
__decorate([
    f.mongoId.primary,
    __metadata("design:type", String)
], User.prototype, "_id", void 0);
__decorate([
    f,
    __metadata("design:type", Boolean)
], User.prototype, "ready", void 0);
__decorate([
    f.array(f.string),
    __metadata("design:type", Array)
], User.prototype, "tags", void 0);
__decorate([
    f,
    __metadata("design:type", Number)
], User.prototype, "priority", void 0);
User = __decorate([
    Entity('user'),
    __param(0, f),
    __param(1, f),
    __metadata("design:paramtypes", [Number, String])
], User);
export { User };
async function createDatabase(dbName = 'testing') {
    dbName = dbName.replace(/\s+/g, '-');
    return new Database(new MongoDatabaseAdapter('mongodb://localhost/' + dbName));
}
const items = 10000;
(async () => {
    const database = await createDatabase('benchmark-a');
    database.registerEntity(User);
    await database.migrate();
    const session = database.createSession();
    for (let j = 1; j <= 15; j++) {
        console.log('round', j);
        session.identityMap.clear();
        await session.query(User).deleteMany();
        await bench(1, 'deepkit/orm insert', async () => {
            for (let i = 1; i <= items; i++) {
                const user = new User(i, 'Peter ' + i);
                user.ready = true;
                user.priority = 5;
                user.tags = ['a', 'b', 'c'];
                session.add(user);
            }
            await session.commit();
        });
        const query = session.query(User).disableIdentityMap();
        await bench(10, 'deepkit/orm find', async () => {
            await query.find();
        });
        session.identityMap.clear();
        const dbItems = await session.query(User).find();
        for (const item of dbItems) {
            item.name = 'Angela';
            item.priority = Math.ceil(Math.random() * 1000);
        }
        // console.log('changed', buildChanges(dbItems[0]));
        // const converterPartial = createPartialXToXFunction(getClassSchema(User), 'class', 'mongo');
        // console.log('changed converted', converterPartial(buildChanges(dbItems[0])));
        await bench(1, 'deepkit/orm update', async () => {
            await session.commit();
        });
    }
    database.disconnect();
})();
//# sourceMappingURL=bench-insert-fetch.js.map