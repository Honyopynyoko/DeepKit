var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { MongoClient as OriMongoClient, } from 'mongodb';
import { MongoClient } from '../src/client/client';
import { FindCommand } from '../src/client/command/find';
import { Entity, f } from '@deepkit/type';
import { performance } from 'perf_hooks';
/**
 * Executes given exec() method 3 times and averages the consumed time.
 */
export async function bench(times, title, exec) {
    const start = performance.now();
    for (let i = 0; i < times; i++) {
        await exec(i);
    }
    const took = performance.now() - start;
    console.log(times, 'x benchmark', title, took, 'ms', took / times, 'per item');
}
let User = class User {
    constructor(id, name) {
        this.id = id;
        this.name = name;
        this.tags = [];
        this.priority = 0;
        this.iteration = 0;
    }
};
__decorate([
    f.mongoId.primary,
    __metadata("design:type", String)
], User.prototype, "_id", void 0);
__decorate([
    f,
    __metadata("design:type", Boolean)
], User.prototype, "ready", void 0);
__decorate([
    f.array(f.string),
    __metadata("design:type", Array)
], User.prototype, "tags", void 0);
__decorate([
    f,
    __metadata("design:type", Number)
], User.prototype, "priority", void 0);
User = __decorate([
    Entity('user'),
    __param(0, f),
    __param(1, f),
    __metadata("design:paramtypes", [Number, String])
], User);
export { User };
async function main() {
    const mongoClient = await OriMongoClient.connect(`mongodb://127.0.0.1/benchmark-a`, {
        useUnifiedTopology: true,
        useNewUrlParser: true,
    });
    const collection = mongoClient.db('benchmark-a').collection('user');
    const client = new MongoClient('mongodb://127.0.0.1/benchmark-a');
    await client.connect();
    const items = [];
    const mongoItems = [];
    const count = 10000;
    for (let i = 1; i <= count; i++) {
        const user = new User(i, 'Peter ' + i);
        user.ready = true;
        user.priority = 5;
        user.tags = ['a', 'b', 'c'];
        items.push(user);
        mongoItems.push({
            name: `Peter ${i}`,
            ready: true,
            priority: 5,
            tags: ['a', 'b', 'c'],
        });
    }
    // await collection.deleteMany({});
    await bench(1, 'native mongodb insert 10k', async () => {
        const result = await collection.insertMany(mongoItems, {});
        // console.log({ result });
    });
    // for (const item of items) {
    //     item._id = undefined;
    //     // @ts-ignore
    //     item.test = undefined;
    // }
    // await client.execute(new DeleteCommand(User, {}));
    // await bench(1, 'new client: insert 10k', async () => {
    //     const result = await client.execute(new InsertCommand(User, items));
    // });
    // await bench(2000, 'reference', async () => {
    //     await new Promise((resolve) => {
    //         resolve(undefined);
    //     });
    // });
    // await bench(10_000, 'new client: EmptyCommand', async () => {
    //     const response = await client.execute(new EmptyCommand());
    // });
    // await bench(10_000, 'new client: IsMasterCommand', async () => {
    //     const response = await client.execute(new IsMasterCommand());
    // });
    // await bench(10_000, 'ori Mongodb find 1', async () => {
    //     const item = await collection.find({}).limit(1).toArray();
    // });
    // await bench(10_000, 'new client: FindCommand 1', async () => {
    //     const cmd = new FindCommand(User);
    //     cmd.limit = 1;
    //     let response = await client.execute(cmd);
    //     response.forEach((el) => {
    //         // @ts-ignore
    //         el._id = new ObjectId(el._id);
    //     });
    // });
    await new Promise((resolve) => {
        setTimeout(() => {
            resolve();
        }, 1000);
    });
    let iteration = 0;
    await bench(100, 'new client: FindCommand 10k', async () => {
        await collection.updateMany({}, {
            $set: {
                iteration: iteration++,
            },
        });
        const cmd = new FindCommand(User);
        // cmd.limit = 10;
        const response = await client.execute(cmd);
        console.log('response', response);
        for (const i of response) {
            if (i.iteration !== iteration - 1) {
                console.log(`Something is wrong with the new data set, expected: ${iteration - 1}, got ${i.iteration}`);
            }
        }
    });
    await bench(100, 'ori Mongodb find 10k', async () => {
        const docs = [];
        const result = await collection
            .find({}, {
            batchSize: 1000000,
            // raw: true,
        })
            .toArray();
        // console.log(result[0].toString());
        // console.log(result);
    });
    // {
    //     const items = await collection.find({}).toArray();
    //     if (items.length !== 10000)
    //         throw new Error(`Invalid, got ${items.length}`);
    // }
    // await bench(100, 'ori Mongodb find 10k', async () => {
    //     const item = await collection.find({}).batchSize(10001).toArray();
    // });
    // {
    //     const items = await client.execute(new FindCommand(User));
    //     if (items.length !== 10000)
    //         throw new Error(`Invalid, got ${items.length}`);
    // }
    // await bench(100, 'new client: FindCommand 10k', async () => {
    //     const response = await client.execute(new FindCommand(User));
    // });
    client.close();
    mongoClient.close();
}
main();
//# sourceMappingURL=test.js.map