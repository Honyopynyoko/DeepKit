import { DatabaseAdapter, DatabaseAdapterQueryFactory, DatabaseSession, Entity } from '@deepkit/orm';
import { ClassSchema } from '@deepkit/type';
import { ClassType } from '@deepkit/core';
import { MongoDatabaseQuery } from './query';
import { MongoPersistence } from './persistence';
import { MongoClient } from './client/client';
export declare class MongoDatabaseQueryFactory extends DatabaseAdapterQueryFactory {
    private client;
    private databaseSession;
    constructor(client: MongoClient, databaseSession: DatabaseSession<any>);
    createQuery<T extends Entity>(classType: ClassType<T> | ClassSchema<T>): MongoDatabaseQuery<T>;
}
export declare class MongoDatabaseAdapter extends DatabaseAdapter {
    readonly client: MongoClient;
    protected ormSequences: ClassSchema<import("@deepkit/type").ExtractClassDefinition<{
        name: import("@deepkit/type").FieldDecoratorResult<string>;
        value: import("@deepkit/type").FieldDecoratorResult<number>;
    }>>;
    constructor(connectionString: string);
    getName(): string;
    getSchemaName(): string;
    createPersistence(session: DatabaseSession<this>): MongoPersistence;
    isNativeForeignKeyConstraintSupported(): boolean;
    queryFactory(databaseSession: DatabaseSession<any>): MongoDatabaseQueryFactory;
    disconnect(force?: boolean): void;
    getAutoIncrementSequencesCollection(): string;
    resetAutoIncrementSequences(): Promise<void>;
    migrate(classSchemas: Iterable<ClassSchema>): Promise<void>;
}
