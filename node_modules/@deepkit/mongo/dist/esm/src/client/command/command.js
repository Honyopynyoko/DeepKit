/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { getClassSchema, t } from '@deepkit/type';
import { asyncOperation } from '@deepkit/core';
import { deserialize, getBSONDecoder } from '@deepkit/bson';
import { MongoError } from '../error';
export class CommandMessage {
    constructor(schema, message, responseSchema, responseCallback) {
        this.schema = schema;
        this.message = message;
        this.responseSchema = responseSchema;
        this.responseCallback = responseCallback;
    }
}
export const BaseResponse = t.schema({
    ok: t.number,
    errmsg: t.string.optional,
    code: t.number.optional,
    codeName: t.string.optional,
});
export class Command {
    sendAndWait(schema, message, response) {
        if (!this.sender)
            throw new Error(`No sender set in command ${getClassSchema(this)}`);
        this.sender(schema, message);
        return asyncOperation((resolve, reject) => {
            this.current = { resolve, reject, response };
        });
    }
    handleResponse(response) {
        if (!this.current)
            throw new Error('Got handleResponse without active command');
        const message = this.current.response ? getBSONDecoder(this.current.response)(response) : deserialize(response);
        if (!message.ok) {
            console.error(message);
            this.current.reject(new MongoError(message.errmsg, message.code));
        }
        else {
            this.current.resolve(message);
        }
    }
}
//# sourceMappingURL=command.js.map