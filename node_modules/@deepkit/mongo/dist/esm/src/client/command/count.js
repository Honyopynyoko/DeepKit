/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { BaseResponse, Command } from './command';
import { getClassSchema, t } from '@deepkit/type';
class CountResponse extends t.extendClass(BaseResponse, {
    n: t.number,
}) {
}
const countSchema = t.schema({
    count: t.string,
    $db: t.string,
    limit: t.number.optional,
    query: t.any,
    skip: t.number.optional,
});
export class CountCommand extends Command {
    constructor(classSchema, query = {}, limit = 0, skip = 0) {
        super();
        this.classSchema = classSchema;
        this.query = query;
        this.limit = limit;
        this.skip = skip;
    }
    async execute(config) {
        const schema = getClassSchema(this.classSchema);
        const cmd = {
            count: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            query: this.query,
            limit: this.limit,
            skip: this.skip,
        };
        const res = await this.sendAndWait(countSchema, cmd, CountResponse);
        return res.n;
    }
    needsWritableHost() {
        return false;
    }
}
//# sourceMappingURL=count.js.map