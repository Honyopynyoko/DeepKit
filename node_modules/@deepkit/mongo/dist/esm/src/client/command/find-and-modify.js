/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { BaseResponse, Command } from './command';
import { getClassSchema, t } from '@deepkit/type';
class FindAndModifyResponse extends t.extendClass(BaseResponse, {
    value: t.any,
}) {
}
const findAndModifySchema = t.schema({
    findAndModify: t.string,
    $db: t.string,
    query: t.any,
    update: t.any,
    new: t.boolean,
    upsert: t.boolean,
    fields: t.map(t.number),
});
export class FindAndModifyCommand extends Command {
    constructor(classSchema, query, update) {
        super();
        this.classSchema = classSchema;
        this.query = query;
        this.update = update;
        this.upsert = false;
        this.fields = [];
        this.returnNew = false;
    }
    async execute(config) {
        const schema = getClassSchema(this.classSchema);
        const fields = {};
        for (const name of this.fields)
            fields[name] = 1;
        const cmd = {
            findAndModify: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            query: this.query,
            update: this.update,
            new: this.returnNew,
            upsert: this.upsert,
            fields: fields,
        };
        return await this.sendAndWait(findAndModifySchema, cmd, FindAndModifyResponse);
    }
    needsWritableHost() {
        return false;
    }
}
//# sourceMappingURL=find-and-modify.js.map