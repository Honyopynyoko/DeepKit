/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { BaseResponse, Command } from './command';
import { getClassSchema, t } from '@deepkit/type';
import { toFastProperties } from '@deepkit/core';
const findSchema = t.schema({
    find: t.string,
    $db: t.string,
    batchSize: t.number,
    limit: t.number,
    skip: t.number,
    filter: t.any,
    projection: t.any.optional,
    sort: t.any.optional,
});
export class FindCommand extends Command {
    constructor(classSchema, filter = {}, projection, sort, limit = 0, skip = 0) {
        super();
        this.classSchema = classSchema;
        this.filter = filter;
        this.projection = projection;
        this.sort = sort;
        this.limit = limit;
        this.skip = skip;
    }
    async execute(config) {
        const schema = getClassSchema(this.classSchema);
        const cmd = {
            find: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            filter: this.filter,
            limit: this.limit,
            skip: this.skip,
            batchSize: 1000000, //todo make configurable
        };
        if (this.projection)
            cmd.projection = this.projection;
        if (this.sort)
            cmd.sort = this.sort;
        const jit = schema.jit;
        let specialisedResponse = this.projection ? jit.mdbFindPartial : jit.mdbFind;
        if (!specialisedResponse) {
            if (this.projection) {
                specialisedResponse = t.extendSchema(BaseResponse, {
                    cursor: {
                        id: t.number,
                        firstBatch: t.array(t.partial(schema)),
                        nextBatch: t.array(t.partial(schema)),
                    },
                });
                jit.mdbFindPartial = specialisedResponse;
            }
            else {
                specialisedResponse = t.extendSchema(BaseResponse, {
                    cursor: {
                        id: t.number,
                        firstBatch: t.array(schema),
                        nextBatch: t.array(schema),
                    },
                });
                jit.mdbFind = specialisedResponse;
            }
            toFastProperties(jit);
        }
        const res = await this.sendAndWait(findSchema, cmd, specialisedResponse);
        //todo: implement fetchMore and decrease batchSize
        return res.cursor.firstBatch;
    }
    needsWritableHost() {
        return false;
    }
}
//# sourceMappingURL=find.js.map