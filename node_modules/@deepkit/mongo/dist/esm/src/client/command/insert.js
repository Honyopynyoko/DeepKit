/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { BaseResponse, Command } from './command';
import { getClassSchema, t } from '@deepkit/type';
import { toFastProperties } from '@deepkit/core';
class InsertResponse extends t.extendClass(BaseResponse, {
    n: t.number,
}) {
}
const insertSchema = t.schema({
    insert: t.string,
    $db: t.string,
});
export class InsertCommand extends Command {
    constructor(classSchema, documents) {
        super();
        this.classSchema = classSchema;
        this.documents = documents;
    }
    async execute(config) {
        const schema = getClassSchema(this.classSchema);
        const cmd = {
            insert: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            documents: this.documents,
        };
        const jit = schema.jit;
        let specialisedSchema = jit.mdbInsert;
        if (!specialisedSchema) {
            specialisedSchema = t.extendSchema(insertSchema, {
                documents: t.array(schema)
            });
            jit.mdbInsert = specialisedSchema;
            toFastProperties(jit);
        }
        const res = await this.sendAndWait(specialisedSchema, cmd, InsertResponse);
        return res.n;
    }
    needsWritableHost() {
        return true;
    }
}
//# sourceMappingURL=insert.js.map