/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { BaseResponse, Command } from './command';
import { getClassSchema, t } from '@deepkit/type';
class UpdateResponse extends t.extendClass(BaseResponse, {
    n: t.number,
}) {
}
const updateSchema = t.schema({
    update: t.string,
    $db: t.string,
    updates: t.array({
        q: t.any,
        // maybe in the future support classSchema. But `u` supports update statements https://docs.mongodb.com/manual/reference/operator/update/#id1
        u: t.any,
        multi: t.boolean,
    })
});
export class UpdateCommand extends Command {
    constructor(classSchema, updates = []) {
        super();
        this.classSchema = classSchema;
        this.updates = updates;
    }
    async execute(config) {
        const schema = getClassSchema(this.classSchema);
        const cmd = {
            update: schema.collectionName || schema.name || 'unknown',
            $db: schema.databaseSchemaName || config.defaultDb || 'admin',
            updates: this.updates
        };
        const res = await this.sendAndWait(updateSchema, cmd, UpdateResponse);
        return res.n;
    }
    needsWritableHost() {
        return false;
    }
}
//# sourceMappingURL=update.js.map