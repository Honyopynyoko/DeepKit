/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { getClassSchema, jsonSerializer, resolvePropertySchema } from '@deepkit/type';
import './mongo-serializer';
import { mongoSerializer } from './mongo-serializer';
import { convertQueryFilter } from '@deepkit/orm';
/**
 * Takes a mongo filter query and converts its class values to classType's mongo types, so you
 * can use it to send it to mongo.
 */
export function convertClassQueryToMongo(classType, query, fieldNamesMap = {}, customMapping = {}) {
    const serializer = mongoSerializer.for(getClassSchema(classType));
    return convertQueryFilter(classType, query, (convertClassType, path, value) => {
        return serializer.serializeProperty(path, value);
    }, fieldNamesMap, customMapping);
}
/**
 * Takes a mongo filter query and converts its plain values to classType's mongo types, so you
 * can use it to send it to mongo.
 */
export function convertPlainQueryToMongo(classType, target, fieldNamesMap = {}, customMapping = {}) {
    return convertQueryFilter(classType, target, (convertClassType, path, value) => {
        const property = resolvePropertySchema(convertClassType, path);
        const classValue = jsonSerializer.deserializeProperty(property, value);
        return mongoSerializer.serializeProperty(property, classValue);
    }, fieldNamesMap, customMapping);
}
//# sourceMappingURL=mapping.js.map