var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Entity, t, uuid, MultiIndex } from '@deepkit/type';
export class JobTaskQueue {
    constructor() {
        this.position = 0;
        this.tries = 0;
        this.result = '';
        this.added = new Date();
    }
}
__decorate([
    t,
    __metadata("design:type", Number)
], JobTaskQueue.prototype, "position", void 0);
__decorate([
    t,
    __metadata("design:type", Number)
], JobTaskQueue.prototype, "tries", void 0);
__decorate([
    t,
    __metadata("design:type", String)
], JobTaskQueue.prototype, "result", void 0);
__decorate([
    t,
    __metadata("design:type", Date)
], JobTaskQueue.prototype, "added", void 0);
let SubModel = class SubModel {
    constructor(label) {
        this.constructorUsed = false;
        this.label = label;
        this.constructorUsed = true;
    }
};
__decorate([
    t,
    __metadata("design:type", String)
], SubModel.prototype, "label", void 0);
__decorate([
    t.optional,
    __metadata("design:type", Number)
], SubModel.prototype, "age", void 0);
__decorate([
    t.optional,
    __metadata("design:type", JobTaskQueue)
], SubModel.prototype, "queue", void 0);
SubModel = __decorate([
    Entity('sub'),
    __metadata("design:paramtypes", [String])
], SubModel);
export { SubModel };
export var Plan;
(function (Plan) {
    Plan[Plan["DEFAULT"] = 0] = "DEFAULT";
    Plan[Plan["PRO"] = 1] = "PRO";
    Plan[Plan["ENTERPRISE"] = 2] = "ENTERPRISE";
})(Plan || (Plan = {}));
export const now = new Date();
let CollectionWrapper = class CollectionWrapper {
    constructor(items) {
        this.items = items;
    }
    add(item) {
        this.items.push(item);
    }
};
CollectionWrapper = __decorate([
    __param(0, t.array(SubModel).decorated.name('items')),
    __metadata("design:paramtypes", [Array])
], CollectionWrapper);
export { CollectionWrapper };
let StringCollectionWrapper = class StringCollectionWrapper {
    constructor(items) {
        this.items = items;
    }
    add(item) {
        this.items.push(item);
    }
};
StringCollectionWrapper = __decorate([
    __param(0, t.array(String).decorated.name('items')),
    __metadata("design:paramtypes", [Array])
], StringCollectionWrapper);
export { StringCollectionWrapper };
let SimpleModel = class SimpleModel {
    constructor(name) {
        this.id = uuid();
        this.type = 0;
        this.yesNo = false;
        this.plan = Plan.DEFAULT;
        this.created = now;
        this.types = [];
        this.children = [];
        this.childrenMap = {};
        this.childrenCollection = new CollectionWrapper([]);
        this.stringChildrenCollection = new StringCollectionWrapper([]);
        this.notMapped = {};
        this.excluded = 'default';
        this.excludedForMongo = 'excludedForMongo';
        this.excludedForPlain = 'excludedForPlain';
        this.name = name;
    }
};
__decorate([
    t.primary.uuid,
    __metadata("design:type", String)
], SimpleModel.prototype, "id", void 0);
__decorate([
    t.index(),
    __metadata("design:type", String)
], SimpleModel.prototype, "name", void 0);
__decorate([
    t,
    __metadata("design:type", Number)
], SimpleModel.prototype, "type", void 0);
__decorate([
    t,
    __metadata("design:type", Boolean)
], SimpleModel.prototype, "yesNo", void 0);
__decorate([
    t.enum(Plan),
    __metadata("design:type", Number)
], SimpleModel.prototype, "plan", void 0);
__decorate([
    t,
    __metadata("design:type", Date)
], SimpleModel.prototype, "created", void 0);
__decorate([
    t.array(t.string),
    __metadata("design:type", Array)
], SimpleModel.prototype, "types", void 0);
__decorate([
    t.optional,
    __metadata("design:type", SubModel)
], SimpleModel.prototype, "child", void 0);
__decorate([
    t.optional,
    __metadata("design:type", SimpleModel)
], SimpleModel.prototype, "selfChild", void 0);
__decorate([
    t.array(SubModel),
    __metadata("design:type", Array)
], SimpleModel.prototype, "children", void 0);
__decorate([
    t.map(SubModel),
    __metadata("design:type", Object)
], SimpleModel.prototype, "childrenMap", void 0);
__decorate([
    t.type(CollectionWrapper),
    __metadata("design:type", CollectionWrapper)
], SimpleModel.prototype, "childrenCollection", void 0);
__decorate([
    t.type(StringCollectionWrapper),
    __metadata("design:type", StringCollectionWrapper)
], SimpleModel.prototype, "stringChildrenCollection", void 0);
__decorate([
    t.any,
    __metadata("design:type", Object)
], SimpleModel.prototype, "anyField", void 0);
__decorate([
    t.exclude(),
    __metadata("design:type", String)
], SimpleModel.prototype, "excluded", void 0);
__decorate([
    t.exclude('mongo'),
    __metadata("design:type", String)
], SimpleModel.prototype, "excludedForMongo", void 0);
__decorate([
    t.exclude('json'),
    __metadata("design:type", String)
], SimpleModel.prototype, "excludedForPlain", void 0);
SimpleModel = __decorate([
    Entity('SimpleModel'),
    MultiIndex(['name', 'type'], { unique: true }),
    __metadata("design:paramtypes", [String])
], SimpleModel);
export { SimpleModel };
let SuperSimple = class SuperSimple {
};
__decorate([
    t.primary.mongoId,
    __metadata("design:type", String)
], SuperSimple.prototype, "_id", void 0);
__decorate([
    t,
    __metadata("design:type", String)
], SuperSimple.prototype, "name", void 0);
SuperSimple = __decorate([
    Entity('SuperSimple')
], SuperSimple);
export { SuperSimple };
let BaseClass = class BaseClass {
};
__decorate([
    t.primary.mongoId,
    __metadata("design:type", String)
], BaseClass.prototype, "_id", void 0);
BaseClass = __decorate([
    Entity('BaseClass')
], BaseClass);
export { BaseClass };
let ChildClass = class ChildClass extends BaseClass {
};
__decorate([
    t,
    __metadata("design:type", String)
], ChildClass.prototype, "name", void 0);
ChildClass = __decorate([
    Entity('ChildClass')
], ChildClass);
export { ChildClass };
//# sourceMappingURL=entities.js.map