"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var EntityPropertySeed_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserControllerInterface = exports.SeedDatabase = exports.EntitySeed = exports.EntityPropertyMapSeed = exports.EntityPropertyArraySeed = exports.EntityPropertySeed = exports.MigrationInfo = exports.MigrationEntityInfo = exports.DatabaseInfo = void 0;
const rpc_1 = require("@deepkit/rpc");
const type_1 = require("@deepkit/type");
let DatabaseInfo = class DatabaseInfo {
    constructor(name, adapter, serializedSchemas = []) {
        this.name = name;
        this.adapter = adapter;
        this.serializedSchemas = serializedSchemas;
    }
    getClassSchemas() {
        if (!this.classSchemas) {
            this.classSchemas = type_1.deserializeSchemas(this.serializedSchemas, '@orm-browser/' + this.name + '/');
        }
        return this.classSchemas;
    }
    getEntity(name) {
        for (const schema of this.getClassSchemas()) {
            if (schema.name === name)
                return schema;
        }
        throw new Error(`No schema for ${name} found`);
    }
};
DatabaseInfo = __decorate([
    type_1.entity.name('orm-browser/database'),
    __param(0, type_1.t.name('name')),
    __param(1, type_1.t.name('adapter')),
    __param(2, type_1.t.array(type_1.serializedSchemaDefinition).name('serializedSchemas')),
    __metadata("design:paramtypes", [String, String, Array])
], DatabaseInfo);
exports.DatabaseInfo = DatabaseInfo;
let MigrationEntityInfo = class MigrationEntityInfo {
    constructor(name) {
        this.name = name;
    }
};
MigrationEntityInfo = __decorate([
    type_1.entity.name('orm-broser/migration/entity'),
    __param(0, type_1.t.name('name')),
    __metadata("design:paramtypes", [String])
], MigrationEntityInfo);
exports.MigrationEntityInfo = MigrationEntityInfo;
let MigrationInfo = class MigrationInfo {
    constructor() {
        this.entites = {};
    }
};
__decorate([
    type_1.t.map(MigrationEntityInfo),
    __metadata("design:type", Object)
], MigrationInfo.prototype, "entites", void 0);
MigrationInfo = __decorate([
    type_1.entity.name('orm-broser/migration')
], MigrationInfo);
exports.MigrationInfo = MigrationInfo;
let EntityPropertySeed = EntityPropertySeed_1 = class EntityPropertySeed {
    constructor(name = '') {
        this.name = name;
        this.fake = false;
        this.reference = 'create';
        this.faker = '';
        this.properties = {};
    }
    getArray() {
        if (!this.array)
            this.array = new EntityPropertyArraySeed();
        return this.array;
    }
    getMap() {
        if (!this.map)
            this.map = new EntityPropertyMapSeed();
        return this.map;
    }
};
__decorate([
    type_1.t,
    __metadata("design:type", Boolean)
], EntityPropertySeed.prototype, "fake", void 0);
__decorate([
    type_1.t.string,
    __metadata("design:type", String)
], EntityPropertySeed.prototype, "reference", void 0);
__decorate([
    type_1.t.any,
    __metadata("design:type", Object)
], EntityPropertySeed.prototype, "value", void 0);
__decorate([
    type_1.t.type(() => EntityPropertyArraySeed).optional,
    __metadata("design:type", Object)
], EntityPropertySeed.prototype, "array", void 0);
__decorate([
    type_1.t.type(() => EntityPropertyMapSeed).optional,
    __metadata("design:type", Object)
], EntityPropertySeed.prototype, "map", void 0);
__decorate([
    type_1.t.any,
    __metadata("design:type", String)
], EntityPropertySeed.prototype, "faker", void 0);
__decorate([
    type_1.t.map(EntityPropertySeed_1),
    __metadata("design:type", Object)
], EntityPropertySeed.prototype, "properties", void 0);
EntityPropertySeed = EntityPropertySeed_1 = __decorate([
    type_1.entity.name('orm-browser/seed/property'),
    __metadata("design:paramtypes", [String])
], EntityPropertySeed);
exports.EntityPropertySeed = EntityPropertySeed;
let EntityPropertyArraySeed = class EntityPropertyArraySeed {
    constructor() {
        this.min = 1;
        this.max = 5;
        this.seed = new EntityPropertySeed;
    }
};
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], EntityPropertyArraySeed.prototype, "min", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], EntityPropertyArraySeed.prototype, "max", void 0);
__decorate([
    type_1.t.type(EntityPropertySeed),
    __metadata("design:type", EntityPropertySeed)
], EntityPropertyArraySeed.prototype, "seed", void 0);
EntityPropertyArraySeed = __decorate([
    type_1.entity.name('orm-browser/seed/property/array')
], EntityPropertyArraySeed);
exports.EntityPropertyArraySeed = EntityPropertyArraySeed;
let EntityPropertyMapSeed = class EntityPropertyMapSeed {
    constructor() {
        this.key = { fake: true, faker: 'random.word' };
        this.min = 1;
        this.max = 5;
        this.seed = new EntityPropertySeed();
    }
};
__decorate([
    type_1.t.any,
    __metadata("design:type", Object)
], EntityPropertyMapSeed.prototype, "key", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], EntityPropertyMapSeed.prototype, "min", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], EntityPropertyMapSeed.prototype, "max", void 0);
__decorate([
    type_1.t.type(EntityPropertySeed),
    __metadata("design:type", EntityPropertySeed)
], EntityPropertyMapSeed.prototype, "seed", void 0);
EntityPropertyMapSeed = __decorate([
    type_1.entity.name('orm-browser/seed/property/map')
], EntityPropertyMapSeed);
exports.EntityPropertyMapSeed = EntityPropertyMapSeed;
let EntitySeed = class EntitySeed {
    constructor() {
        this.truncate = true;
        this.active = false;
        this.amount = 1000;
        this.properties = {};
    }
};
__decorate([
    type_1.t,
    __metadata("design:type", Boolean)
], EntitySeed.prototype, "truncate", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Boolean)
], EntitySeed.prototype, "active", void 0);
__decorate([
    type_1.t,
    __metadata("design:type", Number)
], EntitySeed.prototype, "amount", void 0);
__decorate([
    type_1.t.map(EntityPropertySeed),
    __metadata("design:type", Object)
], EntitySeed.prototype, "properties", void 0);
EntitySeed = __decorate([
    type_1.entity.name('orm-browser/seed/entity')
], EntitySeed);
exports.EntitySeed = EntitySeed;
let SeedDatabase = class SeedDatabase {
    constructor() {
        this.entities = {};
    }
};
__decorate([
    type_1.t.map(EntitySeed),
    __metadata("design:type", Object)
], SeedDatabase.prototype, "entities", void 0);
SeedDatabase = __decorate([
    type_1.entity.name('orm-browser/seed/database')
], SeedDatabase);
exports.SeedDatabase = SeedDatabase;
exports.BrowserControllerInterface = rpc_1.ControllerSymbol('orm-browser/controller', [DatabaseInfo]);
//# sourceMappingURL=api.js.map