import { ChangesInterface, ClassSchema, SerializedSchema } from '@deepkit/type';
import { FakerTypes } from './faker';
import { Forward } from '@deepkit/core';
export declare type DatabaseCommit = {
    [dbName: string]: {
        addedIds: {
            [entityName: string]: number[];
        };
        added: {
            [entityName: string]: any[];
        };
        removed: {
            [entityName: string]: {
                [pkName: string]: any;
            }[];
        };
        changed: {
            [entityName: string]: {
                pk: {
                    [pkName: string]: any;
                };
                changes: ChangesInterface<any>;
            }[];
        };
    };
};
export declare class DatabaseInfo {
    name: string;
    adapter: string;
    serializedSchemas: SerializedSchema[];
    constructor(name: string, adapter: string, serializedSchemas?: SerializedSchema[]);
    protected classSchemas?: ClassSchema[];
    getClassSchemas(): ClassSchema[];
    getEntity(name: string): ClassSchema;
}
export declare class MigrationEntityInfo {
    name: string;
    constructor(name: string);
}
export declare class MigrationInfo {
    entites: {
        [name: string]: MigrationEntityInfo;
    };
}
export declare type SeedResult = {
    function: string;
    example: any;
}[];
export declare type EntityPropertySeedReference = 'random' | 'random-seed' | 'create';
export declare class EntityPropertySeed {
    name: string;
    fake: boolean;
    reference: EntityPropertySeedReference;
    value?: any;
    array?: Forward<EntityPropertyArraySeed>;
    map?: Forward<EntityPropertyMapSeed>;
    faker: string;
    properties: {
        [name: string]: EntityPropertySeed;
    };
    constructor(name?: string);
    getArray(): EntityPropertyArraySeed;
    getMap(): EntityPropertyMapSeed;
}
export declare class EntityPropertyArraySeed {
    min: number;
    max: number;
    seed: EntityPropertySeed;
}
export declare class EntityPropertyMapSeed {
    key: {
        fake: boolean;
        faker: string;
    };
    min: number;
    max: number;
    seed: EntityPropertySeed;
}
export declare class EntitySeed {
    truncate: boolean;
    active: boolean;
    amount: number;
    properties: {
        [name: string]: EntityPropertySeed;
    };
}
export declare class SeedDatabase {
    entities: {
        [name: string]: EntitySeed;
    };
}
export declare type QueryResult = {
    error?: string;
    log: string[];
    executionTime: number;
    result: any;
};
export declare const BrowserControllerInterface: import("@deepkit/rpc").ControllerDefinition<BrowserControllerInterface>;
export interface BrowserControllerInterface {
    getDatabases(): DatabaseInfo[];
    resetAllTables(name: string): Promise<void>;
    seed(dbName: string, seed: SeedDatabase): Promise<void>;
    migrate(name: string): Promise<void>;
    getMigrations(name: string): Promise<{
        [name: string]: {
            sql: string[];
            diff: string;
        };
    }>;
    getFakerTypes(): Promise<FakerTypes>;
    getDatabase(name: string): DatabaseInfo;
    query(dbName: string, entityName: string, query: string): Promise<QueryResult>;
    getItems(dbName: string, entityName: string, filter: {
        [name: string]: any;
    }, sort: {
        [name: string]: any;
    }, limit: number, skip: number): Promise<{
        items: any[];
        executionTime: number;
    }>;
    getCount(dbName: string, entityName: string, filter: {
        [name: string]: any;
    }): Promise<number>;
    create(dbName: string, entityName: string): Promise<any>;
    commit(commit: DatabaseCommit): Promise<any>;
}
