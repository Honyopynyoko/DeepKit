import { ClassType } from '@deepkit/core';
import { ClassSchema } from '@deepkit/type';
import { InjectorContext } from '@deepkit/injector';
import { Database } from './database';
/**
 * Class to register a new database and resolve a schema/type to a database.
 */
export declare class DatabaseRegistry {
    protected scopedContext: InjectorContext;
    protected readonly databaseTypes: ClassType<Database<any>>[];
    protected migrateOnStartup: boolean;
    protected databaseNameMap: Map<string, Database<any>>;
    protected databases: Database<any>[];
    protected databaseMap: Map<ClassType<any>, Database<any>>;
    protected databaseOptions: Map<ClassType<any>, {
        migrateOnStartup?: boolean | undefined;
    }>;
    protected initialized: boolean;
    constructor(scopedContext: InjectorContext, databaseTypes?: ClassType<Database<any>>[], migrateOnStartup?: boolean);
    setMigrateOnStartup(v: boolean): void;
    /**
     * Reads database from a path. Imports the given paths
     * and looks for instantiated Database classes. All instantiated Database classes will be returned.
     *
     * This is an alternative way to find Database and entities compared to
     * a config file driven way.
     */
    readDatabase(paths: string[]): void;
    onShutDown(): void;
    addDatabase(database: ClassType, options?: {
        migrateOnStartup?: boolean;
    }): void;
    getDatabaseTypes(): ClassType<Database<any>>[];
    isMigrateOnStartup(database: ClassType): boolean;
    init(): void;
    getDatabaseForEntity(entity: ClassSchema | ClassType): Database<any>;
    getDatabases(): Database<any>[];
    getDatabase(classType: ClassType): Database<any> | undefined;
    getDatabaseByName(name: string): Database<any> | undefined;
}
