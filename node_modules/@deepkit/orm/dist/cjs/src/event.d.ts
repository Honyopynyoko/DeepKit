import { AsyncEmitterEvent, AsyncEventEmitter, ClassType } from '@deepkit/core';
import type { Changes, ClassSchema, ExtractPrimaryKeyType } from '@deepkit/type';
import type { DatabasePersistenceChangeSet } from './database-adapter';
import type { DatabaseSession } from './database-session';
import type { Query } from './query';
import type { DeleteResult, PatchResult } from './type';
export declare class UnitOfWorkCommitEvent<T> extends AsyncEmitterEvent {
    readonly databaseSession: DatabaseSession<any>;
    constructor(databaseSession: DatabaseSession<any>);
}
export declare class UnitOfWorkEvent<T> extends AsyncEmitterEvent {
    readonly classSchema: ClassSchema<T>;
    readonly databaseSession: DatabaseSession<any>;
    readonly items: T[];
    constructor(classSchema: ClassSchema<T>, databaseSession: DatabaseSession<any>, items: T[]);
    isSchemaOf<T>(classTypeOrSchema: ClassType<T> | ClassSchema<T>): this is UnitOfWorkEvent<T>;
    getPrimaryKeys(): ExtractPrimaryKeyType<T>[];
}
export declare class UnitOfWorkUpdateEvent<T> extends AsyncEmitterEvent {
    readonly classSchema: ClassSchema<T>;
    readonly databaseSession: DatabaseSession<any>;
    readonly changeSets: DatabasePersistenceChangeSet<T>[];
    constructor(classSchema: ClassSchema<T>, databaseSession: DatabaseSession<any>, changeSets: DatabasePersistenceChangeSet<T>[]);
    isSchemaOf<T>(classTypeOrSchema: ClassType<T> | ClassSchema<T>): this is UnitOfWorkUpdateEvent<T>;
}
export declare class UnitOfWorkDatabaseEmitter {
    protected parent?: UnitOfWorkDatabaseEmitter | undefined;
    readonly onUpdatePre: AsyncEventEmitter<UnitOfWorkUpdateEvent<any>>;
    readonly onUpdatePost: AsyncEventEmitter<UnitOfWorkUpdateEvent<any>>;
    readonly onInsertPre: AsyncEventEmitter<UnitOfWorkEvent<any>>;
    readonly onInsertPost: AsyncEventEmitter<UnitOfWorkEvent<any>>;
    readonly onDeletePre: AsyncEventEmitter<UnitOfWorkEvent<any>>;
    readonly onDeletePost: AsyncEventEmitter<UnitOfWorkEvent<any>>;
    readonly onCommitPre: AsyncEventEmitter<UnitOfWorkCommitEvent<any>>;
    constructor(parent?: UnitOfWorkDatabaseEmitter | undefined);
    fork(): UnitOfWorkDatabaseEmitter;
}
export declare class QueryDatabaseEvent<T> extends AsyncEmitterEvent {
    readonly databaseSession: DatabaseSession<any>;
    readonly classSchema: ClassSchema<T>;
    query: Query<T>;
    constructor(databaseSession: DatabaseSession<any>, classSchema: ClassSchema<T>, query: Query<T>);
    isSchemaOf<T>(classTypeOrSchema: ClassType<T> | ClassSchema<T>): this is QueryDatabaseDeleteEvent<T>;
}
export declare class QueryDatabaseDeleteEvent<T> extends AsyncEmitterEvent {
    readonly databaseSession: DatabaseSession<any>;
    readonly classSchema: ClassSchema<T>;
    query: Query<T>;
    readonly deleteResult: DeleteResult<T>;
    constructor(databaseSession: DatabaseSession<any>, classSchema: ClassSchema<T>, query: Query<T>, deleteResult: DeleteResult<T>);
    isSchemaOf<T>(classTypeOrSchema: ClassType<T> | ClassSchema<T>): this is QueryDatabaseDeleteEvent<T>;
}
export declare class QueryDatabasePatchEvent<T> extends AsyncEmitterEvent {
    readonly databaseSession: DatabaseSession<any>;
    readonly classSchema: ClassSchema<T>;
    query: Query<T>;
    readonly patch: Changes<T>;
    readonly patchResult: PatchResult<T>;
    returning: (keyof T & string)[];
    constructor(databaseSession: DatabaseSession<any>, classSchema: ClassSchema<T>, query: Query<T>, patch: Changes<T>, patchResult: PatchResult<T>);
    isSchemaOf<T>(classTypeOrSchema: ClassType<T> | ClassSchema<T>): this is QueryDatabasePatchEvent<T>;
}
export declare class QueryDatabaseEmitter {
    protected parent?: QueryDatabaseEmitter | undefined;
    /**
     * For all queries related to fetching data like: find, findOne, count, has.
     */
    readonly onFetch: AsyncEventEmitter<QueryDatabaseEvent<any>>;
    readonly onDeletePre: AsyncEventEmitter<QueryDatabaseDeleteEvent<any>>;
    readonly onDeletePost: AsyncEventEmitter<QueryDatabaseDeleteEvent<any>>;
    readonly onPatchPre: AsyncEventEmitter<QueryDatabasePatchEvent<any>>;
    readonly onPatchPost: AsyncEventEmitter<QueryDatabasePatchEvent<any>>;
    constructor(parent?: QueryDatabaseEmitter | undefined);
    fork(): QueryDatabaseEmitter;
}
