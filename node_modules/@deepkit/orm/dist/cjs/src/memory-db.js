"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryDatabaseAdapter = exports.MemoryQueryFactory = exports.MemoryQuery = void 0;
const query_1 = require("./query");
const type_1 = require("@deepkit/type");
const core_1 = require("@deepkit/core");
const database_adapter_1 = require("./database-adapter");
const utils_1 = require("./utils");
const query_filter_1 = require("./query-filter");
const formatter_1 = require("./formatter");
const memorySerializer = new class extends type_1.jsonSerializer.fork('memory') {
};
memorySerializer.fromClass.register('undefined', (property, state) => {
    //mongo does not support 'undefined' as column type, so we convert automatically to null
    state.addSetter(`null`);
});
memorySerializer.toClass.register('undefined', (property, state) => {
    //mongo does not support 'undefined' as column type, so we store always null. depending on the property definition
    //we convert back to undefined or keep it null
    if (property.isOptional)
        return state.addSetter(`undefined`);
    if (property.isNullable)
        return state.addSetter(`null`);
});
memorySerializer.fromClass.register('null', (property, state) => {
    //mongo does not support 'undefined' as column type, so we convert automatically to null
    state.addSetter(`null`);
});
memorySerializer.toClass.register('null', (property, state) => {
    //mongo does not support 'undefined' as column type, so we store always null. depending on the property definition
    //we convert back to undefined or keep it null
    if (property.isOptional)
        return state.addSetter(`undefined`);
    if (property.isNullable)
        return state.addSetter(`null`);
});
function sortAsc(a, b) {
    if (a > b)
        return +1;
    if (a < b)
        return -1;
    return 0;
}
function sortDesc(a, b) {
    if (a > b)
        return -1;
    if (a < b)
        return +1;
    return 0;
}
function sort(items, field, sortFn) {
    items.sort((a, b) => {
        return sortFn(a[field], b[field]);
    });
}
class MemoryQuery extends query_1.Query {
    constructor() {
        super(...arguments);
        this.isMemory = true;
    }
    isMemoryDb() {
        return this.isMemory;
    }
}
exports.MemoryQuery = MemoryQuery;
const find = (adapter, classSchema, model) => {
    const rawItems = [...adapter.getStore(classSchema).items.values()];
    const serializer = memorySerializer.for(classSchema);
    const items = rawItems.map(v => serializer.deserialize(v));
    if (model.filter) {
        model.filter = query_filter_1.convertQueryFilter(classSchema, model.filter, (convertClassType, path, value) => {
            //this is important to convert relations to its foreignKey value
            return serializer.serializeProperty(path, value);
        }, {}, {
            $parameter: (name, value) => {
                if (undefined === model.parameters[value]) {
                    throw new Error(`Parameter ${value} not defined in ${classSchema.getClassName()} query.`);
                }
                return model.parameters[value];
            }
        });
    }
    let filtered = model.filter ? utils_1.findQueryList(items, model.filter) : items;
    if (model.hasJoins()) {
        throw new Error('MemoryDatabaseAdapter does not support joins. Please use another lightweight adapter like SQLite.');
    }
    if (model.sort) {
        for (const [name, direction] of Object.entries(model.sort)) {
            sort(filtered, name, direction === 'asc' ? sortAsc : sortDesc);
        }
    }
    if (model.skip && model.limit) {
        filtered = filtered.slice(model.skip, model.skip + model.limit);
    }
    else if (model.limit) {
        filtered = filtered.slice(0, model.limit);
    }
    else if (model.skip) {
        filtered = filtered.slice(model.skip);
    }
    return filtered;
};
const remove = (adapter, classSchema, toDelete) => {
    const items = adapter.getStore(classSchema).items;
    const primaryKey = classSchema.getPrimaryFieldName();
    for (const item of toDelete) {
        items.delete(item[primaryKey]);
    }
};
class MemoryQueryFactory extends database_adapter_1.DatabaseAdapterQueryFactory {
    constructor(adapter, databaseSession) {
        super();
        this.adapter = adapter;
        this.databaseSession = databaseSession;
    }
    createQuery(classType) {
        const schema = type_1.getClassSchema(classType);
        const adapter = this.adapter;
        class Resolver extends query_1.GenericQueryResolver {
            createFormatter(withIdentityMap = false) {
                return new formatter_1.Formatter(this.classSchema, memorySerializer, this.session.getHydrator(), withIdentityMap ? this.session.identityMap : undefined);
            }
            async count(model) {
                if (this.session.logger.logger) {
                    this.session.logger.logger.log('count', model.filter);
                }
                const items = find(adapter, schema, model);
                return items.length;
            }
            async delete(model, deleteResult) {
                if (this.session.logger.logger) {
                    this.session.logger.logger.log('delete', model.filter);
                }
                const items = find(adapter, schema, model);
                const primaryKey = schema.getPrimaryFieldName();
                for (const item of items) {
                    deleteResult.primaryKeys.push(item[primaryKey]);
                }
                remove(adapter, schema, items);
            }
            async find(model) {
                const items = find(adapter, schema, model);
                if (this.session.logger.logger) {
                    this.session.logger.logger.log('find', model.filter);
                }
                const formatter = this.createFormatter(model.withIdentityMap);
                return items.map(v => formatter.hydrate(model, v));
            }
            async findOneOrUndefined(model) {
                const items = find(adapter, schema, model);
                if (items[0])
                    return this.createFormatter(model.withIdentityMap).hydrate(model, items[0]);
                return undefined;
            }
            async has(model) {
                const items = find(adapter, schema, model);
                return items.length > 0;
            }
            async patch(model, changes, patchResult) {
                const items = find(adapter, schema, model);
                const store = adapter.getStore(schema);
                const primaryKey = schema.getPrimaryFieldName();
                const serializer = memorySerializer.for(schema);
                patchResult.modified = items.length;
                for (const item of items) {
                    if (changes.$inc) {
                        for (const [path, v] of Object.entries(changes.$inc)) {
                            core_1.setPathValue(item, path, core_1.getPathValue(item, path) + v);
                        }
                    }
                    if (changes.$unset) {
                        for (const path of Object.keys(changes.$unset)) {
                            core_1.deletePathValue(item, path);
                        }
                    }
                    if (changes.$set) {
                        for (const [path, v] of Object.entries(changes.$set)) {
                            core_1.setPathValue(item, path, v);
                        }
                    }
                    if (model.returning) {
                        for (const f of model.returning) {
                            if (!patchResult.returning[f])
                                patchResult.returning[f] = [];
                            const v = patchResult.returning[f];
                            if (v)
                                v.push(item[f]);
                        }
                    }
                    patchResult.primaryKeys.push(item[primaryKey]);
                    store.items.set(item[primaryKey], serializer.serialize(item));
                }
            }
        }
        return new MemoryQuery(type_1.getClassSchema(classType), this.databaseSession, new Resolver(type_1.getClassSchema(classType), this.databaseSession));
    }
}
exports.MemoryQueryFactory = MemoryQueryFactory;
class MemoryDatabaseAdapter extends database_adapter_1.DatabaseAdapter {
    constructor() {
        super(...arguments);
        this.store = new Map();
    }
    async migrate(classSchemas) {
    }
    isNativeForeignKeyConstraintSupported() {
        return false;
    }
    getStore(classSchema) {
        let store = this.store.get(classSchema);
        if (!store) {
            store = { items: new Map, autoIncrement: 0 };
            this.store.set(classSchema, store);
        }
        return store;
    }
    createPersistence() {
        const adapter = this;
        class Persistence extends database_adapter_1.DatabasePersistence {
            async remove(classSchema, items) {
                const store = adapter.getStore(classSchema);
                const primaryKey = classSchema.getPrimaryFieldName();
                for (const item of items) {
                    store.items.delete(item[primaryKey]);
                }
            }
            async insert(classSchema, items) {
                const store = adapter.getStore(classSchema);
                const serializer = memorySerializer.for(classSchema);
                const autoIncrement = classSchema.getAutoIncrementField();
                const primaryKey = classSchema.getPrimaryFieldName();
                for (const item of items) {
                    if (autoIncrement) {
                        store.autoIncrement++;
                        item[autoIncrement.name] = store.autoIncrement;
                    }
                    store.items.set(item[primaryKey], serializer.serialize(item));
                }
            }
            async update(classSchema, changeSets) {
                const store = adapter.getStore(classSchema);
                const serializer = memorySerializer.for(classSchema);
                const primaryKey = classSchema.getPrimaryFieldName();
                for (const changeSet of changeSets) {
                    store.items.set(changeSet.item[primaryKey], serializer.serialize(changeSet.item));
                }
            }
            async release() {
            }
        }
        return new Persistence;
    }
    disconnect(force) {
    }
    getName() {
        return 'memory';
    }
    getSchemaName() {
        return '';
    }
    queryFactory(databaseSession) {
        return new MemoryQueryFactory(this, databaseSession);
    }
}
exports.MemoryDatabaseAdapter = MemoryDatabaseAdapter;
//# sourceMappingURL=memory-db.js.map