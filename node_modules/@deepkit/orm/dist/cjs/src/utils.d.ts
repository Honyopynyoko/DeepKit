import { Changes, ClassSchema } from '@deepkit/type';
import { Entity } from './type';
import { FilterQuery } from './query';
export declare type FlattenIfArray<T> = T extends Array<any> ? T[0] : T;
export declare type FieldName<T> = keyof T & string;
export declare function getClassSchemaInstancePairs<T extends Entity>(items: Iterable<T>): Map<ClassSchema, T[]>;
export declare function findQuerySatisfied<T extends {
    [index: string]: any;
}>(target: T, query: FilterQuery<T>): boolean;
export declare function findQueryList<T extends {
    [index: string]: any;
}>(items: T[], query: FilterQuery<T>): T[];
export declare type Placeholder<T> = () => T;
export declare type Resolve<T extends {
    _: Placeholder<any>;
}> = ReturnType<T['_']>;
export declare type Replace<T, R> = T & {
    _: Placeholder<R>;
};
export declare function buildChangesFromInstance<T>(item: T): Changes<T>;
