"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildChangesFromInstance = exports.findQueryList = exports.findQuerySatisfied = exports.getClassSchemaInstancePairs = void 0;
const type_1 = require("@deepkit/type");
const sift_1 = __importDefault(require("sift"));
const identity_map_1 = require("./identity-map");
function getClassSchemaInstancePairs(items) {
    const map = new Map();
    for (const item of items) {
        const classSchema = type_1.getClassSchema(type_1.getClassTypeFromInstance(item));
        let items = map.get(classSchema);
        if (!items) {
            items = [];
            map.set(classSchema, items);
        }
        items.push(item);
    }
    return map;
}
exports.getClassSchemaInstancePairs = getClassSchemaInstancePairs;
function findQuerySatisfied(target, query) {
    //get rid of "Excessive stack depth comparing types 'any' and 'SiftQuery<T[]>'."
    return sift_1.default(query, [target]).length > 0;
}
exports.findQuerySatisfied = findQuerySatisfied;
function findQueryList(items, query) {
    //get rid of "Excessive stack depth comparing types 'any' and 'SiftQuery<T[]>'."
    return sift_1.default(query, items);
}
exports.findQueryList = findQueryList;
function buildChangesFromInstance(item) {
    const state = identity_map_1.getInstanceStateFromItem(item);
    const lastSnapshot = state.getSnapshot();
    const currentSnapshot = state.classState.snapshot(item);
    console.log(item, state.classState.classSchema.getClassName(), state.item === item, lastSnapshot, currentSnapshot);
    return state.classState.changeDetector(lastSnapshot, currentSnapshot, item) || new type_1.Changes;
}
exports.buildChangesFromInstance = buildChangesFromInstance;
//# sourceMappingURL=utils.js.map