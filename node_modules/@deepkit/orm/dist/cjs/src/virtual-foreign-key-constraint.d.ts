import type { QueryDatabaseDeleteEvent, QueryDatabasePatchEvent, UnitOfWorkEvent, UnitOfWorkUpdateEvent } from './event';
import type { ClassSchema, PropertySchema } from '@deepkit/type';
import type { Database } from './database';
declare type IncomingReference = {
    classSchema: ClassSchema;
    property: PropertySchema;
};
/**
 * For database adapter that are not capable of having foreign key constraints
 * this provides a virtual implementation that covers most of the same functionality.
 */
export declare class VirtualForeignKeyConstraint {
    protected database: Database;
    constructor(database: Database);
    protected resolveReferencesTo(fromClassSchema: ClassSchema): IncomingReference[];
    onQueryDelete(event: QueryDatabaseDeleteEvent<any>): Promise<void>;
    onQueryPatch(event: QueryDatabasePatchEvent<any>): Promise<void>;
    onUoWDelete(event: UnitOfWorkEvent<any>): Promise<void>;
    onUoWUpdate(event: UnitOfWorkUpdateEvent<any>): Promise<void>;
}
export {};
