"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const memory_db_1 = require("../src/memory-db");
const database_1 = require("../src/database");
const type_1 = require("@deepkit/type");
globals_1.test('memory-db', async () => {
    function MinLength(minLength) {
        return (v) => {
            if (v.length < minLength)
                throw new Error(`Min length is ${minLength}`);
        };
    }
    const s = type_1.t.schema({
        id: type_1.t.number.primary,
        username: type_1.t.string.validator(MinLength(5))
    }, { name: 'User' });
    {
        const item = type_1.plainToClass(s, { id: 2, username: '123456' });
        globals_1.expect(type_1.validate(s, item)).toEqual([]);
    }
    {
        const item = type_1.plainToClass(s, { id: 2, username: '1234' });
        globals_1.expect(type_1.validate(s, item)).toEqual([{ code: 'error', message: 'Min length is 5', path: 'username' }]);
    }
    const database = new database_1.Database(new memory_db_1.MemoryDatabaseAdapter());
    await database.persist(type_1.plainToClass(s, { id: 2, username: '123456' }));
    await globals_1.expect(() => database.persist(type_1.plainToClass(s, { id: 2, username: '123' }))).rejects.toThrow('Validation error for class User:\nusername(error): Min length is 5');
    await database.persist(type_1.plainToClass(s, { id: 3, username: 'Peter' }));
    await database.persist(type_1.plainToClass(s, { id: 4, username: 'JohnLong' }));
    const item = await database.query(s).findOne();
    globals_1.expect(item.id).toBe(2);
    globals_1.expect(item.username).toBe('123456');
    await database.query(s).filter({ username: '123456' }).deleteOne();
    globals_1.expect(await (await database.query(s).find()).length).toBe(2);
    await database.query(s).filter({ username: 'Peter' }).patchOne({ username: 'Peter2' });
    globals_1.expect((await database.query(s).filter({ id: 3 }).findOne()).username).toBe('Peter2');
    await database.query(s).deleteMany();
    globals_1.expect(await (await database.query(s).find()).length).toBe(0);
});
//# sourceMappingURL=database.spec.js.map