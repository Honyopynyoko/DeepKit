import { ClassSchema, PropertySchema, Serializer } from '@deepkit/type';
import { DatabaseQueryModel } from './query';
import { ClassType } from '@deepkit/core';
import { ClassState, IdentityMap, PKHash } from './identity-map';
export declare type HydratorFn = (item: any) => Promise<void>;
export declare function setHydratedDatabaseSession(item: any, hydrator: (item: any) => Promise<void>): void;
declare type DBRecord = {
    [name: string]: any;
};
/**
 * Every query resolving gets its own formatter.
 */
export declare class Formatter {
    protected rootClassSchema: ClassSchema;
    protected serializer: Serializer;
    protected hydrator?: HydratorFn | undefined;
    protected identityMap?: IdentityMap | undefined;
    protected referenceClasses: Map<ClassSchema, ClassType>;
    protected instancePools: Map<ClassType, Map<PKHash, any>>;
    withIdentityMap: boolean;
    protected rootSerializer: import("@deepkit/type").ScopedSerializer<ClassSchema<any>>;
    protected rootPkHash: (value: any) => string;
    protected rootClassState: ClassState<any>;
    constructor(rootClassSchema: ClassSchema, serializer: Serializer, hydrator?: HydratorFn | undefined, identityMap?: IdentityMap | undefined);
    protected getInstancePoolForClass(classType: ClassType): Map<PKHash, any>;
    hydrate<T>(model: DatabaseQueryModel<T, any, any>, dbRecord: DBRecord): any;
    protected makeInvalidReference(item: any, classSchema: ClassSchema, propertySchema: PropertySchema): void;
    protected getReferenceClass<T>(classSchema: ClassSchema<T>): ClassType<T>;
    protected getReference(classSchema: ClassSchema, dbRecord: DBRecord, propertySchema: PropertySchema, isPartial: boolean): object | undefined | null;
    protected hydrateModel(model: DatabaseQueryModel<any, any, any>, classSchema: ClassSchema, dbRecord: DBRecord): any;
    protected assignJoins(model: DatabaseQueryModel<any, any, any>, classSchema: ClassSchema, dbRecord: DBRecord, item: any): {
        [name: string]: true;
    };
    protected createObject(model: DatabaseQueryModel<any, any, any>, classState: ClassState, classSchema: ClassSchema, dbRecord: DBRecord): any;
}
export {};
