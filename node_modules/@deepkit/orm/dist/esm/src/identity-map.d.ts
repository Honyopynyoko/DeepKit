/// <reference types="node" />
import { ClassSchema, JSONPartial, PartialEntity } from '@deepkit/type';
import { Entity } from './type';
import { inspect } from 'util';
export declare function getNormalizedPrimaryKey(schema: ClassSchema, primaryKey: any): {
    [name: string]: any;
};
export declare class ClassState<T = any> {
    classSchema: ClassSchema<T>;
    snapshot: (value: any) => any;
    primaryKeyExtractor: (value: any) => Partial<T>;
    primaryKeyHashGenerator: (value: any) => string;
    simplePrimaryKeyHashGenerator: (value: any) => string;
    changeDetector: (last: any, current: any, item: T) => import("@deepkit/type").ItemChanges<T> | undefined;
    constructor(classSchema: ClassSchema<T>);
}
export declare function getClassState<T>(classSchema: ClassSchema<T>): ClassState<T>;
declare class InstanceState<T extends Entity> {
    classState: ClassState<T>;
    item: T;
    /**
     * Whether current state is known in database.
     */
    knownInDatabase: boolean;
    /**
     * This represents the last known values known to be in the database.
     * The data is used for change-detection + last known primary key extraction.
     * References store only its primary keys.
     */
    snapshot?: JSONPartial<T>;
    /**
     * Whether the item was originally from the database (and thus PK are known there).
     */
    fromDatabase: boolean;
    protected lastPKHash?: string;
    constructor(classState: ClassState<T>, item: T);
    [inspect.custom](): string;
    toString(): string;
    getSnapshot(): JSONPartial<T>;
    isFromDatabase(): boolean;
    isKnownInDatabase(): boolean;
    markAsFromDatabase(): void;
    markAsPersisted(): void;
    getLastKnownPK(): Partial<T>;
    getLastKnownPKHash(): string;
    markAsDeleted(): void;
}
export declare function getInstanceStateFromItem<T>(item: T): InstanceState<T>;
export declare function getInstanceState<T>(classState: ClassState<T>, item: T): InstanceState<T>;
export declare type PKHash = string;
declare type Store = {
    ref: any;
    stale: boolean;
};
export declare class IdentityMap {
    registry: Map<ClassSchema<any>, Map<string, Store>>;
    deleteMany<T>(classSchema: ClassSchema<T>, pks: Partial<T>[]): void;
    deleteManyBySimplePK<T>(classSchema: ClassSchema<T>, pks: any[]): void;
    clear<T>(): void;
    isKnown<T>(item: T): boolean;
    storeMany<T>(classSchema: ClassSchema<T>, items: PartialEntity<T>[]): void;
    store<T>(classSchema: ClassSchema<T>, item: T): void;
    getByHash<T>(classSchema: ClassSchema<T>, pk: PKHash): T | undefined;
    protected getStore(classSchema: ClassSchema): Map<PKHash, Store>;
}
export {};
