import { DatabaseSession } from './database-session';
import { Query } from './query';
import { ClassSchema } from '@deepkit/type';
import { AbstractClassType } from '@deepkit/core';
import { DatabaseAdapter, DatabaseAdapterQueryFactory, DatabasePersistence } from './database-adapter';
import { Entity } from './type';
declare type SimpleStore<T> = {
    items: Map<any, T>;
    autoIncrement: number;
};
export declare class MemoryQuery<T> extends Query<T> {
    protected isMemory: boolean;
    isMemoryDb(): boolean;
}
export declare class MemoryQueryFactory extends DatabaseAdapterQueryFactory {
    protected adapter: MemoryDatabaseAdapter;
    protected databaseSession: DatabaseSession<any>;
    constructor(adapter: MemoryDatabaseAdapter, databaseSession: DatabaseSession<any>);
    createQuery<T extends Entity>(classType: AbstractClassType<T> | ClassSchema<T>): MemoryQuery<T>;
}
export declare class MemoryDatabaseAdapter extends DatabaseAdapter {
    protected store: Map<ClassSchema<any>, SimpleStore<any>>;
    migrate(classSchemas: Iterable<ClassSchema>): Promise<void>;
    isNativeForeignKeyConstraintSupported(): boolean;
    getStore<T>(classSchema: ClassSchema<T>): SimpleStore<T>;
    createPersistence(): DatabasePersistence;
    disconnect(force?: boolean): void;
    getName(): string;
    getSchemaName(): string;
    queryFactory(databaseSession: DatabaseSession<this>): MemoryQueryFactory;
}
export {};
