import { AsyncEventSubscription, ClassType } from '@deepkit/core';
import { ClassSchema } from '@deepkit/type';
import { DatabaseSession } from '../database-session';
import { Database } from '../database';
import { DatabaseAdapter } from '../database-adapter';
import { Query } from '../query';
import { Entity } from '../type';
interface SoftDeleteEntity extends Entity {
    deletedAt?: Date;
    deletedBy?: any;
}
export declare class SoftDeleteSession {
    protected session: DatabaseSession<any>;
    protected deletedBy: Map<ClassSchema<any>, any>;
    protected restoreItems: SoftDeleteEntity[];
    constructor(session: DatabaseSession<any>);
    setDeletedBy<T extends SoftDeleteEntity>(classType: ClassType<T> | ClassSchema<T>, deletedBy: T['deletedBy']): this;
    restore<T extends SoftDeleteEntity>(item: T): this;
}
export declare class SoftDeleteQuery<T extends SoftDeleteEntity> extends Query<T> {
    includeSoftDeleted: boolean;
    setDeletedBy?: T['deletedBy'];
    clone(): this;
    /**
     * Enables fetching, updating, and deleting of soft-deleted records.
     */
    withSoftDeleted(): this;
    /**
     * Includes only soft deleted records.
     */
    isSoftDeleted(): this;
    deletedBy(value: T['deletedBy']): this;
    restoreOne(): Promise<void>;
    restoreMany(): Promise<void>;
    hardDeleteOne(): Promise<void>;
    hardDeleteMany(): Promise<void>;
}
export declare class SoftDelete {
    protected database: Database<DatabaseAdapter>;
    protected listeners: Map<ClassSchema<any>, {
        queryFetch: AsyncEventSubscription;
        queryPatch: AsyncEventSubscription;
        queryDelete: AsyncEventSubscription;
        uowDelete: AsyncEventSubscription;
    }>;
    constructor(database: Database<DatabaseAdapter>);
    enable<T extends SoftDeleteEntity>(...classSchemaOrTypes: (ClassSchema<T> | ClassType<T>)[]): void;
    disable(...classSchemaOrTypes: (ClassSchema | ClassType)[]): void;
    protected disableForSchema(classSchemaOrType: ClassSchema | ClassType): void;
    protected enableForSchema<T extends SoftDeleteEntity>(classSchemaOrType: ClassSchema<T> | ClassType<T>): void;
}
export {};
