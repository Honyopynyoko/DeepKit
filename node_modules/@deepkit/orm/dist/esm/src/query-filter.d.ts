import { ClassSchema } from '@deepkit/type';
import { ClassType } from '@deepkit/core';
import { FilterQuery } from './query';
export declare type Converter = (convertClassType: ClassSchema, path: string, value: any) => any;
export declare type QueryFieldNames = {
    [name: string]: boolean;
};
export declare type QueryCustomFields = {
    [name: string]: (name: string, value: any, fieldNames: QueryFieldNames, converter: Converter) => any;
};
export declare function exportQueryFilterFieldNames(classSchema: ClassSchema<any>, filter: FilterQuery<any>): string[];
export declare function replaceQueryFilterParameter<T>(classSchema: ClassSchema<T>, filter: FilterQuery<T>, parameters: {
    [name: string]: any;
}): any;
export declare function convertQueryFilter<T, K extends keyof T, Q extends FilterQuery<T>>(classType: ClassType<T> | ClassSchema<T>, filter: Q, converter: Converter, fieldNamesMap?: QueryFieldNames, customMapping?: QueryCustomFields): Q;
