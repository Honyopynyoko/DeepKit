var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { getClassSchema, jsonSerializer, t } from '@deepkit/type';
import { BaseQuery, Formatter, getInstanceStateFromItem, getNormalizedPrimaryKey } from '../index';
import { getReference } from '../src/reference';
test('getNormalizedPrimaryKey', () => {
    class User {
        constructor() {
            this.id = '';
            this.name = 'Foo';
        }
    }
    __decorate([
        t.primary,
        __metadata("design:type", String)
    ], User.prototype, "id", void 0);
    __decorate([
        t,
        __metadata("design:type", String)
    ], User.prototype, "name", void 0);
    expect(getNormalizedPrimaryKey(getClassSchema(User), '123')).toEqual({ id: '123' });
    expect(getNormalizedPrimaryKey(getClassSchema(User), { id: '124' })).toEqual({ id: '124' });
    class User2 {
        constructor() {
            this.id = '';
            this.id2 = '';
            this.name = 'Foo';
        }
    }
    __decorate([
        t.primary,
        __metadata("design:type", String)
    ], User2.prototype, "id", void 0);
    __decorate([
        t.primary,
        __metadata("design:type", String)
    ], User2.prototype, "id2", void 0);
    __decorate([
        t,
        __metadata("design:type", String)
    ], User2.prototype, "name", void 0);
    expect(() => getNormalizedPrimaryKey(getClassSchema(User2), '123')).toThrow('Entity User2 has composite primary key');
    expect(getNormalizedPrimaryKey(getClassSchema(User2), { id: '124', id2: '444' })).toEqual({ id: '124', id2: '444' });
});
test('original schema', () => {
    let User = class User {
        constructor(username) {
            this.username = username;
        }
    };
    __decorate([
        t.primary,
        __metadata("design:type", Number)
    ], User.prototype, "id", void 0);
    User = __decorate([
        __param(0, t),
        __metadata("design:paramtypes", [String])
    ], User);
    const ref = getReference(getClassSchema(User), { id: 2 });
    expect(ref.id).toBe(2);
    expect(getClassSchema(ref) === getClassSchema(User)).toBe(true);
});
test('snapshot correct state', () => {
    const image = t.schema({
        id: t.number.primary
    });
    const user = t.schema({
        id: t.number.primary,
        username: t.string,
        image: t.type(image).optional.reference(),
        image2: t.type(image).optional.reference(),
    });
    const formatter = new Formatter(user, jsonSerializer);
    {
        const query = new BaseQuery(user);
        const user1 = formatter.hydrate(query.model, { username: 'Peter', id: '2', image: '1' });
        const snapshot = getInstanceStateFromItem(user1).getSnapshot();
        expect(snapshot.hasOwnProperty('image2')).toBe(true);
        //when schema changes we get from mongodb `undefined` for new fields, but our snapshot converts that to `null`
        // since all databases use `null` as `not defined`. this means we basically ignore `undefined` where possible.
        expect(snapshot).toEqual({ username: 'Peter', id: 2, image: { id: 1 }, image2: null });
        user1.image2 = getReference(image, { id: 2 });
        expect(user1.image2.id).toBe(2);
        getInstanceStateFromItem(user1).markAsPersisted();
        expect(getInstanceStateFromItem(user1).getSnapshot()).toEqual({ username: 'Peter', id: 2, image: { id: 1 }, image2: { id: 2 } });
        user1.image = undefined;
        getInstanceStateFromItem(user1).markAsPersisted();
        expect(getInstanceStateFromItem(user1).getSnapshot()).toEqual({ username: 'Peter', id: 2, image: null, image2: { id: 2 } });
    }
    {
        const query = new BaseQuery(user);
        const user1 = formatter.hydrate(query.model, { username: 'Peter2', id: '3', image: '1', image2: null });
        const snapshot = getInstanceStateFromItem(user1).getSnapshot();
        expect(snapshot.hasOwnProperty('image2')).toBe(true);
        expect(snapshot).toEqual({ username: 'Peter2', id: 3, image: { id: 1 }, image2: null });
        user1.image2 = getReference(image, { id: 2 });
        expect(user1.image2.id).toBe(2);
        getInstanceStateFromItem(user1).markAsPersisted();
        expect(getInstanceStateFromItem(user1).getSnapshot()).toEqual({ username: 'Peter2', id: 3, image: { id: 1 }, image2: { id: 2 } });
    }
});
//# sourceMappingURL=identity-map.spec.js.map