"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetTcpRpcClientAdapter = exports.TcpRpcClientAdapter = void 0;
const core_1 = require("@deepkit/core");
const net_1 = require("net");
// @ts-ignore
const turbo = __importStar(require("turbo-net"));
/**
 * Uses `turbo-net` module to connect to the server.
 */
class TcpRpcClientAdapter {
    constructor(host) {
        this.bufferSize = 100 * 1024; //100kb per connection;
        this.host = core_1.parseHost(host);
    }
    async connect(connection) {
        const port = this.host.port || 8811;
        const socket = turbo.connect(port, this.host.host);
        // socket.setNoDelay(true);
        socket.on('close', () => {
            connection.onClose();
        });
        socket.on('error', (error) => {
            connection.onError(error);
        });
        const bufferSize = this.bufferSize;
        const buffer = Buffer.allocUnsafe(bufferSize);
        function read() {
            socket.read(buffer, onRead);
        }
        function onRead(err, buf, bytes) {
            if (bytes) {
                connection.onData(buf, bytes);
                read();
            }
        }
        read();
        connection.onConnected({
            clientAddress: () => {
                return this.host.toString();
            },
            bufferedAmount() {
                //implement that to step back when too big
                return 0;
            },
            close() {
                socket.end();
            },
            send(message) {
                socket.write(message);
            }
        });
    }
}
exports.TcpRpcClientAdapter = TcpRpcClientAdapter;
/*
 * Uses the node `net` module to connect. Supports unix sockets.
 */
class NetTcpRpcClientAdapter {
    constructor(host) {
        this.host = core_1.parseHost(host);
    }
    async connect(connection) {
        const port = this.host.port || 8811;
        const socket = this.host.isUnixSocket ? net_1.connect({ path: this.host.unixSocket }) : net_1.connect({
            port: port,
            host: this.host.host
        });
        socket.on('data', (data) => {
            connection.onData(data);
        });
        socket.on('close', () => {
            connection.onClose();
        });
        socket.on('error', (error) => {
            connection.onError(error);
        });
        socket.on('connect', async () => {
            connection.onConnected({
                clientAddress: () => {
                    return this.host.toString();
                },
                bufferedAmount() {
                    //implement that to step back when too big
                    return socket.bufferSize;
                },
                close() {
                    socket.end();
                },
                send(message) {
                    socket.write(message);
                }
            });
        });
    }
}
exports.NetTcpRpcClientAdapter = NetTcpRpcClientAdapter;
//# sourceMappingURL=client.js.map