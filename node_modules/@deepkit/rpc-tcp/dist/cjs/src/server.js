"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetTcpRpcServer = exports.TcpRpcServer = void 0;
const core_1 = require("@deepkit/core");
// @ts-ignore
const turbo = __importStar(require("turbo-net"));
const fs_1 = require("fs");
const net_1 = require("net");
/**
 * Uses the `turbo-net` module to create a server.
 */
class TcpRpcServer {
    constructor(kernel, host) {
        this.kernel = kernel;
        this.bufferSize = 25 * 1024; //25kb per connection;
        this.host = core_1.parseHost(host);
        if (this.host.isUnixSocket && fs_1.existsSync(this.host.unixSocket)) {
            fs_1.unlinkSync(this.host.unixSocket);
        }
    }
    start() {
        if (this.turbo)
            throw new Error('Server already started');
        this.turbo = turbo.createServer((socket) => {
            const bufferSize = this.bufferSize;
            const buffer = Buffer.alloc(bufferSize);
            function read() {
                socket.read(buffer, onRead);
            }
            function onRead(err, buf, bytes) {
                if (err) {
                    connection.close();
                    return;
                }
                if (bytes) {
                    connection.feed(buf, bytes);
                    read();
                }
            }
            const connection = this.kernel.createConnection({
                write(b) {
                    socket.write(b);
                },
                bufferedAmount() {
                    return socket.bufferedAmount || 0;
                },
                close() {
                    socket.close();
                },
                clientAddress() {
                    return socket.remoteAddress + ':' + socket.remotePort;
                }
            });
            socket.on('close', () => {
                connection.close();
            });
            socket.on('error', () => {
                connection.close();
            });
            read();
        });
        if (this.host.isUnixSocket) {
            throw new Error('Turbo doesnt support unix sockets. Use NetTcpRpcServer instead.');
        }
        else {
            this.turbo.listen(this.host.port || 8811, this.host.host, () => {
            });
        }
    }
    close() {
        var _a;
        (_a = this.turbo) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.TcpRpcServer = TcpRpcServer;
/**
 * Uses the node `net` module to create a server. Supports unix sockets.
 */
class NetTcpRpcServer {
    constructor(kernel, host) {
        this.kernel = kernel;
        this.host = core_1.parseHost(host);
        if (this.host.isUnixSocket && fs_1.existsSync(this.host.unixSocket)) {
            fs_1.unlinkSync(this.host.unixSocket);
        }
    }
    start() {
        return core_1.asyncOperation((resolve, reject) => {
            this.server = net_1.createServer();
            this.server.on('listening', () => {
                resolve(true);
            });
            this.server.on('error', (err) => {
                reject(new Error('Could not start broker server: ' + err));
            });
            this.server.on('connection', (socket) => {
                var _a;
                const connection = (_a = this.kernel) === null || _a === void 0 ? void 0 : _a.createConnection({
                    write(b) {
                        socket.write(b);
                    },
                    clientAddress() {
                        return socket.remoteAddress || '';
                    },
                    close() {
                        socket.destroy();
                    },
                    bufferedAmount() {
                        return socket.writableLength || 0;
                    }
                });
                socket.on('data', (data) => {
                    connection.feed(data);
                });
                socket.on('close', () => {
                    connection.close();
                });
                socket.on('error', () => {
                    connection.close();
                });
            });
            if (this.host.isUnixSocket) {
                this.server.listen(this.host.unixSocket);
            }
            else {
                this.server.listen(this.host.port || 8811, this.host.host);
            }
        });
    }
    close() {
        var _a;
        (_a = this.server) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.NetTcpRpcServer = NetTcpRpcServer;
//# sourceMappingURL=server.js.map