"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("@deepkit/type");
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const client_direct_1 = require("../src/client/client-direct");
const decorators_1 = require("../src/decorators");
const kernel_1 = require("../src/server/kernel");
const injector_1 = require("@deepkit/injector");
const security_1 = require("../src/server/security");
globals_1.test('basics', async () => {
    let MyModel = class MyModel {
        constructor(name) {
            this.name = name;
        }
    };
    MyModel = __decorate([
        type_1.entity.name('model/basics'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [String])
    ], MyModel);
    let MyError = class MyError extends Error {
    };
    MyError = __decorate([
        type_1.entity.name('MyError')
    ], MyError);
    let MyError2 = class MyError2 extends Error {
        constructor(id) {
            super('critical');
            this.id = id;
        }
    };
    MyError2 = __decorate([
        type_1.entity.name('MyError2'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [Number])
    ], MyError2);
    class Controller {
        createModel(value) {
            return new MyModel(value);
        }
        notDefined() {
            return [123, 'bar'];
        }
        union() {
            return 213;
        }
        throws() {
            throw new Error('Great');
        }
        myError() {
            throw new MyError('Mhpf');
        }
        myError2() {
            throw new MyError2(99);
        }
    }
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", MyModel)
    ], Controller.prototype, "createModel", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Array)
    ], Controller.prototype, "notDefined", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Object)
    ], Controller.prototype, "union", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "throws", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "myError", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "myError2", null);
    const kernel = new kernel_1.RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new client_direct_1.DirectClient(kernel);
    const controller = client.controller('myController');
    {
        const m = await controller.createModel('foo');
        globals_1.expect(m).toBeInstanceOf(MyModel);
        globals_1.expect(m.name).toBe('foo');
    }
    {
        const m = await controller.notDefined();
        globals_1.expect(m).toEqual([123, 'bar']);
    }
    {
        const m = await controller.union();
        globals_1.expect(m).toBe(213);
    }
    {
        await globals_1.expect(controller.throws()).rejects.toThrowError(Error);
        await globals_1.expect(controller.throws()).rejects.toThrowError('Great');
    }
    {
        await globals_1.expect(controller.myError()).rejects.toThrowError(MyError);
        await globals_1.expect(controller.myError()).rejects.toThrowError('Mhpf');
    }
    {
        await globals_1.expect(controller.myError2()).rejects.toThrowError(MyError2);
        await globals_1.expect(controller.myError2()).rejects.toThrowError('critical');
        await globals_1.expect(controller.myError2()).rejects.toMatchObject({ id: 99 });
    }
});
globals_1.test('promise', async () => {
    let MyModel = class MyModel {
        constructor(name) {
            this.name = name;
        }
    };
    MyModel = __decorate([
        type_1.entity.name('model/promise'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [String])
    ], MyModel);
    class Controller {
        //MyModel is automatically detected once executed.
        async createModel(value) {
            return new MyModel(value);
        }
    }
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], Controller.prototype, "createModel", null);
    const kernel = new kernel_1.RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new client_direct_1.DirectClient(kernel);
    const controller = client.controller('myController');
    {
        const model = await controller.createModel('foo');
        globals_1.expect(model).toBeInstanceOf(MyModel);
    }
    {
        const model = await controller.createModel('foo');
        globals_1.expect(model).toBeInstanceOf(MyModel);
    }
});
globals_1.test('wrong arguments', async () => {
    let MyModel = class MyModel {
        constructor(id) {
            this.id = id;
        }
    };
    MyModel = __decorate([
        type_1.entity.name('model/promise2'),
        __param(0, type_1.t),
        __metadata("design:paramtypes", [Number])
    ], MyModel);
    class Controller {
        //MyModel is automatically detected once executed.
        async getProduct(id) {
            return new MyModel(id);
        }
    }
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], Controller.prototype, "getProduct", null);
    globals_1.expect(type_1.getClassSchema(Controller).getMethodProperties('getProduct')[0].isOptional).toBe(false);
    globals_1.expect(type_1.getClassSchema(Controller).getMethodProperties('getProduct')[0].isNullable).toBe(false);
    const kernel = new kernel_1.RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new client_direct_1.DirectClient(kernel);
    const controller = client.controller('myController');
    {
        await globals_1.expect(controller.getProduct(undefined)).rejects.toThrow('id(required): Required value is undefined');
    }
    {
        await globals_1.expect(controller.getProduct('23')).rejects.toThrow('id(required): Required value is undefined');
    }
    {
        await globals_1.expect(controller.getProduct(NaN)).rejects.toThrow('id(invalid_number): No valid number given, got NaN');
    }
});
globals_1.test('di', async () => {
    let Controller = class Controller {
        constructor(connection, sessionState) {
            this.connection = connection;
            this.sessionState = sessionState;
        }
        hasSession() {
            return this.sessionState.getSession() instanceof security_1.Session;
        }
        hasConnection() {
            return this.connection instanceof kernel_1.RpcKernelConnection;
        }
    };
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "hasSession", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "hasConnection", null);
    Controller = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [kernel_1.RpcKernelConnection, security_1.SessionState])
    ], Controller);
    const kernel = new kernel_1.RpcKernel();
    kernel.registerController('test', Controller);
    const client = new client_direct_1.DirectClient(kernel);
    const controller = client.controller('test');
    globals_1.expect(await controller.hasConnection()).toBe(true);
    globals_1.expect(await controller.hasSession()).toBe(true);
});
globals_1.test('connect disconnect', async () => {
    let Controller = class Controller {
        constructor(connection) {
            this.connection = connection;
        }
        test() {
        }
        bye() {
            this.connection.close();
        }
    };
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "test", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "bye", null);
    Controller = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [kernel_1.RpcKernelConnection])
    ], Controller);
    const kernel = new kernel_1.RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new client_direct_1.DirectClient(kernel);
    const controller = client.controller('myController');
    let triggered = 0;
    client.transporter.disconnected.subscribe(() => triggered++);
    globals_1.expect(client.transporter.isConnected()).toBe(false);
    await client.connect();
    globals_1.expect(client.transporter.isConnected()).toBe(true);
    await client.disconnect();
    globals_1.expect(client.transporter.isConnected()).toBe(false);
    globals_1.expect(triggered).toBe(1);
    await controller.test();
    globals_1.expect(client.transporter.isConnected()).toBe(true);
    await client.disconnect();
    globals_1.expect(client.transporter.isConnected()).toBe(false);
    globals_1.expect(triggered).toBe(2);
    await controller.test();
    globals_1.expect(client.transporter.isConnected()).toBe(true);
    await controller.bye();
    globals_1.expect(client.transporter.isConnected()).toBe(false);
    globals_1.expect(triggered).toBe(3);
    await controller.test();
    globals_1.expect(client.transporter.isConnected()).toBe(true);
});
//# sourceMappingURL=controller.spec.js.map