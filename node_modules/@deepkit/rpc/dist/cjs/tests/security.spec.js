"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const client_direct_1 = require("../src/client/client-direct");
const decorators_1 = require("../src/decorators");
const kernel_1 = require("../src/server/kernel");
const security_1 = require("../src/server/security");
const model_1 = require("../src/model");
const logger_1 = require("../../logger");
const logger_2 = require("@deepkit/logger");
const injector_1 = require("@deepkit/injector");
globals_1.test('authentication', async () => {
    class Controller {
        test(value) {
            return value;
        }
    }
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", String)
    ], Controller.prototype, "test", null);
    class MyKernelSecurity extends security_1.RpcKernelSecurity {
        async hasControllerAccess(session) {
            return !session.isAnonymous();
        }
        async isAllowedToRegisterAsPeer(session) {
            return !session.isAnonymous();
        }
        async isAllowedToSendToPeer(session) {
            return !session.isAnonymous();
        }
        async authenticate(token) {
            if (token === 'secret')
                return new security_1.Session('user', token);
            throw new Error('Invalid authentication');
        }
    }
    const kernel = new kernel_1.RpcKernel(undefined, new MyKernelSecurity);
    kernel.registerController('test', Controller);
    {
        const client = new client_direct_1.DirectClient(kernel);
        const controller = client.controller('test');
        await globals_1.expect(controller.test('asd')).rejects.toThrow('Access denied');
        await globals_1.expect(client.registerAsPeer('asd')).rejects.toThrowError('Access denied');
        await globals_1.expect(client.peer('asd').controller('controller').test('foo')).rejects.toThrowError('Access denied');
        client.disconnect();
        client.token.set('invalid');
        await globals_1.expect(client.registerAsPeer('asd')).rejects.toThrowError('Authentication failed');
        await globals_1.expect(client.peer('asd').controller('controller').test('foo')).rejects.toThrowError('Authentication failed');
        await globals_1.expect(client.connect()).rejects.toThrowError('Authentication failed');
        await globals_1.expect(client.connect()).rejects.toThrowError('Authentication failed');
        await globals_1.expect(controller.test('asd')).rejects.toThrowError('Authentication failed');
        client.token.set('secret');
        await client.connect();
        const client2 = new client_direct_1.DirectClient(kernel);
        client2.token.set('secret');
        await client2.registerAsPeer('asd');
        client2.registerPeerController('controller', Controller);
        globals_1.expect(await client.peer('asd').controller('controller').test('foo')).toBe('foo');
        globals_1.expect(client.username).toBe('user');
        globals_1.expect(await controller.test('asd')).toBe('asd');
    }
    {
        const client = new client_direct_1.DirectClient(kernel);
        const controller = client.controller('test');
        client.token.set('secret');
        globals_1.expect(await controller.test('asd')).toBe('asd');
    }
});
globals_1.test('authentication errors', async () => {
    class MyKernelSecurity extends security_1.RpcKernelSecurity {
        async authenticate(token) {
            if (token === 'generic')
                throw new Error('Secure error');
            throw new model_1.AuthenticationError('Custom message');
        }
    }
    const memoryLogger = new logger_1.MemoryLoggerTransport;
    const kernel = new kernel_1.RpcKernel(undefined, new MyKernelSecurity, new logger_2.Logger([memoryLogger]));
    const client = new client_direct_1.DirectClient(kernel);
    client.token.set('generic');
    await globals_1.expect(() => client.connect()).rejects.toThrow('Authentication failed');
    //generic errors get logged
    globals_1.expect(memoryLogger.messages.length).toBe(1);
    globals_1.expect(memoryLogger.messageStrings[0]).toContain('authenticate failed Error: Secure error');
    client.token.set('asd');
    await globals_1.expect(() => client.connect()).rejects.toThrow('Custom message');
    //AuthenticationError don't get logged.
    globals_1.expect(memoryLogger.messages.length).toBe(1);
});
globals_1.test('onAuthenticate controllers', async () => {
    class AuthenticatedSession extends security_1.Session {
        isAnonymous() {
            return false;
        }
    }
    let Controller = class Controller {
        constructor(connection) {
            this.connection = connection;
        }
        authenticated() {
            return this.connection.sessionState.getSession() instanceof AuthenticatedSession;
        }
        auth(value) {
            if (value === 'secret') {
                this.connection.sessionState.setSession(new AuthenticatedSession('safe', undefined));
                return true;
            }
            return false;
        }
    };
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "authenticated", null);
    __decorate([
        decorators_1.rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Boolean)
    ], Controller.prototype, "auth", null);
    Controller = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [kernel_1.RpcKernelConnection])
    ], Controller);
    const kernel = new kernel_1.RpcKernel(undefined);
    kernel.registerController('test', Controller);
    class CustomAuthClient extends client_direct_1.AsyncDirectClient {
        constructor() {
            super(...arguments);
            this.authCalled = 0;
        }
        async onAuthenticate() {
            if (!this.token.has())
                return;
            this.authCalled++;
            const success = await this.controller('test', { dontWaitForConnection: true }).auth(this.token.get());
            if (!success)
                throw new model_1.AuthenticationError('Invalid');
        }
    }
    {
        const client = new CustomAuthClient(kernel);
        globals_1.expect(await client.controller('test').authenticated()).toBe(false);
        globals_1.expect(await client.controller('test').auth('secret')).toBe(true);
        globals_1.expect(await client.controller('test').authenticated()).toBe(true);
        globals_1.expect(client.authCalled).toBe(0);
    }
    {
        const client = new CustomAuthClient(kernel);
        globals_1.expect(await client.controller('test').authenticated()).toBe(false);
        globals_1.expect(await client.controller('test').auth('wrong')).toBe(false);
        globals_1.expect(await client.controller('test').authenticated()).toBe(false);
        globals_1.expect(client.authCalled).toBe(0);
    }
    {
        const client = new CustomAuthClient(kernel);
        client.token.set('secret');
        globals_1.expect(client.transporter.isConnected()).toBe(false);
        globals_1.expect(await client.controller('test').authenticated()).toBe(true);
        globals_1.expect(client.transporter.isConnected()).toBe(true);
        globals_1.expect(client.authCalled).toBe(1);
        globals_1.expect(await client.controller('test').authenticated()).toBe(true);
        globals_1.expect(client.authCalled).toBe(1);
    }
    {
        const client = new CustomAuthClient(kernel);
        client.token.set('secret');
        const res = await Promise.all([
            client.controller('test').authenticated(),
            client.controller('test').authenticated(),
            client.controller('test').authenticated(),
        ]);
        globals_1.expect(client.authCalled).toBe(1);
        globals_1.expect(res).toEqual([true, true, true]);
    }
});
//# sourceMappingURL=security.spec.js.map