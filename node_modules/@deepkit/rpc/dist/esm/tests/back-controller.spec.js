var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { RpcKernel, RpcKernelConnection } from '../src/server/kernel';
import { DirectClient } from '../src/client/client-direct';
import { rpc } from '../src/decorators';
import { injectable } from '@deepkit/injector';
import { t } from '@deepkit/type';
test('back controller', async () => {
    let Controller = class Controller {
        constructor(connection) {
            this.connection = connection;
        }
        foo(bar) {
            return bar;
        }
        async triggerClientCall() {
            const controller = this.connection.controller('myController');
            return await controller.foo('2');
        }
    };
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", String)
    ], Controller.prototype, "foo", null);
    __decorate([
        rpc.action(),
        t.string,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Controller.prototype, "triggerClientCall", null);
    Controller = __decorate([
        injectable(),
        __metadata("design:paramtypes", [RpcKernelConnection])
    ], Controller);
    const kernel = new RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new DirectClient(kernel);
    const controller = client.controller('myController');
    client.registerController('myController', Controller);
    expect(await controller.foo('1')).toBe('1');
    expect(await controller.triggerClientCall()).toBe('2');
});
//# sourceMappingURL=back-controller.spec.js.map