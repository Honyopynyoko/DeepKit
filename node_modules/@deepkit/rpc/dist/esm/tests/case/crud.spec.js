var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { entity, t } from '@deepkit/type';
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { DirectClient } from '../../src/client/client-direct';
import { rpc } from '../../src/decorators';
import { RpcKernel } from '../../src/server/kernel';
let Purchase = class Purchase {
    constructor() {
        this.id = 0;
    }
};
__decorate([
    t.primary.autoIncrement,
    __metadata("design:type", Number)
], Purchase.prototype, "id", void 0);
__decorate([
    t,
    __metadata("design:type", Date)
], Purchase.prototype, "sentAt", void 0);
__decorate([
    t,
    __metadata("design:type", Date)
], Purchase.prototype, "canceledAt", void 0);
Purchase = __decorate([
    entity.name('purchase')
], Purchase);
export { Purchase };
test('partial', async () => {
    class Controller {
        async patchPurchase(id, purchase) {
            expect('sentAt' in purchase).toBe(true);
        }
    }
    __decorate([
        rpc.action(),
        __param(1, t.partial(Purchase)),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Object]),
        __metadata("design:returntype", Promise)
    ], Controller.prototype, "patchPurchase", null);
    const kernel = new RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new DirectClient(kernel);
    const controller = client.controller('myController');
    await controller.patchPurchase(23, { sentAt: undefined });
});
//# sourceMappingURL=crud.spec.js.map