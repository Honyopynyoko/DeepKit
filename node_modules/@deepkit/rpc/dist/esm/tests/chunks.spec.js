var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { t } from '@deepkit/type';
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { skip } from 'rxjs/operators';
import { DirectClient } from '../src/client/client-direct';
import { rpc } from '../src/decorators';
import { RpcKernel } from '../src/server/kernel';
import { ClientProgress } from '../src/writer';
test('chunks', async () => {
    let TestController = class TestController {
        uploadBig(file) {
            return file.length;
        }
        downloadBig(size) {
            return Buffer.alloc(size);
        }
    };
    __decorate([
        rpc.action(),
        __param(0, t.type(Buffer)),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Buffer]),
        __metadata("design:returntype", Number)
    ], TestController.prototype, "uploadBig", null);
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Buffer)
    ], TestController.prototype, "downloadBig", null);
    TestController = __decorate([
        rpc.controller('test')
    ], TestController);
    const kernel = new RpcKernel();
    kernel.registerController('test', TestController);
    const client = new DirectClient(kernel);
    const controller = client.controller('test');
    {
        //small payloads trigger progress as well
        const progress = ClientProgress.track();
        expect(progress.download.progress).toBe(0);
        const file = await controller.downloadBig(100);
        expect(progress.download.progress).toBe(1);
        expect(progress.download.total).toBe(125);
        expect(file.length).toBe(100);
    }
    {
        const progress = ClientProgress.track();
        const stats = [];
        progress.download.pipe(skip(1)).subscribe((p) => {
            expect(progress.download.total).toBeGreaterThan(0);
            expect(progress.download.current).toBeLessThanOrEqual(progress.download.total);
            expect(progress.download.progress).toBeLessThanOrEqual(1);
            stats.push(progress.download.current);
        });
        const file = await controller.downloadBig(650000);
        expect(file.length).toBe(650000);
        expect(progress.download.done).toBe(true);
        expect(progress.download.total).toBe(650025);
        expect(stats).toEqual([
            100000,
            200000,
            300000,
            400000,
            500000,
            600000,
            650025,
        ]);
        expect(progress.download.progress).toBe(1);
    }
    {
        //small payloads trigger progress as well
        const uploadFile = Buffer.alloc(100);
        const progress = ClientProgress.track();
        const size = await controller.uploadBig(uploadFile);
        expect(progress.upload.total).toBe(182);
        expect(progress.upload.progress).toBe(1);
    }
    {
        const uploadFile = Buffer.alloc(550000);
        const progress = ClientProgress.track();
        const stats = [];
        progress.upload.pipe(skip(1)).subscribe((p) => {
            expect(progress.upload.total).toBeGreaterThan(0);
            expect(progress.upload.current).toBeLessThanOrEqual(progress.upload.total);
            expect(progress.upload.progress).toBeLessThanOrEqual(1);
            stats.push(progress.upload.current);
        });
        const size = await controller.uploadBig(uploadFile);
        expect(size).toBe(550000);
        expect(stats).toEqual([
            100000,
            200000,
            300000,
            400000,
            500000,
            550082,
        ]);
        expect(progress.upload.done).toBe(true);
        expect(progress.upload.progress).toBe(1);
    }
});
//# sourceMappingURL=chunks.spec.js.map