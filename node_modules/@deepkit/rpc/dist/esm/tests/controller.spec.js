var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { entity, getClassSchema, t } from '@deepkit/type';
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { DirectClient } from '../src/client/client-direct';
import { rpc } from '../src/decorators';
import { RpcKernel } from '../src/server/kernel';
test('basics', async () => {
    let MyModel = class MyModel {
        constructor(name) {
            this.name = name;
        }
    };
    MyModel = __decorate([
        entity.name('model/basics'),
        __param(0, t),
        __metadata("design:paramtypes", [String])
    ], MyModel);
    let MyError = class MyError extends Error {
    };
    MyError = __decorate([
        entity.name('MyError')
    ], MyError);
    let MyError2 = class MyError2 extends Error {
        constructor(id) {
            super('critical');
            this.id = id;
        }
    };
    MyError2 = __decorate([
        entity.name('MyError2'),
        __param(0, t),
        __metadata("design:paramtypes", [Number])
    ], MyError2);
    class Controller {
        createModel(value) {
            return new MyModel(value);
        }
        notDefined() {
            return [123, "bar"];
        }
        union() {
            return 213;
        }
        throws() {
            throw new Error('Great');
        }
        myError() {
            throw new MyError('Mhpf');
        }
        myError2() {
            throw new MyError2(99);
        }
    }
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", MyModel)
    ], Controller.prototype, "createModel", null);
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Array)
    ], Controller.prototype, "notDefined", null);
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Object)
    ], Controller.prototype, "union", null);
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "throws", null);
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "myError", null);
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Controller.prototype, "myError2", null);
    const kernel = new RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new DirectClient(kernel);
    const controller = client.controller('myController');
    {
        const m = await controller.createModel('foo');
        expect(m).toBeInstanceOf(MyModel);
        expect(m.name).toBe('foo');
    }
    {
        const m = await controller.notDefined();
        expect(m).toEqual([123, "bar"]);
    }
    {
        const m = await controller.union();
        expect(m).toBe(213);
    }
    {
        await expect(controller.throws()).rejects.toThrowError(Error);
        await expect(controller.throws()).rejects.toThrowError('Great');
    }
    {
        await expect(controller.myError()).rejects.toThrowError(MyError);
        await expect(controller.myError()).rejects.toThrowError('Mhpf');
    }
    {
        await expect(controller.myError2()).rejects.toThrowError(MyError2);
        await expect(controller.myError2()).rejects.toThrowError('critical');
        await expect(controller.myError2()).rejects.toMatchObject({ id: 99 });
    }
});
test('promise', async () => {
    let MyModel = class MyModel {
        constructor(name) {
            this.name = name;
        }
    };
    MyModel = __decorate([
        entity.name('model/promise'),
        __param(0, t),
        __metadata("design:paramtypes", [String])
    ], MyModel);
    class Controller {
        //MyModel is automatically detected once executed. 
        async createModel(value) {
            return new MyModel(value);
        }
    }
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], Controller.prototype, "createModel", null);
    const kernel = new RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new DirectClient(kernel);
    const controller = client.controller('myController');
    {
        const model = await controller.createModel('foo');
        expect(model).toBeInstanceOf(MyModel);
    }
    {
        const model = await controller.createModel('foo');
        expect(model).toBeInstanceOf(MyModel);
    }
});
test('wrong arguments', async () => {
    let MyModel = class MyModel {
        constructor(id) {
            this.id = id;
        }
    };
    MyModel = __decorate([
        entity.name('model/promise2'),
        __param(0, t),
        __metadata("design:paramtypes", [Number])
    ], MyModel);
    class Controller {
        //MyModel is automatically detected once executed. 
        async getProduct(id) {
            return new MyModel(id);
        }
    }
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], Controller.prototype, "getProduct", null);
    expect(getClassSchema(Controller).getMethodProperties('getProduct')[0].isOptional).toBe(false);
    expect(getClassSchema(Controller).getMethodProperties('getProduct')[0].isNullable).toBe(false);
    const kernel = new RpcKernel();
    kernel.registerController('myController', Controller);
    const client = new DirectClient(kernel);
    const controller = client.controller('myController');
    {
        await expect(controller.getProduct(undefined)).rejects.toThrow('id(required): Required value is undefined');
    }
    {
        await expect(controller.getProduct('23')).rejects.toThrow('id(required): Required value is undefined');
    }
    {
        await expect(controller.getProduct(NaN)).rejects.toThrow('id(invalid_number): No valid number given, got NaN');
    }
});
//# sourceMappingURL=controller.spec.js.map