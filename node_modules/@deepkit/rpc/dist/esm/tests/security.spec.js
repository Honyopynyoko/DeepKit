var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { DirectClient } from '../src/client/client-direct';
import { rpc } from '../src/decorators';
import { RpcKernel } from '../src/server/kernel';
import { RpcKernelSecurity, Session } from '../src/server/security';
test('authentication', async () => {
    class Controller {
        test(value) {
            return value;
        }
    }
    __decorate([
        rpc.action(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", String)
    ], Controller.prototype, "test", null);
    class MyKernelSecurity extends RpcKernelSecurity {
        async hasControllerAccess(session) {
            return !session.isAnonymous();
        }
        async isAllowedToRegisterAsPeer(session) {
            return !session.isAnonymous();
        }
        async isAllowedToSendToPeer(session) {
            return !session.isAnonymous();
        }
        async authenticate(token) {
            if (token === 'secret')
                return new Session('user', token);
            throw new Error('Invalid authentication');
        }
    }
    const kernel = new RpcKernel(undefined, new MyKernelSecurity);
    kernel.registerController('test', Controller);
    {
        const client = new DirectClient(kernel);
        const controller = client.controller('test');
        await expect(controller.test('asd')).rejects.toThrow('Access denied');
        await expect(client.registerAsPeer('asd')).rejects.toThrowError('Access denied');
        await expect(client.peer('asd').controller('controller').test('foo')).rejects.toThrowError('Access denied');
        client.disconnect();
        client.token.set('invalid');
        await expect(client.registerAsPeer('asd')).rejects.toThrowError('Authentication failed');
        await expect(client.peer('asd').controller('controller').test('foo')).rejects.toThrowError('Authentication failed');
        await expect(client.connect()).rejects.toThrowError('Authentication failed');
        await expect(client.connect()).rejects.toThrowError('Authentication failed');
        await expect(controller.test('asd')).rejects.toThrowError('Authentication failed');
        client.token.set('secret');
        await client.connect();
        const client2 = new DirectClient(kernel);
        client2.token.set('secret');
        await client2.registerAsPeer('asd');
        client2.registerPeerController('controller', Controller);
        expect(await client.peer('asd').controller('controller').test('foo')).toBe('foo');
        expect(client.username).toBe('user');
        expect(await controller.test('asd')).toBe('asd');
    }
    {
        const client = new DirectClient(kernel);
        const controller = client.controller('test');
        client.token.set('secret');
        expect(await controller.test('asd')).toBe('asd');
    }
});
//# sourceMappingURL=security.spec.js.map