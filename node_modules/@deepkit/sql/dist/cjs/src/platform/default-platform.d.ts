import { Column, ColumnDiff, DatabaseDiff, DatabaseModel, ForeignKey, Index, Table, TableDiff } from '../schema/table';
import { ClassSchema, PropertySchema, Serializer, Types } from '@deepkit/type';
import { ClassType } from '@deepkit/core';
import { SchemaParser } from '../reverse/schema-parser';
import { SQLFilterBuilder } from '../sql-filter-builder';
export declare function isSet(v: any): boolean;
export interface NamingStrategy {
    getColumnName(property: PropertySchema): string;
    getTableName(classSchema: ClassSchema): string;
}
export declare class DefaultNamingStrategy implements NamingStrategy {
    getColumnName(property: PropertySchema): string;
    getTableName(classSchema: ClassSchema): string;
}
export declare class SqlPlaceholderStrategy {
    offset: number;
    constructor(offset?: number);
    getPlaceholder(): string;
}
interface NativeTypeInformation {
    needsIndexPrefix: boolean;
    defaultIndexSize: number;
}
export declare abstract class DefaultPlatform {
    protected defaultSqlType: string;
    protected typeMapping: Map<string, {
        sqlType: string;
        size?: number | undefined;
        scale?: number | undefined;
    }>;
    protected nativeTypeInformation: Map<string, Partial<NativeTypeInformation>>;
    abstract schemaParserType: ClassType<SchemaParser>;
    serializer: Serializer;
    namingStrategy: NamingStrategy;
    placeholderStrategy: ClassType<SqlPlaceholderStrategy>;
    typeCast(schema: ClassSchema, name: string): string;
    createSqlFilterBuilder(schema: ClassSchema, tableName: string): SQLFilterBuilder;
    getMigrationTableName(): string;
    quoteValue(value: any): string;
    getAggregateSelect(tableName: string, property: PropertySchema, func: string): string;
    addBinaryType(sqlType: string, size?: number, scale?: number): void;
    addType(marshalType: Types, sqlType: string, size?: number, scale?: number): void;
    getColumnListDDL(columns: Column[]): string;
    getSchemaDelimiter(): string;
    /**
     * If the platform supports the `PRIMARY KEY` section in `CREATE TABLE(column, column, PRIMARY KEY())`;
     */
    supportsInlinePrimaryKey(): boolean;
    /**
     * If the platform supports the `CONSTRAINT %s FOREIGN KEY` section in `CREATE TABLE(column, column, CONSTRAINT %s FOREIGN KEY)`;
     */
    supportsInlineForeignKey(): boolean;
    getPrimaryKeyDDL(table: Table): string;
    normalizeTables(tables: Table[]): void;
    getEntityFields(schema: ClassSchema): PropertySchema[];
    protected setColumnType(column: Column, typeProperty: PropertySchema): void;
    getModifyDatabaseDDL(databaseDiff: DatabaseDiff): string[];
    createTables(schemas: (ClassSchema | ClassType)[], database?: DatabaseModel): Table[];
    quoteIdentifier(id: string): string;
    getTableIdentifier(schema: ClassSchema): string;
    getIdentifier(object: Table | Column | Index | ForeignKey, append?: string): string;
    getFullIdentifier(object: Table | Column, append?: string): string;
    getPrimaryKeyName(table: Table): string;
    getDropPrimaryKeyDDL(table: Table): string;
    getAddPrimaryKeyDDL(table: Table): string;
    getBeginDDL(): string;
    getEndDDL(): string;
    getAddTablesDDL(database: DatabaseModel): string[];
    getAddSchemasDDL(database: DatabaseModel): string;
    getAddSchemaDDL(schemaName: string): string;
    getUseSchemaDDL(table: Table): string;
    getResetSchemaDDL(table: Table): string;
    getRenameTableDDL(from: Table, to: Table): string;
    getModifyTableDDL(diff: TableDiff): string[];
    getAddTableDDL(table: Table): string[];
    getCreateTableDDL(table: Table): string;
    getAddForeignKeysDDL(table: Table): string[];
    getAddIndicesDDL(table: Table): string[];
    getAddForeignKeyDDL(foreignKey: ForeignKey): string;
    getForeignKeyDDL(foreignKey: ForeignKey): string;
    getAddIndexDDL(index: Index): string;
    getDropTableDDL(table: Table): string;
    getRemoveColumnDDL(column: Column): string;
    getRenameColumnDDL(from: Column, to: Column): string;
    getModifyColumnDDL(diff: ColumnDiff): string;
    getAddColumnDDL(column: Column): string;
    getDropForeignKeyDDL(foreignKey: ForeignKey): string;
    getDropIndexDDL(index: Index): string;
    getUniqueDDL(unique: Index): string;
    getColumnDDL(column: Column): string;
    getColumnDefaultValueDDL(column: Column): string;
    getAutoIncrement(): string;
    getNotNullString(): string;
    getNullString(): string;
}
export {};
