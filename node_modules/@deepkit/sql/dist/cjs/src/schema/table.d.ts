import { ClassSchema, PropertySchema } from '@deepkit/type';
export declare class DatabaseModel {
    tables: Table[];
    schemaName: string;
    schemaMap: Map<ClassSchema<any>, Table>;
    constructor(tables?: Table[]);
    getTableForSchema(schema: ClassSchema): Table;
    addTable(name: string): Table;
    getTable(name: string, schemaName?: string): Table;
    getTableNames(): string[];
    getTableForFull(fullName: string, schemaDelimiter: string): Table;
    hasTable(name: string, schemaName?: string): boolean;
}
export declare class Table {
    name: string;
    schemaName: string;
    alias: string;
    columnForProperty: Map<PropertySchema, Column>;
    columns: Column[];
    indices: Index[];
    foreignKeys: ForeignKey[];
    constructor(name: string);
    isName(name: string, schemaName?: string): boolean;
    getName(): string;
    getFullName(schemaDelimiter: string): string;
    addColumn(name: string, property?: PropertySchema): Column;
    addIndex(name: string, unique?: boolean): Index;
    addForeignKey(name: string, foreignTable: Table): ForeignKey;
    hasColumn(name: string): boolean;
    getColumn(name: string): Column;
    getColumnForProperty(property: PropertySchema): Column;
    getPrimaryKeys(): Column[];
    getAutoIncrements(): Column[];
    getIndices(): Index[];
    getIndex(name: string): Index | undefined;
    getUnices(): Index[];
    hasPrimaryKey(): boolean;
    hasCompositePrimaryKey(): boolean;
    getForeignKeyOfLocalColumn(column: Column): ForeignKey | undefined;
    hasIndexByName(name: string): boolean;
    hasIndex(columns: Column[], unique?: boolean): boolean;
}
export declare class Column {
    table: Table;
    name: string;
    description: string;
    type?: string;
    size?: number;
    scale?: number;
    defaultValue?: string;
    isNotNull: boolean;
    isPrimaryKey: boolean;
    isAutoIncrement: boolean;
    constructor(table: Table, name: string);
    getName(): string;
    getFullName(): string;
    getSizeDefinition(): string;
}
export declare class Index {
    table: Table;
    name: string;
    isUnique: boolean;
    columns: Column[];
    spatial: boolean;
    partial: boolean;
    size: number;
    constructor(table: Table, name: string, isUnique?: boolean);
    getName(): string;
    hasColumn(columnName: string): boolean;
    addColumn(columnName: string): void;
    valueOf(): string;
}
export declare type ForeignKeyAction = 'RESTRICT' | 'NO ACTION' | 'CASCADE' | 'SET NULL' | 'SET DEFAULT';
export declare class ForeignKey {
    table: Table;
    name: string;
    foreign: Table;
    localColumns: Column[];
    foreignColumns: Column[];
    onUpdate: ForeignKeyAction;
    onDelete: ForeignKeyAction;
    constructor(table: Table, name: string, foreign: Table);
    getName(): string;
    addReference(localColumnName: string, foreignColumnName: string): void;
    getColumnMapping(): [from: Column, to: Column][];
    valueOf(): string;
}
export declare class ColumnPropertyDiff {
    readonly from: any;
    readonly to: any;
    constructor(from: any, to: any);
}
export declare class ColumnDiff {
    from: Column;
    to: Column;
    changedProperties: Map<keyof Column, ColumnPropertyDiff>;
    constructor(from: Column, to: Column, changedProperties?: Map<keyof Column, ColumnPropertyDiff>);
    valueOf(): string;
}
export declare class ColumnComparator {
    static computeDiff(from: Column, to: Column): ColumnDiff | undefined;
    static compareColumns(from: Column, to: Column): Map<keyof Column, ColumnPropertyDiff>;
}
export declare class IndexComparator {
    static computeDiff(from: Index, to: Index): boolean;
}
export declare class ForeignKeyComparator {
    static computeDiff(from: ForeignKey, to: ForeignKey): boolean;
}
export declare class TableDiff {
    from: Table;
    to: Table;
    addedColumns: Column[];
    removedColumns: Column[];
    modifiedColumns: ColumnDiff[];
    renamedColumns: [from: Column, to: Column][];
    addedPKColumns: Column[];
    removedPKColumns: Column[];
    renamedPKColumns: [from: Column, to: Column][];
    addedIndices: Index[];
    removedIndices: Index[];
    modifiedIndices: [from: Index, to: Index][];
    addedFKs: ForeignKey[];
    modifiedFKs: [from: ForeignKey, to: ForeignKey][];
    removedFKs: ForeignKey[];
    constructor(from: Table, to: Table);
    hasModifiedPk(): boolean;
    toString(): string;
}
export declare class TableComparator {
    from: Table;
    to: Table;
    readonly diff: TableDiff;
    constructor(from: Table, to: Table);
    static computeDiff(from: Table, to: Table): TableDiff | undefined;
    protected compareColumns(): number;
    protected comparePrimaryKeys(): number;
    protected compareIndices(): number;
    protected compareFKs(): number;
}
export declare class DatabaseDiff {
    from: DatabaseModel;
    to: DatabaseModel;
    addedTables: Table[];
    removedTables: Table[];
    modifiedTables: TableDiff[];
    renamedTables: [from: Table, to: Table][];
    constructor(from: DatabaseModel, to: DatabaseModel);
    forTable(table: Table): void;
    getDiff(table: Table): TableDiff | undefined;
}
export declare class DatabaseComparator {
    from: DatabaseModel;
    to: DatabaseModel;
    readonly diff: DatabaseDiff;
    withRemoveTable: boolean;
    withRenaming: boolean;
    constructor(from: DatabaseModel, to: DatabaseModel);
    static computeDiff(from: DatabaseModel, to: DatabaseModel): DatabaseDiff | undefined;
    protected compareTables(): number;
}
