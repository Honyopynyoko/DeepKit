import { SQLQueryModel } from './sql-adapter';
import { DefaultPlatform, SqlPlaceholderStrategy } from './platform/default-platform';
import { ClassSchema, PropertySchema } from '@deepkit/type';
import { DatabaseJoinModel, DatabaseQueryModel } from '@deepkit/orm';
declare type ConvertDataToDict = (row: any) => {
    [name: string]: any;
};
export declare class Sql {
    sql: string;
    params: any[];
    constructor(sql?: string, params?: any[]);
    appendSql(sql: Sql): void;
    append(sql: string, params?: any[]): void;
}
export declare class SqlBuilder {
    protected platform: DefaultPlatform;
    params: string[];
    protected sqlSelect: string[];
    protected joins: {
        join: DatabaseJoinModel<any, any>;
        forJoinIndex: number;
        startIndex: number;
        converter: ConvertDataToDict;
    }[];
    protected placeholderStrategy: SqlPlaceholderStrategy;
    rootConverter?: ConvertDataToDict;
    constructor(platform: DefaultPlatform, params?: string[]);
    protected appendWhereSQL(sql: Sql, schema: ClassSchema, model: SQLQueryModel<any>, tableName?: string, prefix?: string): void;
    protected appendHavingSQL(sql: Sql, schema: ClassSchema, model: DatabaseQueryModel<any>, tableName?: string): void;
    protected selectColumns(schema: ClassSchema, model: SQLQueryModel<any>): void;
    protected selectColumnsWithJoins(schema: ClassSchema, model: SQLQueryModel<any>, refName?: string): {
        startIndex: number;
        fields: PropertySchema[];
    };
    convertRows(schema: ClassSchema, model: SQLQueryModel<any>, rows: any[]): any[];
    protected buildConverter(startIndex: number, fields: PropertySchema[]): ConvertDataToDict;
    protected appendJoinSQL<T>(sql: Sql, model: SQLQueryModel<T>, parentName: string, prefix?: string): void;
    build<T>(schema: ClassSchema, model: SQLQueryModel<T>, head: string, withRange?: boolean): Sql;
    update<T>(schema: ClassSchema, model: SQLQueryModel<T>, set: string[]): Sql;
    select(schema: ClassSchema, model: SQLQueryModel<any>, options?: {
        select?: string[];
    }): Sql;
}
export {};
