import { ClassSchema, Serializer } from '@deepkit/type';
import { SqlPlaceholderStrategy } from './platform/default-platform';
declare type Filter = {
    [name: string]: any;
};
export declare class SQLFilterBuilder {
    protected schema: ClassSchema;
    protected tableName: string;
    protected serializer: Serializer;
    placeholderStrategy: SqlPlaceholderStrategy;
    protected quoteValue: (v: any) => string;
    protected quoteId: (v: string) => string;
    params: any[];
    constructor(schema: ClassSchema, tableName: string, serializer: Serializer, placeholderStrategy: SqlPlaceholderStrategy, quoteValue: (v: any) => string, quoteId: (v: string) => string);
    isNull(): string;
    regexpComparator(): string;
    convert(filter: Filter): string;
    /**
     * Normalizes values necessary for the conection driver to bind parameters for prepared statements.
     * E.g. SQLite does not support boolean, so we convert boolean to number.
     */
    protected bindValue(value: any): any;
    protected conditionsArray(filters: Filter[], join: 'AND' | 'OR'): string;
    protected quoteIdWithTable(id: string): string;
    protected condition(fieldName: string | undefined, value: any, comparison: 'eq' | 'gt' | 'gte' | 'in' | 'lt' | 'lte' | 'ne' | 'nin' | string): string;
    protected getDeepColumnAccessor(table: string, column: string, path: string): string;
    protected splitDeepFieldPath(path: string): [column: string, path: string];
    protected conditions(filter: Filter, fieldName?: string): string;
}
export {};
