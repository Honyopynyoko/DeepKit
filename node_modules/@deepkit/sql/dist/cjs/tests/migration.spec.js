"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const type_1 = require("@deepkit/type");
const table_1 = require("../src/schema/table");
const default_platform_1 = require("../src/platform/default-platform");
const schema_parser_1 = require("../src/reverse/schema-parser");
const user = type_1.t.schema({
    id: type_1.t.number.autoIncrement.primary,
    username: type_1.t.string.index({ unique: true }),
    created: type_1.t.date,
    deleted: type_1.t.boolean,
    logins: type_1.t.number,
}, { name: 'user' });
user.addIndex(['deleted'], '', { unique: true });
user.addIndex(['deleted', 'created']);
const post = type_1.t.schema({
    id: type_1.t.number.autoIncrement.primary,
    user: type_1.t.type(user).reference(),
    created: type_1.t.date,
    slag: type_1.t.string.index({ unique: true }),
    title: type_1.t.string,
    content: type_1.t.string,
}, { name: 'post' });
class MySchemaParser extends schema_parser_1.SchemaParser {
    parse(database, limitTableNames) {
    }
}
class MyPlatform extends default_platform_1.DefaultPlatform {
    constructor() {
        super();
        this.schemaParserType = MySchemaParser;
        this.addType('number', 'integer');
    }
}
globals_1.test('migration basic', async () => {
    const [tableUser, tablePost] = new MyPlatform().createTables([user, post]);
    globals_1.expect(tableUser.hasColumn('id')).toBe(true);
    globals_1.expect(tableUser.getColumn('id').isPrimaryKey).toBe(true);
    globals_1.expect(tableUser.getColumn('id').isAutoIncrement).toBe(true);
    globals_1.expect(tableUser.getColumn('id').type).toBe('integer');
    globals_1.expect(user.getProperty('username').isOptional).toBe(false);
    globals_1.expect(user.getProperty('username').isNullable).toBe(false);
    globals_1.expect(tableUser.hasColumn('username')).toBe(true);
    globals_1.expect(tableUser.getColumn('username').type).toBe('text');
    globals_1.expect(tableUser.getColumn('username').isNotNull).toBe(true);
    globals_1.expect(tableUser.getIndex('username')).toBeInstanceOf(table_1.Index);
    globals_1.expect(tableUser.getIndex('username').hasColumn('username')).toBe(true);
    globals_1.expect(tablePost.foreignKeys.length).toBe(1);
    globals_1.expect(tablePost.foreignKeys[0].foreign).toBe(tableUser);
    globals_1.expect(tablePost.foreignKeys[0].localColumns[0].name).toBe('user');
    globals_1.expect(tablePost.foreignKeys[0].foreignColumns[0].name).toBe('id');
});
//# sourceMappingURL=migration.spec.js.map