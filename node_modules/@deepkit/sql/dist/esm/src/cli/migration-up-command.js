/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { indent } from '@deepkit/core';
import { cli, flag } from '@deepkit/app';
import { Logger } from '@deepkit/logger';
import { MigrationProvider } from '../migration/migration-provider';
import { SQLDatabaseAdapter, SqlMigrationHandler } from '../sql-adapter';
import { BaseCommand } from './base-command';
let MigrationUpCommand = class MigrationUpCommand extends BaseCommand {
    constructor(logger, provider) {
        super();
        this.logger = logger;
        this.provider = provider;
    }
    async execute(database, fake = false) {
        if (this.path.length)
            this.provider.databases.readDatabase(this.path);
        if (this.migrationDir)
            this.provider.setMigrationDir(this.migrationDir);
        const migrationsPerDatabase = await this.provider.getMigrationsPerDatabase(database);
        for (const [database, migrations] of migrationsPerDatabase.entries()) {
            this.logger.log(`Execute migrations for <yellow>${database.name}</yellow>`);
            if (database.adapter instanceof SQLDatabaseAdapter) {
                const migrationHandler = new SqlMigrationHandler(database);
                try {
                    const latestVersion = await migrationHandler.getLatestMigrationVersion();
                    const migrationToApply = migrations.filter(v => v.version > latestVersion);
                    const migration = migrationToApply.shift();
                    if (!migration) {
                        this.logger.log('<green>All migrations executed</green>');
                        return;
                    }
                    const connection = await database.adapter.connectionPool.getConnection();
                    try {
                        this.logger.log(`    Migration up <yellow>${migration.name}</yellow>`);
                        if (fake) {
                            this.logger.log(`       Faking migration.`);
                        }
                        else {
                            let i = 1;
                            for (const sql of migration.up()) {
                                this.logger.log(`<yellow>    ${i++}. ${indent(4)(sql)}</yellow>`);
                                await connection.run(sql);
                            }
                        }
                        await migrationHandler.setLatestMigrationVersion(migration.version);
                        this.logger.log(`<green>Successfully migrated up to version ${migration.version}</green>`);
                        if (migrationToApply.length) {
                            this.logger.log(`<yellow>${migrationToApply.length} migration/s left. Run migration:up again to execute the next migration.</yellow>`);
                        }
                        else {
                            this.logger.log('<green>All migrations executed</green>');
                        }
                    }
                    finally {
                        connection.release();
                    }
                }
                finally {
                    database.disconnect();
                }
            }
        }
    }
};
__decorate([
    __param(0, flag.optional.description('Limit migrations to a specific database.')),
    __param(1, flag.optional.description('Sets the migration version without executing actual SQL commands')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Boolean]),
    __metadata("design:returntype", Promise)
], MigrationUpCommand.prototype, "execute", null);
MigrationUpCommand = __decorate([
    cli.controller('migration:up', {
        description: 'Executes pending migration files. Use migration:pending to see which are pending.'
    }),
    __metadata("design:paramtypes", [Logger,
        MigrationProvider])
], MigrationUpCommand);
export { MigrationUpCommand };
//# sourceMappingURL=migration-up-command.js.map