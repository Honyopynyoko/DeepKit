/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { DatabaseRegistry } from '@deepkit/orm';
import glob from 'fast-glob';
import { basename, join } from 'path';
import { injectable } from '@deepkit/injector';
let MigrationProvider = class MigrationProvider {
    constructor(databases) {
        this.databases = databases;
        this.databaseMap = new Map();
        this.migrationDir = 'migrations/';
    }
    getMigrationDir() {
        return this.migrationDir;
    }
    setMigrationDir(dir) {
        this.migrationDir = dir;
    }
    async getMigrationsPerDatabase(limitDatabase) {
        const migrationsPerDatabase = new Map();
        for (const migration of await this.getMigrations(this.migrationDir)) {
            const database = this.databases.getDatabaseByName(migration.databaseName);
            if (!database)
                continue;
            if (limitDatabase && database.name !== limitDatabase)
                continue;
            let dbMigrations = migrationsPerDatabase.get(database);
            if (!dbMigrations) {
                dbMigrations = [];
                migrationsPerDatabase.set(database, dbMigrations);
            }
            dbMigrations.push(migration);
        }
        return migrationsPerDatabase;
    }
    async getMigrations(migrationDir) {
        let migrations = [];
        const files = await glob('**/*.ts', { cwd: migrationDir });
        require('ts-node').register({
            compilerOptions: {
                experimentalDecorators: true
            }
        });
        for (const file of files) {
            const path = join(process.cwd(), migrationDir, file);
            const name = basename(file.replace('.ts', ''));
            const migration = require(path);
            if (migration && migration.SchemaMigration) {
                const jo = new class extends migration.SchemaMigration {
                    constructor() {
                        super();
                        if (!this.name)
                            this.name = name;
                    }
                };
                migrations.push(jo);
            }
        }
        migrations.sort((a, b) => {
            if (a.version > b.version)
                return +1;
            if (a.version < b.version)
                return -1;
            return 0;
        });
        return migrations;
    }
};
MigrationProvider = __decorate([
    injectable(),
    __metadata("design:paramtypes", [DatabaseRegistry])
], MigrationProvider);
export { MigrationProvider };
//# sourceMappingURL=migration-provider.js.map