var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { entity, t } from '@deepkit/type';
import { SchemaParser } from '../src/reverse/schema-parser';
import { DefaultPlatform } from '../src/platform/default-platform';
import { expect, test } from '@jest/globals';
let Person = class Person {
    constructor() {
        this.id = 0;
    }
};
__decorate([
    t.primary.autoIncrement,
    __metadata("design:type", Number)
], Person.prototype, "id", void 0);
__decorate([
    t,
    __metadata("design:type", String)
], Person.prototype, "firstName", void 0);
__decorate([
    t,
    __metadata("design:type", String)
], Person.prototype, "lastName", void 0);
__decorate([
    t,
    __metadata("design:type", String)
], Person.prototype, "type", void 0);
Person = __decorate([
    entity.name('person').collectionName('persons')
], Person);
let Employee = class Employee extends Person {
    constructor() {
        super(...arguments);
        this.type = 'employee';
    }
};
__decorate([
    t,
    __metadata("design:type", String)
], Employee.prototype, "email", void 0);
__decorate([
    t.literal('employee'),
    __metadata("design:type", String)
], Employee.prototype, "type", void 0);
Employee = __decorate([
    entity.name('employee').singleTableInheritance()
], Employee);
let Freelance = class Freelance extends Person {
    constructor() {
        super(...arguments);
        this.type = 'freelancer';
    }
};
__decorate([
    t,
    __metadata("design:type", String)
], Freelance.prototype, "token", void 0);
__decorate([
    t.literal('freelancer'),
    __metadata("design:type", String)
], Freelance.prototype, "type", void 0);
Freelance = __decorate([
    entity.name('freelancer').singleTableInheritance()
], Freelance);
class MySchemaParser extends SchemaParser {
    parse(database, limitTableNames) {
    }
}
class MyPlatform extends DefaultPlatform {
    constructor() {
        super();
        this.schemaParserType = MySchemaParser;
        this.addType('number', 'integer');
    }
}
test('tables', () => {
    const platform = new MyPlatform();
    const tables = platform.createTables([Employee, Freelance]);
    expect(tables.length).toBe(1);
    const table = tables[0];
    expect(table.columns.length).toBe(6);
    expect(table.getColumn('type').type).toBe('text');
    expect(table.getColumn('type').isNotNull).toBe(true);
});
//# sourceMappingURL=inheritance.spec.js.map