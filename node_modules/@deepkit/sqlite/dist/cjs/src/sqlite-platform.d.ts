import { Column, DefaultPlatform, ForeignKey, Table, TableDiff } from '@deepkit/sql';
import { ClassSchema, PropertySchema } from '@deepkit/type';
import { SQLiteSchemaParser } from './sqlite-schema-parser';
import { SQLiteFilterBuilder } from './sql-filter-builder.sqlite';
export declare class SQLitePlatform extends DefaultPlatform {
    protected defaultSqlType: string;
    schemaParserType: typeof SQLiteSchemaParser;
    readonly serializer: {
        readonly name: string;
        toClass: import("@deepkit/type").SerializerCompilers;
        fromClass: import("@deepkit/type").SerializerCompilers;
        toClassSymbol: symbol;
        fromClassSymbol: symbol;
        partialToClassSymbol: symbol;
        partialFromClassSymbol: symbol;
        fork(name: string): import("@deepkit/core").ClassType<import("@deepkit/type").Serializer>;
        for<T extends ClassSchema<any> | import("@deepkit/core").ClassType<any>>(schemaOrType: T): import("@deepkit/type").ScopedSerializer<ClassSchema<import("@deepkit/type").ExtractClassType<T, never>>>;
        serializeProperty(property: PropertySchema, value: any): any;
        deserializeProperty(property: PropertySchema, value: any): any;
        deserializeMethodResult(property: PropertySchema, value: any): any;
    };
    constructor();
    quoteValue(value: any): string;
    createSqlFilterBuilder(schema: ClassSchema, tableName: string): SQLiteFilterBuilder;
    getModifyTableDDL(diff: TableDiff): string[];
    protected getMigrationTableDDL(diff: TableDiff): string[];
    protected setColumnType(column: Column, typeProperty: PropertySchema): void;
    /**
     * Unfortunately, SQLite does not support composite pks where one is AUTOINCREMENT,
     * so we have to flag both as NOT NULL and create in either way a UNIQUE constraint over pks since
     * those UNIQUE is otherwise automatically created by the sqlite engine.
     */
    normalizeTables(tables: Table[]): void;
    supportsInlinePrimaryKey(): boolean;
    getSchemaDelimiter(): string;
    getBeginDDL(): string;
    getEndDDL(): string;
    getAutoIncrement(): string;
    getColumnDDL(column: Column): string;
    getForeignKeyDDL(foreignKey: ForeignKey): string;
}
