export declare const SqliteSerializer: {
    readonly name: string;
    toClass: import("@deepkit/type").SerializerCompilers;
    fromClass: import("@deepkit/type").SerializerCompilers;
    toClassSymbol: symbol;
    fromClassSymbol: symbol;
    partialToClassSymbol: symbol;
    partialFromClassSymbol: symbol;
    fork(name: string): import("@deepkit/core").ClassType<import("@deepkit/type").Serializer>;
    for<T extends import("@deepkit/type").ClassSchema<any> | import("@deepkit/core").ClassType<any>>(schemaOrType: T): import("@deepkit/type").ScopedSerializer<import("@deepkit/type").ClassSchema<import("@deepkit/type").ExtractClassType<T, never>>>;
    serializeProperty(property: import("@deepkit/type").PropertySchema, value: any): any;
    deserializeProperty(property: import("@deepkit/type").PropertySchema, value: any): any;
    deserializeMethodResult(property: import("@deepkit/type").PropertySchema, value: any): any;
};
