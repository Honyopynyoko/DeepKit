"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stopwatch = exports.StopwatchFrame = exports.StopwatchStore = void 0;
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
const types_1 = require("./types");
class StopwatchStore {
    constructor() {
        this.frameQueue = [];
        this.dataQueue = [];
    }
    sync() {
    }
    data(data) {
        this.dataQueue.push(data);
        this.sync();
    }
    add(frame) {
        this.frameQueue.push(frame);
        this.sync();
        return 0;
    }
}
exports.StopwatchStore = StopwatchStore;
class StopwatchFrame {
    constructor(store, context, category, id, worker) {
        this.store = store;
        this.context = context;
        this.category = category;
        this.id = id;
        this.worker = worker;
    }
    data(data) {
        this.store.data({ id: this.id, category: this.category, worker: this.worker, data });
    }
    end() {
        this.store.add({ id: this.id, type: types_1.FrameType.end, worker: this.worker, timestamp: 0 });
    }
    run(data, cb) {
        data.stopwatchContextId = this.context;
        return this.store.run(data, cb);
    }
}
exports.StopwatchFrame = StopwatchFrame;
let frameId = 0;
let contextId = 0;
class Stopwatch {
    constructor(store) {
        this.store = store;
        this.times = {};
        /**
         * It's active when there is a StopwatchStore attached.
         * Per default its inactive.
         */
        this.active = false;
        this.active = this.store !== undefined;
    }
    /**
     * Please check Stopwatch.active before using this method.
     *
     * When a new context is created, it's important to use StopwatchFrame.run() so that all
     * sub frames are correctly assigned to the new context.
     */
    start(label, category = types_1.FrameCategory.none, newContext = false) {
        if (!this.active || !this.store)
            throw new Error('Stopwatch not active');
        const id = ++frameId;
        let context = 0;
        const zone = this.store.getZone();
        if (newContext || !zone) {
            context = ++contextId;
        }
        else {
            context = zone.stopwatchContextId;
            if (!context)
                throw new Error('No Stopwatch context given');
        }
        const worker = this.store.add({
            id, type: types_1.FrameType.start, worker: 0, category,
            context: context, label, timestamp: 0,
        });
        return new StopwatchFrame(this.store, context, category, id, worker);
    }
}
exports.Stopwatch = Stopwatch;
//# sourceMappingURL=stopwatch.js.map