"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElement = exports.render = exports.isElementStruct = exports.escapeHtml = exports.html = exports.ElementClass = void 0;
require("reflect-metadata");
const core_1 = require("@deepkit/core");
const type_1 = require("@deepkit/type");
require("./optimize-tsx");
const stopwatch_1 = require("@deepkit/stopwatch");
class ElementClass {
    constructor(attributes) {
        this.attributes = attributes;
    }
}
exports.ElementClass = ElementClass;
/**
 * Tell the template engine to not automatically escape the HTML in the given string.
 * Per default all dynamic values are automatically HTML escaped.
 *
 * This is dangerous: Always validate data that you pass as `string` otherwise this can lead
 * to Cross-Side Scripting attacks.
 */
function html(string) {
    return isHtmlString(string) ? string : { htmlString: string };
}
exports.html = html;
function isHtmlString(obj) {
    return 'object' === typeof obj && 'string' === typeof obj.htmlString;
}
function escapeHtml(html) {
    return 'string' === typeof html ? html.replace(/</g, '&lt;').replace(/>/g, '&gt;') : escapeHtml(String(html));
}
exports.escapeHtml = escapeHtml;
const voidElements = {
    area: true,
    base: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true,
};
function isElementStruct(v) {
    return 'object' === typeof v && v.hasOwnProperty('render') && v.hasOwnProperty('attributes') && !v.slice;
}
exports.isElementStruct = isElementStruct;
async function renderChildren(injector, contents, stopwatch) {
    let children = '';
    //this is 3x faster than contents.join('')
    // for (const content of struct.contents) {
    for (const item of contents) {
        if (item === undefined)
            continue;
        if (type_1.isArray(item)) {
            children += await renderChildren(injector, item, stopwatch);
        }
        else {
            if (isElementStruct(item)) {
                children += await render(injector, item, stopwatch);
            }
            else {
                if (item.htmlString) {
                    children += item.htmlString;
                }
                else {
                    children += escapeHtml(item);
                }
            }
        }
    }
    return children;
}
async function render(injector, struct, stopwatch) {
    var _a;
    if ('string' === typeof struct) {
        return struct;
    }
    let children = '';
    if (struct.children) {
        if (type_1.isArray(struct.children)) {
            children = await renderChildren(injector, struct.children, stopwatch);
        }
        else {
            children = await renderChildren(injector, [struct.children], stopwatch);
        }
    }
    else if (struct.attributes && 'string' !== typeof struct.attributes && ((_a = struct.attributes) === null || _a === void 0 ? void 0 : _a.children)) {
        if (type_1.isArray(struct.attributes.children)) {
            children = await renderChildren(injector, struct.attributes.children, stopwatch);
        }
        else {
            children = await renderChildren(injector, [struct.attributes.children], stopwatch);
        }
    }
    if ('string' === typeof struct.render) {
        const tag = struct.render;
        let res = '<' + tag;
        if (struct.attributes === null) {
        }
        else if ('string' === typeof struct.attributes) {
            if (struct.attributes) {
                res += ' ' + struct.attributes;
            }
        }
        else {
            for (const i in struct.attributes) {
                if (i === 'children')
                    continue;
                const attributeValue = struct.attributes[i];
                const v = isHtmlString(attributeValue) ? attributeValue.htmlString : escapeHtml(attributeValue);
                res += ' ' + i + '="' + v + '"';
            }
        }
        if (voidElements[tag]) {
            res += '/>';
        }
        else {
            res += '>' + children + '</' + tag + '>';
        }
        return res;
    }
    if (core_1.isClass(struct.render)) {
        const element = struct.render;
        const args = [struct.attributes || {}, html(children)];
        const types = Reflect.getMetadata('design:paramtypes', element);
        if (types) {
            for (let i = 2; i < types.length; i++) {
                args.push(injector.get(types[i]));
            }
        }
        const instance = new element(...args);
        if (stopwatch) {
            const frame = stopwatch.start(core_1.getClassName(struct.render), stopwatch_1.FrameCategory.template);
            try {
                return await render(injector, await instance.render(struct.attributes || {}, html(children)), stopwatch);
            }
            finally {
                frame.end();
            }
        }
        return await render(injector, await instance.render(struct.attributes || {}, html(children)), stopwatch);
    }
    if ('function' === typeof struct.render) {
        const frame = stopwatch === null || stopwatch === void 0 ? void 0 : stopwatch.start(struct.render.name, stopwatch_1.FrameCategory.template);
        try {
            const res = await struct.render(struct.attributes || {}, html(children));
            if (isElementStruct(res)) {
                return await render(injector, res, stopwatch);
            }
            else {
                return res + '';
            }
        }
        finally {
            frame === null || frame === void 0 ? void 0 : frame.end();
        }
    }
    return '';
}
exports.render = render;
function createElement(element, attributes, ...children) {
    return { render: element, attributes, children };
}
exports.createElement = createElement;
//# sourceMappingURL=template.js.map