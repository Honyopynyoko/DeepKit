"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("../jsx-runtime");
const globals_1 = require("@jest/globals");
require("reflect-metadata");
require("../src/optimize-tsx");
const template_1 = require("../src/template");
const injector_1 = require("@deepkit/injector");
const simple_1 = require("./simple");
const optimize_tsx_1 = require("../src/optimize-tsx");
globals_1.test('template simple', async () => {
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", {}, void 0))).toBe('<div></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { children: "Test" }, void 0))).toBe('<div>Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { id: "12" }, void 0))).toBe(`<div id="12"></div>`);
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", Object.assign({ id: "12" }, { children: "Test" }), void 0))).toBe(`<div id="12">Test</div>`);
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { children: jsx_runtime_1.jsx("a", Object.assign({ href: "google.de" }, { children: "Link" }), void 0) }, void 0))).toBe('<div><a href="google.de">Link</a></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsxs("div", { children: [jsx_runtime_1.jsx("b", { children: "Link2" }, void 0), jsx_runtime_1.jsx("strong", { children: "Link2" }, void 0)] }, void 0))).toBe('<div><b>Link2</b><strong>Link2</strong></div>');
});
globals_1.test('template html escape', async () => {
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { children: '<strong>MyHTML</strong>' }, void 0))).toBe('<div>&lt;strong&gt;MyHTML&lt;/strong&gt;</div>');
    const myVar = '<strong>MyHTML</strong>';
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { children: myVar }, void 0))).toBe('<div>&lt;strong&gt;MyHTML&lt;/strong&gt;</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { children: template_1.html(myVar) }, void 0))).toBe('<div><strong>MyHTML</strong></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), jsx_runtime_1.jsx("div", { id: myVar }, void 0))).toBe('<div id="&lt;strong&gt;MyHTML&lt;/strong&gt;"></div>');
});
function normalize(string) {
    return string.trim().replace(/\n\s*/g, '');
}
// function test1(props: {[name: string]: any} = {}) {
//     return <div {...props} id="123">Test</div>
// }
// import tree from 'abstract-syntax-tree';
//
// test('template test', async () => {
//     // console.log(test1.toString());
//     // console.log(JSON.stringify(tree.parse('_jsx.createElement("div", {}, void 0)')));
// });
globals_1.test('template jsx for esm convert to createElement', async () => {
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx("div", { id: "123" }, void 0);`))).toBe(`_jsx.createElement("div", {id: "123"});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx("div", { id: myId }, void 0);`))).toBe(`_jsx.createElement("div", {id: myId});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx("div", { id: "123", name: "Peter" }, void 0);`))).toBe(`_jsx.createElement("div", {id: "123",name: "Peter"});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx("div", { children: "Test" }, void 0);`))).toBe(`_jsx.createElement("div", {}, "Test");`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx("div", Object.assign({ id: "123" }, { children: "Test" }), void 0);`))).toBe(`_jsx.createElement("div", {id: "123"}, "Test");`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsxs("div", Object.assign({ id: "123" }, { children: [_jsx("b", { children: "strong" }, void 0), _jsx("b", { children: "strong2" }, void 0)] }), void 0);`))).toBe(`_jsx.createElement("div", {id: "123"}, _jsx.createElement("b", {}, "strong"), _jsx.createElement("b", {}, "strong2"));`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx(Website, { title: "Contact" }, void 0);`))).toBe(`_jsx.createElement(Website, {title: "Contact"});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`_jsx('div', {children: this.config.get('TEST') }, void 0);`))).toBe(`_jsx.createElement("div", {}, this.config.get("TEST"));`);
});
globals_1.test('template jsx for esm optimize', async () => {
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx("div", { id: "123" }, void 0);`))).toBe(`_jsx.html("<div id=\\"123\\"></div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx("div", { id: myId }, void 0);`))).toBe(`_jsx.createElement("div", {id: myId});`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx("div", { id: "123", name: "Peter" }, void 0);`))).toBe(`_jsx.html("<div id=\\"123\\" name=\\"Peter\\"></div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx("div", { children: "Test" }, void 0);`))).toBe(`_jsx.html("<div>Test</div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx("div", Object.assign({ id: "123" }, { children: "Test" }), void 0);`))).toBe(`_jsx.html("<div id=\\"123\\">Test</div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx("div", Object.assign({}, props, { id: "123" }, { children: "Test" }), void 0);`))).toBe(`_jsx.createElement("div", Object.assign({}, props, {id: "123"}), "Test");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsxs("div", Object.assign({ id: "123" }, { children: [_jsx("b", { children: "strong" }, void 0), _jsx("b", { children: "strong2" }, void 0)] }), void 0);`))).toBe(`_jsx.html("<div id=\\"123\\"><b>strong</b><b>strong2</b></div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx(Website, { title: "Contact" }, void 0);`))).toBe(`_jsx.createElement(Website, {title: "Contact"});`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`_jsx(Website, { title: "Contact", children: _jsx("div", { id: "123" }, void 0)}, void 0);`))).toBe(`_jsx.createElement(Website, {title: "Contact"}, _jsx.html("<div id=\\"123\\"></div>"));`);
});
globals_1.test('template jsx for cjs convert to createElement', async () => {
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx("div", { id: "123" }, void 0);`))).toBe(`jsx_runtime_1.createElement("div", {id: "123"});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx("div", { id: myId }, void 0);`))).toBe(`jsx_runtime_1.createElement("div", {id: myId});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx("div", { id: "123", name: "Peter" }, void 0);`))).toBe(`jsx_runtime_1.createElement("div", {id: "123",name: "Peter"});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx("div", { children: "Test" }, void 0);`))).toBe(`jsx_runtime_1.createElement("div", {}, "Test");`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx("div", Object.assign({ id: "123" }, { children: "Test" }), void 0);`))).toBe(`jsx_runtime_1.createElement("div", {id: "123"}, "Test");`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsxs("div", Object.assign({ id: "123" }, { children: [jsx_runtime_1.jsx("b", { children: "strong" }, void 0), jsx_runtime_1.jsx("b", { children: "strong2" }, void 0)] }), void 0);`))).toBe(`jsx_runtime_1.createElement("div", {id: "123"}, jsx_runtime_1.createElement("b", {}, "strong"), jsx_runtime_1.createElement("b", {}, "strong2"));`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx(Website, { title: "Contact" }, void 0);`))).toBe(`jsx_runtime_1.createElement(Website, {title: "Contact"});`);
    globals_1.expect(normalize(optimize_tsx_1.convertJsxCodeToCreateElement(`jsx_runtime_1.jsx('div', {children: this.config.get('TEST') }, void 0);`))).toBe(`jsx_runtime_1.createElement("div", {}, this.config.get("TEST"));`);
});
globals_1.test('template jsx for cjs optimize', async () => {
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx("div", { id: "123" }, void 0);`))).toBe(`jsx_runtime_1.html("<div id=\\"123\\"></div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx("div", { id: myId }, void 0);`))).toBe(`jsx_runtime_1.createElement("div", {id: myId});`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx("div", { id: "123", name: "Peter" }, void 0);`))).toBe(`jsx_runtime_1.html("<div id=\\"123\\" name=\\"Peter\\"></div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx("div", { children: "Test" }, void 0);`))).toBe(`jsx_runtime_1.html("<div>Test</div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx("div", Object.assign({ id: "123" }, { children: "Test" }), void 0);`))).toBe(`jsx_runtime_1.html("<div id=\\"123\\">Test</div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx("div", Object.assign({}, props, { id: "123" }, { children: "Test" }), void 0);`))).toBe(`jsx_runtime_1.createElement("div", Object.assign({}, props, {id: "123"}), "Test");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsxs("div", Object.assign({ id: "123" }, { children: [jsx_runtime_1.jsx("b", { children: "strong" }, void 0), jsx_runtime_1.jsx("b", { children: "strong2" }, void 0)] }), void 0);`))).toBe(`jsx_runtime_1.html("<div id=\\"123\\"><b>strong</b><b>strong2</b></div>");`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx(Website, { title: "Contact" }, void 0);`))).toBe(`jsx_runtime_1.createElement(Website, {title: "Contact"});`);
    globals_1.expect(normalize(optimize_tsx_1.optimizeJSX(`jsx_runtime_1.jsx(Website, { title: "Contact", children: jsx_runtime_1.jsx("div", { id: "123" }, void 0)}, void 0);`))).toBe(`jsx_runtime_1.createElement(Website, {title: "Contact"}, jsx_runtime_1.html("<div id=\\"123\\"></div>"));`);
});
globals_1.test('template simple import', async () => {
    globals_1.expect(await template_1.render(new injector_1.Injector(), simple_1.simple1())).toBe('<div id="123">Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), simple_1.simple2())).toBe('<div id="123"><b>strong</b></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), simple_1.simple3())).toBe('<div id="123"><b>strong</b><b>strong2</b></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), simple_1.simple4())).toBe('<div id="123" class="active"><div><b>strong</b><b>strong2</b></div></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), simple_1.simpleHtmlInjected())).toBe('<div>&lt;strong&gt;MyHTML&lt;/strong&gt;</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), simple_1.simpleHtmlInjectedValid())).toBe('<div><strong>MyHTML</strong></div>');
});
globals_1.test('template render custom', async () => {
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: { id: '123' }, children: 'Test' })).toBe('<div id="123">Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: { id: '123' }, children: '<b>Test</b>' })).toBe('<div id="123">&lt;b&gt;Test&lt;/b&gt;</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: { id: '123' }, children: template_1.html('Test') })).toBe('<div id="123">Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: { id: '123' }, children: [template_1.html('Test')] })).toBe('<div id="123">Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: { id: '123' }, children: [template_1.html('<b>Test</b>')] })).toBe('<div id="123"><b>Test</b></div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: { id: '123' }, children: ["Hi ", template_1.html('Test')] })).toBe('<div id="123">Hi Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: "", children: ["Hi ", template_1.html('Test')] })).toBe('<div>Hi Test</div>');
    globals_1.expect(await template_1.render(new injector_1.Injector(), { render: 'div', attributes: "", children: ["Hi ", { render: 'div', attributes: "", children: template_1.html('Test') }] })).toBe('<div>Hi <div>Test</div></div>');
});
//# sourceMappingURL=template.spec.js.map