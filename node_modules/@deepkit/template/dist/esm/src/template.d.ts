import 'reflect-metadata';
import { ClassType } from '@deepkit/core';
import './optimize-tsx';
import { BasicInjector } from '@deepkit/injector';
import { Stopwatch } from '@deepkit/stopwatch';
export declare type Attributes<T = any> = {
    [P in keyof T]: T[P];
} & {
    children?: (ElementStruct | string)[] | ElementStruct | string;
};
export declare abstract class ElementClass {
    protected attributes: Attributes;
    constructor(attributes: Attributes);
    abstract render(): Element;
}
interface HtmlString {
    htmlString: string;
}
/**
 * Tell the template engine to not automatically escape the HTML in the given string.
 * Per default all dynamic values are automatically HTML escaped.
 *
 * This is dangerous: Always validate data that you pass as `string` otherwise this can lead
 * to Cross-Side Scripting attacks.
 */
export declare function html(string: string | HtmlString): HtmlString;
export declare function escapeHtml(html: string): string;
export interface ElementFn {
    (attributes: Attributes, children: HtmlString | string): Element;
}
export declare type Element = string | ElementFn | ClassType<ElementClass> | Element[];
declare type ElementStructChildren = HtmlString | ElementStruct | string;
export declare type ElementStruct = {
    render: string | ElementFn;
    attributes: Attributes | null | string;
    children: ElementStructChildren | ElementStructChildren[];
};
export declare function isElementStruct(v: any): v is ElementStruct;
export declare function render(injector: BasicInjector, struct: ElementStruct | string, stopwatch?: Stopwatch): Promise<any>;
export declare function createElement(element: Element, attributes?: Attributes | null, ...children: (string | ElementStruct | HtmlString)[]): {
    render: Element;
    attributes: Attributes<any> | null | undefined;
    children: (string | ElementStruct | HtmlString)[];
};
export {};
