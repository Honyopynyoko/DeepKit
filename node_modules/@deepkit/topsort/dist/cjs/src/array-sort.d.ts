import { BaseImplementation } from './base';
interface ItemElement<T> {
    item: T;
    dependencies: T[];
    visited: boolean;
}
/**
 * A topological sort implementation based on  arrays.
 *
 * @author Marc J. Schmidt <marc@marcjschmidt.de>
 */
export declare class ArraySort<T = string> extends BaseImplementation<T> {
    protected elements: Map<T, ItemElement<T>>;
    protected sorted: T[];
    set(elements: Map<T, T[]>): void;
    add(element: T, dependencies?: T[]): void;
    reset(): void;
    /**
     * Visits element and handles it dependencies, queues to internal sorted list in the right order.
     *
     * @throws CircularDependencyException if a circular dependency has been found
     * @throws ElementNotFoundException if a dependency can not be found
     */
    protected visit(element: ItemElement<T>, parents?: Set<T>): void;
    protected addToList(element: ItemElement<T>): void;
    /**
     * Sorts dependencies and returns internal used data structure.
     *
     * @throws CircularDependencyException if a circular dependency has been found
     * @throws ElementNotFoundException if a dependency can not be found
     */
    sort(): T[];
    protected doSort(): T[];
}
export {};
