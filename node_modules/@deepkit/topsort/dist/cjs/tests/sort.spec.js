"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const array_sort_1 = require("../src/array-sort");
const utils_1 = require("./utils");
const base_1 = require("../src/base");
const assert_1 = require("assert");
function getElementsFlat(count) {
    const elements = new Map();
    for (let i = 0; i < count / 3; i++) {
        elements.set('car' + i, ['brand' + i]);
        elements.set('owner' + i, ['brand' + i, 'car' + i]);
        elements.set('brand' + i, []);
    }
    return elements;
}
globals_1.test('bench', () => {
    const count = 10000;
    const items = getElementsFlat(count);
    utils_1.bench(100, `Warmup ${count}`, () => {
        const sorter = new array_sort_1.ArraySort();
        sorter.set(items);
        sorter.sort();
    });
    const sorter = new array_sort_1.ArraySort();
    sorter.set(items);
    utils_1.bench(1, `ArraySort ${count}`, () => {
        sorter.sort();
    });
});
globals_1.test('circular disabled', () => {
    const sorter = new array_sort_1.ArraySort();
    sorter.add('car1', ['owner1']);
    sorter.add('owner1', ['car1']);
    sorter.throwCircularDependency = false;
    sorter.sort();
});
globals_1.test('circular exception', () => {
    const sorter = new array_sort_1.ArraySort();
    sorter.add('car1', ['owner1']);
    sorter.add('owner1', ['brand1']);
    sorter.add('brand1', ['car1']);
    try {
        sorter.sort();
        assert_1.fail('this must fail');
    }
    catch (error) {
        globals_1.expect(error).toBeInstanceOf(base_1.CircularDependencyException);
        if (error instanceof base_1.CircularDependencyException) {
            globals_1.expect(error.nodes).toEqual(['car1', 'owner1', 'brand1']);
            globals_1.expect(error.getStart()).toBe('car1');
            globals_1.expect(error.getEnd()).toBe('brand1');
        }
    }
});
globals_1.test('not found', () => {
    const sorter = new array_sort_1.ArraySort();
    sorter.add('car1', ['owner1']);
    sorter.add('owner1', ['car2']);
    try {
        sorter.sort();
        assert_1.fail('this must fail');
    }
    catch (error) {
        globals_1.expect(error).toBeInstanceOf(base_1.ElementNotFoundException);
        if (error instanceof base_1.ElementNotFoundException) {
            globals_1.expect(error.element).toBe('owner1');
            globals_1.expect(error.dependency).toBe('car2');
        }
    }
});
globals_1.test('blub', () => {
    const sorter = new array_sort_1.ArraySort();
    for (let i = 0; i < 2; i++) {
        sorter.add('car' + i, ['owner' + i, 'brand' + i]);
        sorter.add('owner' + i, ['brand' + i]);
        sorter.add('brand' + i);
    }
    sorter.add('sellerX', ['brandX3']);
    sorter.add('brandY', ['sellerX', 'brandX2']);
    sorter.add('brandX');
    sorter.add('brandX2', ['brandX', 'brandX3']);
    sorter.add('brandX3');
    const result = sorter.sort();
    const expected = [
        'brand0',
        'owner0',
        'car0',
        'brand1',
        'owner1',
        'car1',
        'brandX3',
        'sellerX',
        'brandX',
        'brandX2',
        'brandY',
    ];
    globals_1.expect(result).toEqual(expected);
});
//# sourceMappingURL=sort.spec.js.map