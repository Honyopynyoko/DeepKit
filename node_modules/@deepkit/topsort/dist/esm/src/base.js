/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
export class CircularDependencyException extends Error {
    constructor(nodes) {
        super(`Circular reference found ${nodes.map(v => v.constructor.name).join(' -> ')}`);
        this.nodes = nodes;
    }
    getStart() {
        return this.nodes[0];
    }
    getEnd() {
        return this.nodes[this.nodes.length - 1];
    }
}
export class ElementNotFoundException extends Error {
    constructor(element, dependency) {
        super('Element dependency not found');
        this.element = element;
        this.dependency = dependency;
    }
}
export class BaseImplementation {
    constructor(throwCircularDependency = true) {
        this.throwCircularDependency = throwCircularDependency;
    }
    throwCircularExceptionIfNeeded(element, parents) {
        if (!this.throwCircularDependency)
            return;
        if (parents.has(element)) {
            const nodes = [...parents.values()];
            if (this.circularInterceptor) {
                this.circularInterceptor(nodes);
            }
            else {
                throw new CircularDependencyException(nodes);
            }
        }
    }
}
//# sourceMappingURL=base.js.map