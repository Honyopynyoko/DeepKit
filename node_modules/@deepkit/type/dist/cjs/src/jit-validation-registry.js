"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeCheckerCompiler = exports.registerCheckerCompiler = exports.validationRegistry = void 0;
const serializer_compiler_1 = require("./serializer-compiler");
exports.validationRegistry = new Map();
function registerCheckerCompiler(type, compiler) {
    exports.validationRegistry.set(type, compiler);
}
exports.registerCheckerCompiler = registerCheckerCompiler;
function executeCheckerCompiler(path, rootContext, jitStack, compiler, getter, property) {
    const res = compiler(getter, property, {
        reserveVariable: (name) => {
            return serializer_compiler_1.reserveVariable(rootContext, name);
        },
        context: rootContext,
        path: path,
        raise: (code, message) => {
            return `_errors.push(new ValidationError(${path}, ${JSON.stringify(code)}, ${JSON.stringify(message)}))`;
        },
    }, jitStack);
    if ('string' === typeof res) {
        return res;
    }
    else {
        if (res.context instanceof Map) {
            for (const [k, v] of res.context.entries()) {
                rootContext.set(k, v);
            }
        }
        else {
            for (const i in res.context) {
                if (!res.context.hasOwnProperty(i))
                    continue;
                rootContext.set(i, res.context[i]);
            }
        }
        return res.template;
    }
}
exports.executeCheckerCompiler = executeCheckerCompiler;
//# sourceMappingURL=jit-validation-registry.js.map