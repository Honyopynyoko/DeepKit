import { ClassType } from '@deepkit/core';
import { ClassSchema, PropertySchema, PropertyValidator } from './model';
import { TypeCheckerCompilerContext } from './jit-validation-registry';
import { JitStack } from './jit';
/**
 * The structure of a validation error.
 *
 * Path defines the shallow or deep path (using dots).
 * Message is an arbitrary message in english.
 */
export declare class ValidationFailedItem {
    /**
     * The path to the property. May be a deep path separated by dot.
     */
    readonly path: string;
    /**
     * A lower cased error code that can be used to identify this error and translate.
     */
    readonly code: string;
    /**
     * Free text of the error.
     */
    readonly message: string;
    constructor(
    /**
     * The path to the property. May be a deep path separated by dot.
     */
    path: string, 
    /**
     * A lower cased error code that can be used to identify this error and translate.
     */
    code: string, 
    /**
     * Free text of the error.
     */
    message: string);
    toString(prefix?: string): string;
}
export declare class PropertyValidatorError {
    readonly code: string;
    readonly message: string;
    constructor(code: string, message: string);
}
export declare function handleCustomValidator<T>(propSchema: PropertySchema, validator: PropertyValidator, value: any, propertyPath: string, errors: ValidationFailedItem[], classType?: ClassType): void;
export declare function getDataCheckerJS(path: string, accessor: string, property: PropertySchema, rootContext: TypeCheckerCompilerContext, jitStack: JitStack): string;
export declare function jitValidateProperty(property: PropertySchema, classType?: ClassType): (value: any, path?: string, errors?: ValidationFailedItem[], overwritePah?: string) => ValidationFailedItem[];
export declare function jitValidate<T>(schema: ClassType<T> | ClassSchema<T>, jitStack?: JitStack): (value: any, path?: string, errors?: ValidationFailedItem[]) => ValidationFailedItem[];
export declare function jitValidatePartial<T, K extends keyof T>(classType: ClassType<T>, partial: {
    [name: string]: any;
}, path?: string, errors?: ValidationFailedItem[]): ValidationFailedItem[];
