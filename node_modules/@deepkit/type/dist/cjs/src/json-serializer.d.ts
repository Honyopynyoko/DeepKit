import { ClassType } from '@deepkit/core';
import { JitConverterOptions } from './jit';
import { ClassSchema, PropertySchema } from './model';
import { Serializer } from './serializer';
import { CompilerState } from './serializer-compiler';
import { ExtractClassType, JSONEntity, PlainOrFullEntityFromClassTypeOrSchema } from './utils';
export declare class JSONSerializer extends Serializer {
    constructor();
}
export declare const jsonSerializer: JSONSerializer;
export declare function compilerToString(property: PropertySchema, state: CompilerState): void;
/**
 * Converts a class instance into a plain object, which can be used with JSON.stringify() to convert it into a JSON string.
 */
export declare function classToPlain<T extends ClassType | ClassSchema>(classTypeOrSchema: T, target: ExtractClassType<T>, options?: JitConverterOptions): JSONEntity<ExtractClassType<T>>;
/**
 * Take a regular object literal and returns an instance of classType.
 * Missing data is either replaced by the default value of that property or undefined.
 *
 * This method does not validate the given data. Use either [[validatedPlainToClass]] to validate beforehand
 * or use [[validate]] on your newly created instance.
 *
 * ```typescript
 * const entity = plainToClass(MyEntity, {field1: 'value'});
 * entity instanceof MyEntity; //true
 * ```
 */
export declare function plainToClass<T extends ClassType | ClassSchema>(classTypeOrSchema: T, data: PlainOrFullEntityFromClassTypeOrSchema<ExtractClassType<T>>, options?: JitConverterOptions): ExtractClassType<T>;
/**
 * Same as [plainToClass] but with validation before creating the class instance.
 *
 * ```typescript
 * try {
 *     const entity = await validatedPlainToClass(MyEntity, {field1: 'value'});
 *     entity instanceof MyEntity; //true
 * } catch (error) {
 *     if (error instanceof ValidationFailed) {
 *         //handle that case.
 *     }
 * }
 * ```
 */
export declare function validatedPlainToClass<T extends ClassType | ClassSchema>(classType: T, data: PlainOrFullEntityFromClassTypeOrSchema<ExtractClassType<T>>, options?: JitConverterOptions): ExtractClassType<T>;
export declare function isBinaryJSON(v: any): boolean;
export declare function isBigIntJSON(v: any): boolean;
/**
 * Clones a class instance deeply.
 */
export declare function cloneClass<T>(target: T, options?: JitConverterOptions): T;
export declare function compilerToNumber(property: PropertySchema, state: CompilerState): void;
export declare function convertArray(property: PropertySchema, state: CompilerState): void;
