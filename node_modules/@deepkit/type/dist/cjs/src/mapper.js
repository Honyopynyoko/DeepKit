"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCollectionName = exports.getDatabaseName = exports.getEntityName = exports.isExcluded = exports.isMapType = exports.isArrayType = void 0;
const model_1 = require("./model");
const core_1 = require("@deepkit/core");
/**
 * @hidden
 */
function isArrayType(classType, property) {
    return model_1.getClassSchema(classType).getProperty(property).isArray;
}
exports.isArrayType = isArrayType;
/**
 * @hidden
 */
function isMapType(classType, property) {
    return model_1.getClassSchema(classType).getProperty(property).isMap;
}
exports.isMapType = isMapType;
/**
 * @hidden
 */
function isExcluded(schema, property, wantedTarget) {
    const mode = schema.getProperty(property).exclude;
    if ('all' === mode) {
        return true;
    }
    return mode === wantedTarget;
}
exports.isExcluded = isExcluded;
function getEntityName(classType) {
    const name = model_1.getClassSchema(classType).name;
    if (!name) {
        throw new Error('No @Entity() defined for class ' + core_1.getClassName(classType));
    }
    return name;
}
exports.getEntityName = getEntityName;
/**
 * @hidden
 */
function getDatabaseName(classType) {
    return model_1.getClassSchema(classType).databaseSchemaName;
}
exports.getDatabaseName = getDatabaseName;
/**
 * @hidden
 */
function getCollectionName(classType) {
    return model_1.getClassSchema(classType).collectionName;
}
exports.getCollectionName = getCollectionName;
//# sourceMappingURL=mapper.js.map