"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.propertyDefinition = void 0;
const decorators_1 = require("./decorators");
exports.propertyDefinition = decorators_1.t.schema({
    name: decorators_1.t.string,
    type: decorators_1.t.string,
    literalValue: decorators_1.t.union(decorators_1.t.string, decorators_1.t.number, decorators_1.t.boolean).optional,
    isDecorated: decorators_1.t.literal(true).optional,
    isParentReference: decorators_1.t.literal(true).optional,
    isReference: decorators_1.t.literal(true).optional,
    isOptional: decorators_1.t.literal(true).optional,
    isId: decorators_1.t.literal(true).optional,
    autoIncrement: decorators_1.t.literal(true).optional,
    typeSet: decorators_1.t.literal(true).optional,
    isDiscriminant: decorators_1.t.literal(true).optional,
    allowLabelsAsValue: decorators_1.t.literal(true).optional,
    classType: decorators_1.t.string.optional,
    defaultValue: decorators_1.t.any.optional,
    classTypeName: decorators_1.t.string.optional,
    noValidation: decorators_1.t.boolean.optional,
    methodName: decorators_1.t.string.optional,
    enum: decorators_1.t.map(decorators_1.t.any).optional,
    groupNames: decorators_1.t.array(decorators_1.t.string).optional,
    backReference: decorators_1.t.type({ mappedBy: decorators_1.t.string.optional, via: decorators_1.t.string.optional }).optional,
    templateArgs: decorators_1.t.array(() => exports.propertyDefinition).optional,
});
//# sourceMappingURL=model-schema.js.map