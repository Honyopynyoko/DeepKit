"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeSchemas = exports.deserializeSchemas = exports.serializedSchemaDefinition = void 0;
const decorators_1 = require("./decorators");
const model_1 = require("./model");
const model_schema_1 = require("./model-schema");
exports.serializedSchemaDefinition = decorators_1.t.schema({
    name: decorators_1.t.string.optional,
    embeddedName: decorators_1.t.string.optional,
    className: decorators_1.t.string,
    collectionName: decorators_1.t.string.optional,
    properties: decorators_1.t.array(model_schema_1.propertyDefinition),
});
function deserializeSchemas(schemas, registryPrefix) {
    const result = [];
    function fixRelation(property) {
        if (property.type === 'class') {
            if (!property.classType) {
                console.log('Property has invalid classType value', property);
            }
            property.classType = registryPrefix + property.classType;
        }
        if (property.backReference && property.backReference.via) {
            property.backReference.via = registryPrefix + property.backReference.via;
        }
        if (property.templateArgs)
            for (const p of Object.values(property.templateArgs))
                fixRelation(p);
    }
    const entities = model_1.getGlobalStore().RegisteredEntities;
    for (const entity of schemas) {
        for (const property of Object.values(entity.properties))
            fixRelation(property);
    }
    for (const entity of schemas) {
        const schema = model_1.createClassSchema();
        Object.defineProperty(schema.classType, 'name', { value: entity.className });
        schema.name = entity.name || entity.embeddedName;
        schema.collectionName = entity.collectionName;
        result.push(schema);
        entities[registryPrefix + (entity.embeddedName || entity.name)] = schema;
    }
    for (let i = 0; i < result.length; i++) {
        for (const property of Object.values(schemas[i].properties)) {
            result[i].registerProperty(model_1.PropertySchema.fromJSON(property));
        }
    }
    return result;
}
exports.deserializeSchemas = deserializeSchemas;
function serializeSchemas(schemas) {
    const result = [];
    const embeddedName = new Map();
    let nameId = 0;
    function fixProperty(property, json) {
        if (json.type === 'class') {
            if (!json.classType) {
                let name = embeddedName.get(property.getResolvedClassType());
                if (!name) {
                    //this embedded is not known yet, we register and assign a random number
                    // embedded.set(property.getResolvedClassType(), property.getResolvedClassSchema());
                    name = '@:embedded/' + (++nameId);
                    embeddedName.set(property.getResolvedClassType(), name);
                    registerClassSchema(property.getResolvedClassSchema(), name);
                }
                json.classType = name;
            }
        }
        if (json.templateArgs) {
            for (let i = 0; i < property.templateArgs.length; i++) {
                fixProperty(property.templateArgs[i], json.templateArgs[i]);
            }
        }
    }
    function registerClassSchema(schema, embeddedName) {
        const properties = [...schema.getProperties()].map(v => serializeProperty(v));
        const serializedSchema = {
            name: schema.name,
            embeddedName,
            className: schema.getClassName(),
            collectionName: schema.collectionName,
            properties,
        };
        result.push(serializedSchema);
    }
    function serializeProperty(property) {
        const json = property.toJSON();
        fixProperty(property, json);
        if (json.templateArgs) {
            for (let i = 0; i < property.templateArgs.length; i++) {
                fixProperty(property.templateArgs[i], json.templateArgs[i]);
            }
        }
        return json;
    }
    for (const schema of schemas) {
        registerClassSchema(schema);
    }
    return result;
}
exports.serializeSchemas = serializeSchemas;
//# sourceMappingURL=schema-serializer.js.map