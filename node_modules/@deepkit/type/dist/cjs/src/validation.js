"use strict";
/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatesFactory = exports.validates = exports.validateFactory = exports.validate = exports.validateMethodArgs = exports.ValidationFailed = void 0;
const core_1 = require("@deepkit/core");
const model_1 = require("./model");
const jit_validation_1 = require("./jit-validation");
/**
 *
 */
class ValidationFailed extends core_1.CustomError {
    constructor(errors) {
        super('Validation failed: ' + (errors.map(e => e.toString()).join(', ')));
        this.errors = errors;
    }
    static from(errors) {
        return new ValidationFailed(errors.map(v => new jit_validation_1.ValidationFailedItem(v.path, v.code || '', v.message)));
    }
}
exports.ValidationFailed = ValidationFailed;
/**
 * Validates a set of method arguments and returns the number of errors found.
 */
function validateMethodArgs(classType, methodName, args) {
    const errors = [];
    const schema = model_1.getClassSchema(classType);
    const properties = schema.getMethodProperties(methodName);
    for (const i in properties) {
        jit_validation_1.jitValidateProperty(properties[i], classType)(args[i], '#' + String(i), errors);
    }
    return errors;
}
exports.validateMethodArgs = validateMethodArgs;
/**
 * Validates a object or class instance and returns all errors.
 * Returns an empty array if not errors found and validation succeeded.
 *
 * Warning: If `item` is a plain object this does not check if `item` is exactly of type T, but if it can safely be
 * converted to one using plainToClass/deserialize. For example `t.string` allows numbers because it can be safely converted to string.
 *
 * @example
 * ```
 * validate(SimpleModel, {id: false});
 * ```
 */
function validate(classType, item, path) {
    return jit_validation_1.jitValidate(classType)(item, path);
}
exports.validate = validate;
/**
 * Same as `validate` but as prepared JIT function.
 */
function validateFactory(classType) {
    return jit_validation_1.jitValidate(classType);
}
exports.validateFactory = validateFactory;
/**
 * A type guarded way of using deepkit/type.
 *
 * Note: Methods are not type guarded.
 *
 * Warning: If `item` is a plain object this does not check if `item` is exactly of type T, but if it can safely be
 * converted to one using plainToClass. For example `t.string` allows numbers because it can be safely converted to string.
 *
 * @example
 * ```
 * if (validates(SimpleMode, item)) {
 *     //data is now typeof SimpleMode
 * }
 * ```
 */
function validates(classType, item) {
    return jit_validation_1.jitValidate(classType)(item).length === 0;
}
exports.validates = validates;
/**
 * A type guarded way of using deepkit/type as factory for faster access.
 *
 * Note: Methods are not type guarded.
 *
 * Warning: If `item` is a plain object this does not check if `item` is exactly of type T, but if it can safely be
 * converted to one using deserialize. For example `t.string` allows numbers because it can be safely converted to string.
 *
 * @example
 * ```
 * const simpleModelValidates = validatesFactory(SimpleMode);
 * if (simpleModelValidates(item)) {
 *     //item is now typeof SimpleMode
 * }
 * ```
 */
function validatesFactory(classType) {
    const validation = jit_validation_1.jitValidate(classType);
    return (item) => {
        return validation(item).length === 0;
    };
}
exports.validatesFactory = validatesFactory;
//# sourceMappingURL=validation.js.map