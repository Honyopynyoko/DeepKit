/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { eachPair, extractParameters, getClassName, getClassPropertyName, isFunction, isNumber, isPlainObject, } from '@deepkit/core';
import { isArray } from './utils';
import { createClassDecoratorContext } from './decorator-builder';
import { ClassSchema, createClassSchema, getClassSchema, getGlobalStore, getOrCreateEntitySchema, isPropertyValidator, PropertySchema } from './model';
import { validators } from './validation-decorator';
import { isFieldDecorator } from './field-decorator';
/**
 * Used to define a entity name for an entity.
 *
 * The name is used for an internal registry, so ot should be a unique one.
 *
 * deepkit/type's database abstraction uses this name to generate the collection name / table name.
 *
 * @category Decorator
 */
export function Entity(name, collectionName) {
    return (target) => {
        if (getGlobalStore().RegisteredEntities[name]) {
            throw new Error(`deepkit/type entity with name '${name}' already registered.
            This could be caused by the fact that you used a name twice or that you loaded the entity
            via different imports.`);
        }
        getGlobalStore().RegisteredEntities[name] = target;
        getOrCreateEntitySchema(target).name = name;
        getOrCreateEntitySchema(target).collectionName = collectionName;
    };
}
class EntityApi {
    constructor(target) {
        this.t = new ClassSchema(class {
        });
        this.t = getClassSchema(target);
    }
    name(name) {
        this.t.name = name;
        if (getGlobalStore().RegisteredEntities[name]) {
            throw new Error(`deepkit/type entity with name '${name}' already registered.
            This could be caused by the fact that you used a name twice or that you loaded the entity
            via different imports.`);
        }
        getGlobalStore().RegisteredEntities[name] = this.t;
        this.t.name = name;
    }
    description(description) {
        this.t.description = description;
    }
    collectionName(name) {
        this.t.collectionName = name;
    }
    singleTableInheritance(options = {}) {
        this.t.singleTableInheritance = options;
    }
}
export const entity = createClassDecoratorContext(EntityApi);
/**
 * Used to define a database name for an entity. Per default deepkit's database abstraction
 * uses the default database, but you can change that using this decorator.
 *
 * @category Decorator
 */
export function DatabaseName(name) {
    return (target) => {
        getOrCreateEntitySchema(target).databaseSchemaName = name;
    };
}
export function createValidatorFromFunction(validator) {
    return class {
        validate(value, property, classType) {
            return validator(value, property, classType);
        }
    };
}
function createFieldDecoratorResult(cb, givenPropertyName = '', modifier = [], root = false) {
    function resetIfNecessary() {
        //on root we never use the overwritten name, so we set it back
        //for child FieldDecoratorResults created via asName() etc we keep that stuff (since there is root=false)
        if (root) {
            givenPropertyName = '';
            modifier = [];
        }
    }
    function buildPropertySchema(target, propertyOrMethodName, parameterIndexOrDescriptor, parent) {
        //anon properties
        const propertySchema = new PropertySchema(propertyOrMethodName || String(parameterIndexOrDescriptor), parent);
        for (const mod of modifier) {
            mod(target, propertySchema);
        }
        if (isNumber(parameterIndexOrDescriptor) && target['prototype']) {
            target = target['prototype'];
        }
        cb(target, propertySchema, undefined);
        return propertySchema;
    }
    const fn = (target, propertyOrMethodName, parameterIndexOrDescriptor) => {
        resetIfNecessary();
        if (propertyOrMethodName === undefined && parameterIndexOrDescriptor === undefined) {
            //was used on a class, just exit
            return;
        }
        if (target === Object) {
            buildPropertySchema(target, propertyOrMethodName, parameterIndexOrDescriptor);
        }
        let returnType;
        let methodName = 'constructor';
        const schema = getOrCreateEntitySchema(target);
        const isMethod = propertyOrMethodName && (Reflect.hasMetadata && Reflect.hasMetadata('design:returntype', target, propertyOrMethodName)) && !isNumber(parameterIndexOrDescriptor);
        if (isNumber(parameterIndexOrDescriptor)) {
            //decorator is used on a method argument
            methodName = propertyOrMethodName || 'constructor';
            const methodsParamNames = schema.getMethodsParamNames(methodName);
            const methodsParamNamesAutoResolved = schema.getMethodsParamNamesAutoResolved(methodName);
            if (!givenPropertyName && methodsParamNames[parameterIndexOrDescriptor]) {
                givenPropertyName = methodsParamNames[parameterIndexOrDescriptor];
            }
            if (givenPropertyName && ((methodsParamNames[parameterIndexOrDescriptor] && methodsParamNames[parameterIndexOrDescriptor] !== givenPropertyName)
                || (methodsParamNamesAutoResolved[parameterIndexOrDescriptor] && methodsParamNamesAutoResolved[parameterIndexOrDescriptor] !== givenPropertyName))) {
                //we got a new decorator with a different name on a constructor param
                //since we cant not resolve logically which name to use, we forbid that case.
                throw new Error(`Defining multiple deepkit/type decorators with different names at arguments of ${getClassName(target)}::${methodName} #${parameterIndexOrDescriptor} is forbidden.` +
                    ` @t.asName('name') is required. Got ${methodsParamNames[parameterIndexOrDescriptor] || methodsParamNamesAutoResolved[parameterIndexOrDescriptor]} !== ${givenPropertyName}`);
            }
            if (givenPropertyName) {
                //we only store the name, when we explicitly defined one
                methodsParamNames[parameterIndexOrDescriptor] = givenPropertyName;
            }
            else if (methodName === 'constructor') {
                //only for constructor methods
                const constructorParamNames = extractParameters(target.prototype.constructor);
                // const constructorParamNames = getCachedParameterNames((target as ClassType).prototype.constructor);
                givenPropertyName = constructorParamNames[parameterIndexOrDescriptor];
                if (givenPropertyName) {
                    methodsParamNamesAutoResolved[parameterIndexOrDescriptor] = givenPropertyName;
                }
            }
            if (methodName === 'constructor') {
                //constructor
                const returnTypes = Reflect.getMetadata && Reflect.getMetadata('design:paramtypes', target);
                if (returnTypes)
                    returnType = returnTypes[parameterIndexOrDescriptor];
            }
            else {
                //method
                const returnTypes = Reflect.getMetadata && Reflect.getMetadata('design:paramtypes', target, methodName);
                if (returnTypes)
                    returnType = returnTypes[parameterIndexOrDescriptor];
            }
        }
        else {
            //it's a class property, so propertyOrMethodName contains the actual property name
            if (propertyOrMethodName) {
                returnType = Reflect.getMetadata && Reflect.getMetadata('design:type', target, propertyOrMethodName);
                if (isMethod) {
                    //its a method, so returnType is the actual type
                    returnType = Reflect.getMetadata && Reflect.getMetadata('design:returntype', target, propertyOrMethodName);
                }
            }
            if (!givenPropertyName && propertyOrMethodName) {
                givenPropertyName = propertyOrMethodName;
            }
        }
        const argumentsProperties = schema.getOrCreateMethodProperties(methodName);
        let propertySchema = undefined;
        if (isMethod && propertyOrMethodName) {
            if (givenPropertyName && propertyOrMethodName !== givenPropertyName) {
                throw new Error(`${propertyOrMethodName} asName not allowed on methods.`);
            }
            if (!schema.methods[propertyOrMethodName]) {
                schema.methods[propertyOrMethodName] = new PropertySchema(propertyOrMethodName);
            }
            propertySchema = schema.methods[propertyOrMethodName];
        }
        else {
            if (isNumber(parameterIndexOrDescriptor)) {
                //decorator is used on a method argument. Might be on constructor or any other method.
                if (methodName === 'constructor') {
                    if (!schema.getPropertiesMap().has(givenPropertyName)) {
                        const property = new PropertySchema(givenPropertyName);
                        property.methodName = 'constructor';
                        schema.registerProperty(property);
                    }
                    propertySchema = schema.getPropertiesMap().get(givenPropertyName);
                    argumentsProperties[parameterIndexOrDescriptor] = propertySchema;
                }
                else {
                    if (!argumentsProperties[parameterIndexOrDescriptor]) {
                        const method = target[methodName];
                        if (!method) {
                            throw new Error(`Decorator @t used on a methods argument where the method does not exist. `
                                + `If you manually instantiate t, make sure to pass the Prototype for properties. `
                                + `${getClassPropertyName(target, methodName)} #${parameterIndexOrDescriptor}`);
                        }
                        const constructorParamNames = extractParameters(target[methodName]);
                        const name = constructorParamNames[parameterIndexOrDescriptor] || String(parameterIndexOrDescriptor);
                        argumentsProperties[parameterIndexOrDescriptor] = new PropertySchema(name);
                        argumentsProperties[parameterIndexOrDescriptor].methodName = methodName;
                    }
                    propertySchema = argumentsProperties[parameterIndexOrDescriptor];
                }
            }
            else {
                if (!givenPropertyName) {
                    throw new Error(`Could not resolve property name for class property on ${getClassName(target)}`);
                }
                propertySchema = schema.getPropertiesMap().get(givenPropertyName) || new PropertySchema(givenPropertyName);
                schema.registerProperty(propertySchema);
            }
        }
        for (const mod of modifier) {
            mod(target, propertySchema);
        }
        if (isNumber(parameterIndexOrDescriptor) && target['prototype']) {
            target = target['prototype'];
        }
        cb(target, propertySchema, returnType);
    };
    Object.defineProperty(fn, 'name', {
        get: () => (name) => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, name, modifier);
        }
    });
    for (const [validatorName, validatorFn] of Object.entries(validators)) {
        Object.defineProperty(fn, validatorName, {
            get: () => (...args) => {
                resetIfNecessary();
                return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                        property.validators.push(createValidatorFromFunction(validatorFn(...args)));
                    }]);
            }
        });
    }
    Object.defineProperty(fn, 'optional', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Optional()]);
        }
    });
    Object.defineProperty(fn, 'required', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Required()]);
        }
    });
    Object.defineProperty(fn, 'nullable', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Nullable()]);
        }
    });
    Object.defineProperty(fn, 'discriminant', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Discriminant()]);
        }
    });
    fn.default = (v) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Default(v)]);
    };
    fn.transform = (t, serializer = 'all') => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.serialization.set(serializer, t);
                property.deserialization.set(serializer, t);
            }]);
    };
    fn.serialize = (t, serializer = 'all') => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.serialization.set(serializer, t);
            }]);
    };
    fn.deserialize = (t, serializer = 'all') => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.deserialization.set(serializer, t);
            }]);
    };
    fn.description = (v) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.description = v;
            }]);
    };
    fn.exclude = (target = 'all') => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Exclude(target)]);
    };
    Object.defineProperty(fn, 'primary', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, IDField()]);
        }
    });
    Object.defineProperty(fn, 'autoIncrement', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.isAutoIncrement = true;
                    property.defaultValue = () => 0;
                }]);
        }
    });
    Object.defineProperty(fn, 'noValidation', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.noValidation = true;
                }]);
        }
    });
    fn.index = (options, name) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Index(options, name)]);
    };
    fn.data = (key, value) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Data(key, value)]);
    };
    fn.group = (...names) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, GroupName(...names)]);
    };
    Object.defineProperty(fn, 'mongoId', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, MongoIdField()]);
        }
    });
    Object.defineProperty(fn, 'uuid', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, UUIDField()]);
        }
    });
    Object.defineProperty(fn, 'decorated', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, Decorated()]);
        }
    });
    Object.defineProperty(fn, 'parentReference', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, ParentReference()]);
        }
    });
    fn.use = (decorator) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, decorator]);
    };
    fn.reference = (options) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                if (property.isArray || property.isMap)
                    throw new Error('Reference can not be of type array or map. Inverse the relation, or use backReference()');
                property.isReference = true;
                if (options && options.onDelete)
                    property.referenceOptions.onDelete = options.onDelete;
                if (options && options.onUpdate)
                    property.referenceOptions.onUpdate = options.onUpdate;
                getClassSchema(target).registerReference(property);
            }]);
    };
    Object.defineProperty(fn, 'string', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.setType('string');
                }]);
        }
    });
    Object.defineProperty(fn, 'number', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.setType('number');
                }]);
        }
    });
    Object.defineProperty(fn, 'bigint', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.setType('bigint');
                }]);
        }
    });
    // Object.defineProperty(fn, 'integer', {
    //     get: () => {
    //         resetIfNecessary();
    //         return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target: object, property: PropertySchema) => {
    //             property.setType('integer');
    //         }]);
    //     }
    // });
    Object.defineProperty(fn, 'date', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.setType('date');
                }]);
        }
    });
    Object.defineProperty(fn, 'boolean', {
        get: () => {
            resetIfNecessary();
            return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                    property.setType('boolean');
                }]);
        }
    });
    fn.backReference = (options) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.backReference = options || {};
                getClassSchema(target).registerReference(property);
            }]);
    };
    fn.generic = fn.template = (...templateArgs) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.templateArgs = [];
                for (const [i, t] of eachPair(templateArgs)) {
                    const name = property.name + '_' + i;
                    if ('string' === typeof t || 'number' === typeof t || 'boolean' === typeof t) {
                        const p = fRaw.literal(t).buildPropertySchema(name, property);
                        property.templateArgs.push(p);
                    }
                    else if (isFieldDecorator(t)) {
                        //its a decorator @f()
                        //target: object, propertyOrMethodName?: string, parameterIndexOrDescriptor?: any
                        const p = t.buildPropertySchema(name);
                        property.templateArgs.push(p);
                    }
                    else if (t instanceof ClassSchema) {
                        property.templateArgs.push(fRaw.type(t.classType).buildPropertySchema(name, property));
                    }
                    else if (isPlainObject(t)) {
                        const schema = fRaw.schema(t);
                        property.templateArgs.push(fRaw.type(schema.classType).buildPropertySchema(name, property));
                    }
                    else {
                        const p = new PropertySchema(name, property);
                        p.setFromJSType(t);
                        property.templateArgs.push(p);
                    }
                }
            }]);
    };
    fn.buildPropertySchema = function (name = 'unknown', parent) {
        return buildPropertySchema(Object, name, undefined, parent);
    };
    fn.toString = function () {
        return buildPropertySchema(Object, givenPropertyName).toString();
    };
    fn.mysql = (options) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.data['mysql'] = options;
            }]);
    };
    fn.postgres = (options) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.data['postgres'] = options;
            }]);
    };
    fn.sqlite = (options) => {
        resetIfNecessary();
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.data['sqlite'] = options;
            }]);
    };
    fn.validator = (...validators) => {
        resetIfNecessary();
        const validatorClasses = [];
        for (const validator of validators) {
            if (isPropertyValidator(validator)) {
                validatorClasses.push(validator);
            }
            else {
                validatorClasses.push(createValidatorFromFunction(validator));
            }
        }
        return createFieldDecoratorResult(cb, givenPropertyName, [...modifier, (target, property) => {
                property.validators.push(...validatorClasses);
            }]);
    };
    return fn;
}
/**
 * Helper for decorators that are allowed to be placed in property declaration and constructor property declaration.
 * We detect the name by reading the constructor' signature, which would be otherwise lost.
 */
export function FieldDecoratorWrapper(cb, root = false) {
    return createFieldDecoratorResult(cb, '', [], root);
}
/**
 * @internal
 */
function Decorated() {
    return (target, property) => {
        getOrCreateEntitySchema(target).decorator = property.name;
        property.isDecorated = true;
    };
}
/**
 * @internal
 */
function IDField() {
    return (target, property) => {
        const schema = getOrCreateEntitySchema(target);
        property.isId = true;
        // Index({unique: true}, '_pk')(target, property);
    };
}
/**
 * @internal
 */
function Optional() {
    return (target, property) => {
        property.isOptional = true;
    };
}
/**
 * @internal
 */
function Required() {
    return (target, property) => {
        property.isOptional = false;
        property.manuallySetToRequired = true;
    };
}
/**
 * @internal
 */
function Nullable() {
    return (target, property) => {
        property.isNullable = true;
    };
}
/**
 * @internal
 */
function Default(v) {
    return (target, property) => {
        if (isArray(v)) {
            property.defaultValue = () => v.slice(0);
        }
        else if (isPlainObject(v)) {
            property.defaultValue = () => {
                return { ...v };
            };
        }
        else {
            property.defaultValue = isFunction(v) ? v : () => v;
        }
    };
}
/**
 * @internal
 */
function Discriminant() {
    return (target, property) => {
        getOrCreateEntitySchema(target).discriminant = property.name;
        property.isDiscriminant = true;
    };
}
/**
 * @internal
 */
function GroupName(...names) {
    return (target, property) => {
        property.groupNames = names;
    };
}
/**
 * Used to define a field as a reference to a parent.
 *
 * Example one direction.
 *
 * ```typescript
 * class JobConfig {
 *     @t.type(() => Job).parentReference //forward necessary since circular dependency
 *     job: Job;
 *
 * }
 *
 * class Job {
 *     @f config: JobConfig;
 * }
 * ```
 *
 * Example circular parent-child setup.
 *
 * ```typescript
 * export class PageClass {
 *     @t.uuid
 *     id: string = uuid();
 *
 *     @f
 *     name: string;
 *
 *     @t.type(() => PageClass) //forward necessary since circular dependency
 *     children: PageClass[] = [];
 *
 *     @t.type(() => PageClass).optional.parentReference //forward necessary since circular dependency
 *     parent?: PageClass;
 *
 *     constructor(name: string) {
 *         this.name = name;
 *     }
 * ```
 *
 * @internal
 */
export function ParentReference() {
    return (target, property) => {
        property.isParentReference = true;
    };
}
/**
 * Used to define a method as callback which will be called when the object has been completely serialized.
 * When fullLoad is true the callback is called when all references are loaded as well. This is particularly useful
 * when you have @ParentReference() properties, which will be undefined in regular OnLoad callback.
 *
 * Example
 * ```typescript
 * class User {
 *     @OnLoad()
 *     onLoad() {
 *         console.log('self loaded!');
 *     }
 *
 *     @OnLoad({fullLoad: true})
 *     onFullLoad() {
 *         console.log('fully loaded, including parent references');
 *     }
 * }
 *
 * ```
 *
 * @category Decorator
 */
export function OnLoad(options = {}) {
    return (target, property) => {
        getOrCreateEntitySchema(target).onLoad.push({
            methodName: property,
            options: options,
        });
    };
}
/**
 * @internal
 */
function Exclude(t = 'all') {
    return (target, property) => {
        property.exclude = t;
    };
}
/**
 * Decorator to define a field for an entity.
 */
function Field(type) {
    return FieldDecoratorWrapper((target, property, returnType) => {
        const propertyName = property.name;
        if (property.type === 'any' && !property.typeSet) {
            if (type) {
                if ('string' === typeof type) {
                    property.type = type;
                    property.typeSet = true;
                }
                else if (type instanceof ClassSchema) {
                    property.type = 'class';
                    property.classType = type.classType;
                    property.typeSet = true;
                }
                else if (isPlainObject(type)) {
                    property.type = 'class';
                    property.classType = fRaw.schema(type).classType;
                    property.typeSet = true;
                }
                else {
                    property.setFromJSType(type);
                }
            }
            else if (returnType !== Array) {
                property.setFromJSType(returnType);
            }
        }
        const id = getClassName(target) + (property.methodName ? '::' + property.methodName : '') + '::' + propertyName;
        function getTypeName(t) {
            if (t === Object)
                return 'Object';
            if (t === String)
                return 'String';
            if (t === Number)
                return 'Number';
            if (t === Boolean)
                return 'Boolean';
            if (t === Array)
                return 'Array';
            if (t === Date)
                return 'Date';
            if (isFunction(t))
                return 'ForwardRef';
            if (t === undefined)
                return 'undefined';
            if (t === 'any')
                return 'any';
            if (t === 'union')
                return 'union';
            return getClassName(t);
        }
        if (returnType !== Promise && returnType !== undefined && type !== 'any') {
            //we don't want to check for type mismatch when returnType is a Promise.
            if (property.typeSet && property.isArray && returnType !== Array) {
                throw new Error(`${id} type mismatch. Given ${property}, but declared is ${getTypeName(returnType)}. ` +
                    `Please use the correct type in @t.type(T).`);
            }
            if (property.typeSet && !property.isArray && returnType === Array) {
                throw new Error(`${id} type mismatch. Given ${property}, but declared is ${getTypeName(returnType)}. ` +
                    `Please use @t.array(MyType) or @t.array(() => MyType), e.g. @t.array(String) for '${propertyName}: string[]'.`);
            }
            if (property.typeSet && property.isMap && returnType !== Object) {
                throw new Error(`${id} type mismatch. Given ${property}, but declared is ${getTypeName(returnType)}. ` +
                    `Please use the correct type in @t.type(TYPE).`);
            }
            if (!property.typeSet && returnType === Array) {
                throw new Error(`${id} type mismatch. Given nothing, but declared is Array. You have to specify what type is in that array.  ` +
                    `When you don't declare a type in TypeScript or types are excluded, you need to pass a type manually via @t.array(t.string).\n` +
                    `If you don't have a type, use @t.any.`);
            }
            if (!property.typeSet && returnType === Object) {
                //typescript puts `Object` for undefined types.
                throw new Error(`${id} type mismatch. Given ${property}, but declared is Object or undefined. ` +
                    `Please note that Typescript's reflection system does not support type hints based on interfaces or custom types, but only classes and primitives (String, Number, Boolean, Date). ` +
                    `When you don't declare a type in TypeScript or types are excluded, you need to pass a type manually via @t.string.\n` +
                    `If you don't have a type, use @t.any. If you reference a class with circular dependency, use @t.type(() => MyType).`);
            }
        }
    }, true);
}
const fRaw = Field();
fRaw['schema'] = function (props, options = {}, base) {
    var _a;
    let extendClazz;
    if (base) {
        if (base instanceof ClassSchema) {
            extendClazz = base.classType;
        }
        else {
            extendClazz = base;
        }
    }
    const clazz = extendClazz ? class extends extendClazz {
    } : ((_a = options.classType) !== null && _a !== void 0 ? _a : class {
    });
    const schema = createClassSchema(clazz, options.name);
    schema.fromClass = false;
    schema.collectionName = options.collectionName;
    if (!props)
        throw new Error('No props given');
    for (const [name, prop] of Object.entries(props)) {
        if ('string' === typeof prop || 'number' === typeof prop || 'boolean' === typeof prop) {
            schema.addProperty(name, fRaw.literal(prop));
        }
        else if (isFieldDecorator(prop)) {
            schema.addProperty(name, prop);
        }
        else if (prop instanceof ClassSchema) {
            schema.addProperty(name, fRaw.type(prop.classType));
        }
        else {
            const subSchema = fRaw.schema(prop, { name });
            schema.addProperty(name, fRaw.type(subSchema.classType));
        }
    }
    return schema;
};
fRaw['extendSchema'] = function (base, props, options = {}) {
    return fRaw['schema'](props, options, base);
};
fRaw['class'] = function (props, options = {}, base) {
    return fRaw.schema(props, options).classType;
};
fRaw['extendClass'] = function (base, props, options = {}) {
    return fRaw.schema(props, options, base).classType;
};
fRaw['array'] = function (type) {
    return Field('array').template(type);
};
fRaw['map'] = function (type, keyType = fRaw.any) {
    return Field('map').template(keyType, type);
};
fRaw['any'] = Field('any');
fRaw['type'] = function (type) {
    return Field(type);
};
fRaw['literal'] = function (type) {
    return Field('literal').use((target, property) => {
        property.type = 'literal';
        property.literalValue = type;
    });
};
fRaw['union'] = function (...types) {
    return Field('union').use((target, property) => {
        property.setType('union');
    }).generic(...types);
};
fRaw['partial'] = function (type) {
    let schema = type instanceof ClassSchema ? type.clone() : new ClassSchema(class {
    });
    if (isPlainObject(type)) {
        schema = t.schema(type);
    }
    else {
        schema = getClassSchema(type).clone();
    }
    for (const property of schema.getProperties()) {
        property.isOptional = true; //a Partial<T> is defined in a way that makes all its properties optional
    }
    return Field('partial').generic(schema);
};
fRaw['enum'] = function (clazz, allowLabelsAsValue = false) {
    return Field('enum').use((target, property) => {
        property.setFromJSType(clazz);
        property.type = 'enum';
        property.allowLabelsAsValue = allowLabelsAsValue;
    });
};
/**
 * This is the main decorator to define a properties on class or arguments on methods.
 *
 * ```typescript
 * class SubModel {
 *    @f label: string;
 * }
 *
 * export enum Plan {
 *   DEFAULT,
 *   PRO,
 *   ENTERPRISE,
 * }
 *
 * class SimpleModel {
 *   @t.primary.uuid
 *   id: string = uuid();
 *
 *   @t.array(f.string)
 *   tags: string[] = [];
 *
 *   @t.type(ArrayBuffer).optional() //binary
 *   picture?: ArrayBuffer;
 *
 *   @f
 *   type: number = 0;
 *
 *   @t.enum(Plan)
 *   plan: Plan = Plan.DEFAULT;
 *
 *   @f
 *   created: Date = new Date;
 *
 *   @t.array(SubModel)
 *   children: SubModel[] = [];
 *
 *   @t.map(SubModel)
 *   childrenMap: {[key: string]: SubModel} = {};
 *
 *   constructor(
 *       @t.index().name('name') //name is required for minimized code
 *       public name: string
 *   ) {}
 * }
 * ```
 *
 * @category Decorator
 */
export const f = fRaw;
export const field = fRaw;
export const type = fRaw;
export const t = fRaw;
/**
 * @internal
 */
function MongoIdField() {
    return (target, property) => {
        property.setType('objectId');
        if (property.name === '_id') {
            property.isOptional = true;
        }
    };
}
/**
 * @internal
 */
function UUIDField() {
    return (target, property) => {
        property.setType('uuid');
    };
}
/**
 * @internal
 */
function Index(options, name) {
    return (target, property) => {
        const schema = getOrCreateEntitySchema(target);
        if (property.methodName && property.methodName !== 'constructor') {
            throw new Error('Index could not be used on method arguments.');
        }
        name = name || property.name;
        options = options || {};
        const index = schema.indices.get(name);
        const fields = [];
        if (index) {
            fields.push(...index.fields);
        }
        fields.push(property.name);
        if (index) {
            options = Object.assign({}, index.options, options);
        }
        schema.indices.set(name, { fields, options });
    };
}
/**
 * @internal
 */
function Data(key, value) {
    return (target, property) => {
        property.data[key] = value;
    };
}
/**
 * Used to define an index on a class.
 *
 * @category Decorator
 */
export function MultiIndex(fields, options, name) {
    return (target, property, parameterIndexOrDescriptor) => {
        const classType = target.prototype;
        const schema = getOrCreateEntitySchema(classType);
        schema.indices.set(name || fields.join('_'), { fields: fields, options: options || {} });
    };
}
//# sourceMappingURL=decorators.js.map