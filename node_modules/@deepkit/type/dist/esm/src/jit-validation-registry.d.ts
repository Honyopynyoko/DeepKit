import { PropertySchema } from './model';
import { Types } from './types';
import { JitStack } from './jit';
export declare type TypeCheckerCompilerContext = Map<string, any>;
export declare type TypeCheckerCompiler = (accessor: string, property: PropertySchema, utils: {
    reserveVariable: (name?: string) => string;
    path: string;
    context: TypeCheckerCompilerContext;
    raise: (code: string, message: string) => string;
}, jitStack: JitStack) => string | {
    template: string;
    context: {
        [name: string]: any;
    } | Map<string, any>;
};
export declare const validationRegistry: Map<string, TypeCheckerCompiler>;
export declare function registerCheckerCompiler(type: Types, compiler: TypeCheckerCompiler): void;
export declare function executeCheckerCompiler(path: string, rootContext: TypeCheckerCompilerContext, jitStack: JitStack, compiler: TypeCheckerCompiler, getter: string, property: PropertySchema): string;
