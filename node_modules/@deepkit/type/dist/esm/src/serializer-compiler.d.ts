import { PropertySchema } from './model';
import { JitStack } from './jit';
import { SerializerCompilers } from './serializer';
export declare type TypeConverterCompilerContext = Map<string, any>;
export declare type ReserveVariable = (name?: string) => string;
export declare class CompilerState {
    originalSetter: string;
    originalAccessor: string;
    readonly rootContext: TypeConverterCompilerContext;
    readonly jitStack: JitStack;
    readonly serializerCompilers: SerializerCompilers;
    template: string;
    ended: boolean;
    setter: string;
    accessor: string;
    constructor(originalSetter: string, originalAccessor: string, rootContext: TypeConverterCompilerContext, jitStack: JitStack, serializerCompilers: SerializerCompilers);
    /**
     * Adds template code for setting the `this.setter` variable. The expression evaluated in `code` is assigned to `this.setter`.
     * `this.accessor` will point now to `this.setter`.
     */
    addSetter(code: string): void;
    forceEnd(): void;
    setVariable(name?: string, value?: any): string;
    setContext(values: {
        [name: string]: any;
    }): void;
    /**
     * Adds template code for setting the `this.setter` variable manually, so use `${this.setter} = value`.
     * `this.accessor` will point now to `this.setter`.
     */
    addCodeForSetter(code: string): void;
    hasSetterCode(): boolean;
}
export declare type TypeConverterCompiler = (property: PropertySchema, compiler: CompilerState) => void;
export declare function reserveVariable(rootContext: TypeConverterCompilerContext, name?: string, value?: any): string;
export declare function executeCompiler(rootContext: TypeConverterCompilerContext, jitStack: JitStack, compiler: TypeConverterCompiler, setter: string, getter: string, property: PropertySchema, serializerCompilers: SerializerCompilers): string;
export declare function getDataConverterJS(setter: string, accessor: string, property: PropertySchema, serializerCompilers: SerializerCompilers, rootContext: TypeConverterCompilerContext, jitStack: JitStack, undefinedSetterCode?: string, nullSetterCode?: string): string;
