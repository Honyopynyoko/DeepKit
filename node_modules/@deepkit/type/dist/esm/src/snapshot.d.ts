import { ClassSchema, PropertySchema } from './model';
import { Serializer } from './serializer';
/**
 * Creates a new JIT compiled function to convert the class instance to a snapshot.
 * A snapshot is essentially the class instance as `plain` serialization while references are
 * stored only as their primary keys.
 *
 * Generated function is cached.
 */
export declare function getConverterForSnapshot(classSchema: ClassSchema): (value: any) => any;
/**
 * Creates a snapshot using getConverterForSnapshot().
 */
export declare function createSnapshot<T>(classSchema: ClassSchema<T>, item: T): any;
/**
 * Extracts the primary key of JSONPartial (snapshot) and converts to class type.
 */
export declare function getPrimaryKeyExtractor<T>(classSchema: ClassSchema<T>): (value: any) => Partial<T>;
/**
 * Creates a primary key hash generator that takes an item from any format
 * converts it to class format, then to plain, then uses the primitive values to create a string hash.
 */
export declare function getPrimaryKeyHashGenerator(classSchema: ClassSchema, serializer?: Serializer): (value: any) => string;
export declare function getForeignKeyHash(row: any, property: PropertySchema): string;
declare function simplePrimaryKeyHash(value: any): string;
export declare function getSimplePrimaryKeyHashGenerator(classSchema: ClassSchema): typeof simplePrimaryKeyHash;
export {};
