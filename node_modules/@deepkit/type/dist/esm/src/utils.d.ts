import { ClassType } from '@deepkit/core';
import { ClassSchema } from './model';
import { ExtractPrimaryKeyOrReferenceType, TypedArrays } from './types';
/**
 * Returns a new UUID v4 as string.
*/
export declare function uuid(): string;
/**
 * Writes a new uuid v4 into an existing buffer, and returns the same buffer.
 */
export declare function writeUuid(buffer: Uint8Array, offset?: number): Uint8Array;
/**
 * Stringify an exising Uint8Array buffer.
 */
export declare function stringifyUuid(buffer: Uint8Array, offset?: number): string;
export declare function isArray(obj: any): obj is Array<any>;
export declare type JSONPartialSingle<T> = T extends Date ? string : T extends Array<infer K> ? Array<JSONPartialSingle<K>> : T extends TypedArrays ? string : T extends ArrayBuffer ? string : T extends object ? JSONPartial<T> : T extends string ? number | T : T extends boolean ? number | string | T : T extends number ? T | string : T;
export declare type JSONPartial<T> = {
    [name in keyof T & string]?: JSONPartialSingle<ExtractPrimaryKeyOrReferenceType<T[name]>>;
};
export declare type JSONSingle<T> = T extends Date ? string | Date : T extends Array<infer K> ? Array<JSONSingle<K>> : T extends TypedArrays ? string : T extends ArrayBuffer ? string : T extends object ? JSONEntity<T> : T extends string ? T : T extends boolean ? T : T extends number ? T : T;
export declare type JSONEntity<T> = {
    [name in keyof T & string]: JSONSingle<ExtractPrimaryKeyOrReferenceType<T[name]>>;
};
export declare type AnyEntitySingle<T> = T extends Array<infer K> ? Array<AnyEntitySingle<K>> : T extends TypedArrays ? any : T extends ArrayBuffer ? any : T extends object ? AnyEntity<T> : T extends string ? any : T extends boolean ? any : T extends number ? any : any;
export declare type AnyEntity<T> = {
    [name in keyof T & string]: AnyEntitySingle<ExtractPrimaryKeyOrReferenceType<T[name]>>;
};
export declare type JSONPatch<T> = {
    [name in keyof T & string]: JSONSingle<T[name]>;
} | {
    [name: string]: any;
};
export declare type FlattenIfArray<T> = T extends Array<any> ? T[0] : T;
export declare type ExtractClassType<T, A = never> = T extends ClassType<infer K> ? K : T extends ClassSchema<infer K> ? K : A;
export declare type PlainOrFullEntityFromClassTypeOrSchema<T> = {
    [name: string]: any;
} | JSONPartial<ExtractClassType<T>> | ExtractClassType<T>;
