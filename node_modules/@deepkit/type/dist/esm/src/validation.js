/*
 * Deepkit Framework
 * Copyright (C) 2021 Deepkit UG, Marc J. Schmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the MIT License.
 *
 * You should have received a copy of the MIT License along with this program.
 */
import { CustomError } from '@deepkit/core';
import { getClassSchema, } from './model';
import { jitValidate, jitValidateProperty, ValidationFailedItem } from './jit-validation';
/**
 *
 */
export class ValidationFailed extends CustomError {
    constructor(errors) {
        super('Validation failed: ' + (errors.map(e => e.toString()).join(', ')));
        this.errors = errors;
    }
    static from(errors) {
        return new ValidationFailed(errors.map(v => new ValidationFailedItem(v.path, v.code || '', v.message)));
    }
}
/**
 * Validates a set of method arguments and returns the number of errors found.
 */
export function validateMethodArgs(classType, methodName, args) {
    const errors = [];
    const schema = getClassSchema(classType);
    const properties = schema.getMethodProperties(methodName);
    for (const i in properties) {
        jitValidateProperty(properties[i], classType)(args[i], '#' + String(i), errors);
    }
    return errors;
}
/**
 * Validates a object or class instance and returns all errors.
 * Returns an empty array if not errors found and validation succeeded.
 *
 * Warning: If `item` is a plain object this does not check if `item` is exactly of type T, but if it can safely be
 * converted to one using plainToClass/deserialize. For example `t.string` allows numbers because it can be safely converted to string.
 *
 * @example
 * ```
 * validate(SimpleModel, {id: false});
 * ```
 */
export function validate(classType, item, path) {
    return jitValidate(classType)(item, path);
}
/**
 * Same as `validate` but as prepared JIT function.
 */
export function validateFactory(classType) {
    return jitValidate(classType);
}
/**
 * A type guarded way of using deepkit/type.
 *
 * Note: Methods are not type guarded.
 *
 * Warning: If `item` is a plain object this does not check if `item` is exactly of type T, but if it can safely be
 * converted to one using plainToClass. For example `t.string` allows numbers because it can be safely converted to string.
 *
 * @example
 * ```
 * if (validates(SimpleMode, item)) {
 *     //data is now typeof SimpleMode
 * }
 * ```
 */
export function validates(classType, item) {
    return jitValidate(classType)(item).length === 0;
}
/**
 * A type guarded way of using deepkit/type as factory for faster access.
 *
 * Note: Methods are not type guarded.
 *
 * Warning: If `item` is a plain object this does not check if `item` is exactly of type T, but if it can safely be
 * converted to one using deserialize. For example `t.string` allows numbers because it can be safely converted to string.
 *
 * @example
 * ```
 * const simpleModelValidates = validatesFactory(SimpleMode);
 * if (simpleModelValidates(item)) {
 *     //item is now typeof SimpleMode
 * }
 * ```
 */
export function validatesFactory(classType) {
    const validation = jitValidate(classType);
    return (item) => {
        return validation(item).length === 0;
    };
}
//# sourceMappingURL=validation.js.map