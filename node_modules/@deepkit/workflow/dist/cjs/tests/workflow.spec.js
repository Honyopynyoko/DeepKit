"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("reflect-metadata");
const workflow_1 = require("../src/workflow");
const event_1 = require("@deepkit/event");
const injector_1 = require("@deepkit/injector");
class EndEvent extends workflow_1.WorkflowEvent {
    constructor() {
        super(...arguments);
        this.test = 'hi';
    }
}
const workflow1 = workflow_1.createWorkflow('myFlow', {
    start: workflow_1.WorkflowEvent,
    doIt: workflow_1.WorkflowEvent,
    failed: workflow_1.WorkflowEvent,
    success: workflow_1.WorkflowEvent,
    end: EndEvent,
}, {
    start: 'doIt',
    doIt: ['failed', 'success'],
    success: 'end',
    failed: 'end'
});
globals_1.test('workflow', async () => {
    globals_1.expect(workflow1.onDoIt).toBeInstanceOf(event_1.EventToken);
    const w = workflow1.create('start', new event_1.EventDispatcher());
    globals_1.expect(w.state.get()).toBe('start');
    globals_1.expect(w.isDone()).toBe(false);
    globals_1.expect(w.can('doIt')).toBe(true);
    globals_1.expect(w.can('failed')).toBe(false);
    globals_1.expect(w.can('success')).toBe(false);
    globals_1.expect(w.can('end')).toBe(false);
    await globals_1.expect(w.apply('success')).rejects.toThrow('Can not apply state change from start->success');
    await w.apply('doIt');
    globals_1.expect(w.state.get()).toBe('doIt');
    globals_1.expect(w.isDone()).toBe(false);
    globals_1.expect(w.can('doIt')).toBe(false);
    globals_1.expect(w.can('failed')).toBe(true);
    globals_1.expect(w.can('success')).toBe(true);
    globals_1.expect(w.can('end')).toBe(false);
    globals_1.expect(w.isDone()).toBe(false);
    await w.apply('success');
    await globals_1.expect(w.apply('end')).rejects.toThrow('State end got the wrong event. Expected EndEvent, got WorkflowEvent');
    await w.apply('end', new EndEvent());
    globals_1.expect(w.isDone()).toBe(true);
    globals_1.expect(w.state.get()).toBe('end');
});
globals_1.test('workflow events', async () => {
    const dispatcher = new event_1.EventDispatcher(injector_1.InjectorContext.forProviders([]));
    const w = workflow1.create('start', dispatcher);
    let called = false;
    dispatcher.registerCallback(workflow1.onDoIt, async () => {
        called = true;
    });
    await w.apply('doIt');
    globals_1.expect(called).toBe(true);
    globals_1.expect(w.state.get()).toBe('doIt');
});
globals_1.test('workflow events listener', async () => {
    let called = false;
    class Listener {
        onDoIt() {
            called = true;
        }
    }
    __decorate([
        event_1.eventDispatcher.listen(workflow1.onDoIt),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Listener.prototype, "onDoIt", null);
    const dispatcher = new event_1.EventDispatcher(injector_1.InjectorContext.forProviders([Listener]));
    const w = workflow1.create('start', dispatcher);
    dispatcher.registerListener(Listener);
    await w.apply('doIt');
    globals_1.expect(called).toBe(true);
    globals_1.expect(w.state.get()).toBe('doIt');
});
globals_1.test('workflow events apply next', async () => {
    const dispatcher = new event_1.EventDispatcher(injector_1.InjectorContext.forProviders([]));
    const w = workflow1.create('start', dispatcher);
    let endCalled = false;
    dispatcher.registerCallback(workflow1.onDoIt, async (event) => {
        event.next('success');
    });
    dispatcher.registerCallback(workflow1.onSuccess, async (event) => {
        event.next('end', new EndEvent());
    });
    dispatcher.registerCallback(workflow1.onEnd, async (event) => {
        globals_1.expect(event.test).toBe('hi');
        endCalled = true;
    });
    await w.apply('doIt');
    globals_1.expect(w.state.get()).toBe('end');
    globals_1.expect(endCalled).toBe(true);
});
globals_1.test('workflow events apply next invalid', async () => {
    const dispatcher = new event_1.EventDispatcher(injector_1.InjectorContext.forProviders([]));
    const w = workflow1.create('start', dispatcher);
    dispatcher.registerCallback(workflow1.onDoIt, async (event) => {
        event.next('end');
    });
    await globals_1.expect(w.apply('doIt')).rejects.toThrow('Can not apply state change from doIt->end');
});
globals_1.test('workflow events apply injector', async () => {
    class MyService {
        constructor() {
            this.data = 'myData';
        }
    }
    let Listener = class Listener {
        constructor(myService) {
            this.myService = myService;
        }
        onDoIt() {
            globals_1.expect(this.myService).toBeInstanceOf(MyService);
            this.myService.data = 'changedData';
        }
    };
    __decorate([
        event_1.eventDispatcher.listen(workflow1.onDoIt),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Listener.prototype, "onDoIt", null);
    Listener = __decorate([
        injector_1.injectable(),
        __metadata("design:paramtypes", [MyService])
    ], Listener);
    const context = injector_1.InjectorContext.forProviders([
        MyService, Listener
    ]);
    const dispatcher = new event_1.EventDispatcher(context);
    const w = workflow1.create('start', dispatcher);
    dispatcher.registerListener(Listener);
    await w.apply('doIt');
    globals_1.expect(context.get(MyService).data).toBe('changedData');
});
//# sourceMappingURL=workflow.spec.js.map