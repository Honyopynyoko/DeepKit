var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { expect, test } from '@jest/globals';
import 'reflect-metadata';
import { createWorkflow, WorkflowEvent } from '../src/workflow';
import { eventDispatcher, EventDispatcher, EventToken } from '@deepkit/event';
import { injectable, InjectorContext } from '@deepkit/injector';
class EndEvent extends WorkflowEvent {
    constructor() {
        super(...arguments);
        this.test = 'hi';
    }
}
const workflow1 = createWorkflow('myFlow', {
    start: WorkflowEvent,
    doIt: WorkflowEvent,
    failed: WorkflowEvent,
    success: WorkflowEvent,
    end: EndEvent,
}, {
    start: 'doIt',
    doIt: ['failed', 'success'],
    success: 'end',
    failed: 'end'
});
test('workflow', async () => {
    expect(workflow1.onDoIt).toBeInstanceOf(EventToken);
    const w = workflow1.create('start', new EventDispatcher());
    expect(w.state.get()).toBe('start');
    expect(w.isDone()).toBe(false);
    expect(w.can('doIt')).toBe(true);
    expect(w.can('failed')).toBe(false);
    expect(w.can('success')).toBe(false);
    expect(w.can('end')).toBe(false);
    await expect(w.apply('success')).rejects.toThrow('Can not apply state change from start->success');
    await w.apply('doIt');
    expect(w.state.get()).toBe('doIt');
    expect(w.isDone()).toBe(false);
    expect(w.can('doIt')).toBe(false);
    expect(w.can('failed')).toBe(true);
    expect(w.can('success')).toBe(true);
    expect(w.can('end')).toBe(false);
    expect(w.isDone()).toBe(false);
    await w.apply('success');
    await expect(w.apply('end')).rejects.toThrow('State end got the wrong event. Expected EndEvent, got WorkflowEvent');
    await w.apply('end', new EndEvent());
    expect(w.isDone()).toBe(true);
    expect(w.state.get()).toBe('end');
});
test('workflow events', async () => {
    const dispatcher = new EventDispatcher(InjectorContext.forProviders([]));
    const w = workflow1.create('start', dispatcher);
    let called = false;
    dispatcher.registerCallback(workflow1.onDoIt, async () => {
        called = true;
    });
    await w.apply('doIt');
    expect(called).toBe(true);
    expect(w.state.get()).toBe('doIt');
});
test('workflow events listener', async () => {
    let called = false;
    class Listener {
        onDoIt() {
            called = true;
        }
    }
    __decorate([
        eventDispatcher.listen(workflow1.onDoIt),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Listener.prototype, "onDoIt", null);
    const dispatcher = new EventDispatcher(InjectorContext.forProviders([Listener]));
    const w = workflow1.create('start', dispatcher);
    dispatcher.registerListener(Listener);
    await w.apply('doIt');
    expect(called).toBe(true);
    expect(w.state.get()).toBe('doIt');
});
test('workflow events apply next', async () => {
    const dispatcher = new EventDispatcher(InjectorContext.forProviders([]));
    const w = workflow1.create('start', dispatcher);
    let endCalled = false;
    dispatcher.registerCallback(workflow1.onDoIt, async (event) => {
        event.next('success');
    });
    dispatcher.registerCallback(workflow1.onSuccess, async (event) => {
        event.next('end', new EndEvent());
    });
    dispatcher.registerCallback(workflow1.onEnd, async (event) => {
        expect(event.test).toBe('hi');
        endCalled = true;
    });
    await w.apply('doIt');
    expect(w.state.get()).toBe('end');
    expect(endCalled).toBe(true);
});
test('workflow events apply next invalid', async () => {
    const dispatcher = new EventDispatcher(InjectorContext.forProviders([]));
    const w = workflow1.create('start', dispatcher);
    dispatcher.registerCallback(workflow1.onDoIt, async (event) => {
        event.next('end');
    });
    await expect(w.apply('doIt')).rejects.toThrow('Can not apply state change from doIt->end');
});
test('workflow events apply injector', async () => {
    class MyService {
        constructor() {
            this.data = 'myData';
        }
    }
    let Listener = class Listener {
        constructor(myService) {
            this.myService = myService;
        }
        onDoIt() {
            expect(this.myService).toBeInstanceOf(MyService);
            this.myService.data = 'changedData';
        }
    };
    __decorate([
        eventDispatcher.listen(workflow1.onDoIt),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Listener.prototype, "onDoIt", null);
    Listener = __decorate([
        injectable(),
        __metadata("design:paramtypes", [MyService])
    ], Listener);
    const context = InjectorContext.forProviders([
        MyService, Listener
    ]);
    const dispatcher = new EventDispatcher(context);
    const w = workflow1.create('start', dispatcher);
    dispatcher.registerListener(Listener);
    await w.apply('doIt');
    expect(context.get(MyService).data).toBe('changedData');
});
//# sourceMappingURL=workflow.spec.js.map